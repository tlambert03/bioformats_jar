import java.lang
import java.util
import typing



class PropertyIDMap(java.util.HashMap):
    PID_TITLE: typing.ClassVar[int] = ...
    PID_SUBJECT: typing.ClassVar[int] = ...
    PID_AUTHOR: typing.ClassVar[int] = ...
    PID_KEYWORDS: typing.ClassVar[int] = ...
    PID_COMMENTS: typing.ClassVar[int] = ...
    PID_TEMPLATE: typing.ClassVar[int] = ...
    PID_LASTAUTHOR: typing.ClassVar[int] = ...
    PID_REVNUMBER: typing.ClassVar[int] = ...
    PID_EDITTIME: typing.ClassVar[int] = ...
    PID_LASTPRINTED: typing.ClassVar[int] = ...
    PID_CREATE_DTM: typing.ClassVar[int] = ...
    PID_LASTSAVE_DTM: typing.ClassVar[int] = ...
    PID_PAGECOUNT: typing.ClassVar[int] = ...
    PID_WORDCOUNT: typing.ClassVar[int] = ...
    PID_CHARCOUNT: typing.ClassVar[int] = ...
    PID_THUMBNAIL: typing.ClassVar[int] = ...
    PID_APPNAME: typing.ClassVar[int] = ...
    PID_SECURITY: typing.ClassVar[int] = ...
    PID_DICTIONARY: typing.ClassVar[int] = ...
    PID_CODEPAGE: typing.ClassVar[int] = ...
    PID_CATEGORY: typing.ClassVar[int] = ...
    PID_PRESFORMAT: typing.ClassVar[int] = ...
    PID_BYTECOUNT: typing.ClassVar[int] = ...
    PID_LINECOUNT: typing.ClassVar[int] = ...
    PID_PARCOUNT: typing.ClassVar[int] = ...
    PID_SLIDECOUNT: typing.ClassVar[int] = ...
    PID_NOTECOUNT: typing.ClassVar[int] = ...
    PID_HIDDENCOUNT: typing.ClassVar[int] = ...
    PID_MMCLIPCOUNT: typing.ClassVar[int] = ...
    PID_SCALE: typing.ClassVar[int] = ...
    PID_HEADINGPAIR: typing.ClassVar[int] = ...
    PID_DOCPARTS: typing.ClassVar[int] = ...
    PID_MANAGER: typing.ClassVar[int] = ...
    PID_COMPANY: typing.ClassVar[int] = ...
    PID_LINKSDIRTY: typing.ClassVar[int] = ...
    PID_MAX: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, int: int, float: float): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map, typing.Mapping]): ...
    @typing.overload
    def get(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def get(self, long: int) -> typing.Any: ...
    @staticmethod
    def getDocumentSummaryInformationProperties() -> 'PropertyIDMap': ...
    @staticmethod
    def getSummaryInformationProperties() -> 'PropertyIDMap': ...
    @staticmethod
    def main(stringArray: typing.List[java.lang.String]) -> None: ...
    @typing.overload
    def put(self, k: typing.Any, v: typing.Any) -> typing.Any: ...
    @typing.overload
    def put(self, long: int, string: typing.Union[java.lang.String, str]) -> typing.Any: ...

class SectionIDMap(java.util.HashMap):
    SUMMARY_INFORMATION_ID: typing.ClassVar[typing.List[int]] = ...
    DOCUMENT_SUMMARY_INFORMATION_ID: typing.ClassVar[typing.List[typing.List[int]]] = ...
    UNDEFINED: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    @typing.overload
    def get(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def get(self, byteArray: typing.List[int]) -> PropertyIDMap: ...
    @staticmethod
    def getInstance() -> 'SectionIDMap': ...
    @staticmethod
    def getPIDString(byteArray: typing.List[int], long: int) -> java.lang.String: ...
    @typing.overload
    def put(self, byteArray: typing.List[int], propertyIDMap: PropertyIDMap) -> typing.Any: ...
    @typing.overload
    def put(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("loci.poi.hpsf.wellknown")``.

    PropertyIDMap: typing.Type[PropertyIDMap]
    SectionIDMap: typing.Type[SectionIDMap]
