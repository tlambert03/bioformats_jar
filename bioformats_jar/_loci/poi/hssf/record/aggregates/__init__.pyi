import java.lang
import java.util
import bioformats_jar._loci.poi.hssf.record
import typing



class ColumnInfoRecordsAggregate(loci.poi.hssf.record.Record):
    def __init__(self): ...
    def clone(self) -> typing.Any: ...
    def collapseColInfoRecords(self, int: int) -> None: ...
    def collapseColumn(self, short: int) -> None: ...
    @staticmethod
    def createColInfo() -> bioformats_jar._loci.poi.hssf.record.Record: ...
    def expandColumn(self, short: int) -> None: ...
    def findColumnIdx(self, int: int, int2: int) -> int: ...
    def findEndOfColumnOutlineGroup(self, int: int) -> int: ...
    def findStartOfColumnOutlineGroup(self, int: int) -> int: ...
    def getColInfo(self, int: int) -> bioformats_jar._loci.poi.hssf.record.ColumnInfoRecord: ...
    def getIterator(self) -> java.util.Iterator: ...
    def getNumColumns(self) -> int: ...
    def getRecordSize(self) -> int: ...
    def getSid(self) -> int: ...
    def groupColumnRange(self, short: int, short2: int, boolean: bool) -> None: ...
    @typing.overload
    def insertColumn(self, int: int, columnInfoRecord: bioformats_jar._loci.poi.hssf.record.ColumnInfoRecord) -> None: ...
    @typing.overload
    def insertColumn(self, columnInfoRecord: bioformats_jar._loci.poi.hssf.record.ColumnInfoRecord) -> None: ...
    def isColumnGroupCollapsed(self, int: int) -> bool: ...
    def isColumnGroupHiddenByParent(self, int: int) -> bool: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    def setColumn(self, short: int, short2: int, short3: int, integer: int, boolean: bool, boolean2: bool) -> None: ...
    def writeHidden(self, columnInfoRecord: bioformats_jar._loci.poi.hssf.record.ColumnInfoRecord, int: int, boolean: bool) -> bioformats_jar._loci.poi.hssf.record.ColumnInfoRecord: ...

class FormulaRecordAggregate(loci.poi.hssf.record.Record, bioformats_jar._loci.poi.hssf.record.CellValueRecordInterface, java.lang.Comparable):
    sid: typing.ClassVar[int] = ...
    def __init__(self, formulaRecord: bioformats_jar._loci.poi.hssf.record.FormulaRecord, stringRecord: bioformats_jar._loci.poi.hssf.record.StringRecord): ...
    def clone(self) -> typing.Any: ...
    def compareTo(self, object: typing.Any) -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getColumn(self) -> int: ...
    def getFormulaRecord(self) -> bioformats_jar._loci.poi.hssf.record.FormulaRecord: ...
    def getRecordSize(self) -> int: ...
    def getRow(self) -> int: ...
    def getSid(self) -> int: ...
    def getStringRecord(self) -> bioformats_jar._loci.poi.hssf.record.StringRecord: ...
    def getStringValue(self) -> java.lang.String: ...
    def getXFIndex(self) -> int: ...
    def isAfter(self, cellValueRecordInterface: bioformats_jar._loci.poi.hssf.record.CellValueRecordInterface) -> bool: ...
    def isBefore(self, cellValueRecordInterface: bioformats_jar._loci.poi.hssf.record.CellValueRecordInterface) -> bool: ...
    def isEqual(self, cellValueRecordInterface: bioformats_jar._loci.poi.hssf.record.CellValueRecordInterface) -> bool: ...
    def isInValueSection(self) -> bool: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    def setColumn(self, short: int) -> None: ...
    def setFormulaRecord(self, formulaRecord: bioformats_jar._loci.poi.hssf.record.FormulaRecord) -> None: ...
    def setRow(self, int: int) -> None: ...
    def setStringRecord(self, stringRecord: bioformats_jar._loci.poi.hssf.record.StringRecord) -> None: ...
    def setXFIndex(self, short: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class RowRecordsAggregate(loci.poi.hssf.record.Record):
    def __init__(self): ...
    def clone(self) -> typing.Any: ...
    def collapseRow(self, int: int) -> None: ...
    @staticmethod
    def createRow(int: int) -> bioformats_jar._loci.poi.hssf.record.RowRecord: ...
    def expandRow(self, int: int) -> None: ...
    def findEndOfRowOutlineGroup(self, int: int) -> int: ...
    def findStartOfRowOutlineGroup(self, int: int) -> int: ...
    def getEndRowNumberForBlock(self, int: int) -> int: ...
    def getFirstRowNum(self) -> int: ...
    def getIterator(self) -> java.util.Iterator: ...
    def getLastRowNum(self) -> int: ...
    def getPhysicalNumberOfRows(self) -> int: ...
    def getRecordSize(self) -> int: ...
    def getRow(self, int: int) -> bioformats_jar._loci.poi.hssf.record.RowRecord: ...
    def getRowBlockCount(self) -> int: ...
    def getRowBlockSize(self, int: int) -> int: ...
    def getRowCountForBlock(self, int: int) -> int: ...
    def getSid(self) -> int: ...
    def getStartRowNumberForBlock(self, int: int) -> int: ...
    def insertRow(self, rowRecord: bioformats_jar._loci.poi.hssf.record.RowRecord) -> None: ...
    def isRowGroupCollapsed(self, int: int) -> bool: ...
    def isRowGroupHiddenByParent(self, int: int) -> bool: ...
    def removeRow(self, rowRecord: bioformats_jar._loci.poi.hssf.record.RowRecord) -> None: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], valueRecordsAggregate: 'ValueRecordsAggregate') -> int: ...
    def writeHidden(self, rowRecord: bioformats_jar._loci.poi.hssf.record.RowRecord, int: int, boolean: bool) -> int: ...

class ValueRecordsAggregate(loci.poi.hssf.record.Record):
    sid: typing.ClassVar[int] = ...
    def __init__(self): ...
    def clone(self) -> typing.Any: ...
    def construct(self, int: int, list: java.util.List) -> int: ...
    def getFirstCellNum(self) -> int: ...
    def getIterator(self) -> java.util.Iterator: ...
    def getLastCellNum(self) -> int: ...
    def getPhysicalNumberOfCells(self) -> int: ...
    def getRecordSize(self) -> int: ...
    def getRowCellBlockSize(self, int: int, int2: int) -> int: ...
    def getSid(self) -> int: ...
    def insertCell(self, cellValueRecordInterface: bioformats_jar._loci.poi.hssf.record.CellValueRecordInterface) -> None: ...
    def removeCell(self, cellValueRecordInterface: bioformats_jar._loci.poi.hssf.record.CellValueRecordInterface) -> None: ...
    def rowHasCells(self, int: int) -> bool: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    def serializeCellRow(self, int: int, int2: int, byteArray: typing.List[int]) -> int: ...
    class MyIterator(java.util.Iterator):
        @typing.overload
        def __init__(self, valueRecordsAggregate: 'ValueRecordsAggregate'): ...
        @typing.overload
        def __init__(self, valueRecordsAggregate: 'ValueRecordsAggregate', int: int, int2: int): ...
        def hasNext(self) -> bool: ...
        def next(self) -> typing.Any: ...
        def remove(self) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("loci.poi.hssf.record.aggregates")``.

    ColumnInfoRecordsAggregate: typing.Type[ColumnInfoRecordsAggregate]
    FormulaRecordAggregate: typing.Type[FormulaRecordAggregate]
    RowRecordsAggregate: typing.Type[RowRecordsAggregate]
    ValueRecordsAggregate: typing.Type[ValueRecordsAggregate]
