import java.io
import java.lang
import bioformats_jar._loci.poi.hssf.record
import typing



class BiffViewer:
    def __init__(self, stringArray: typing.List[java.lang.String]): ...
    @staticmethod
    def createRecords(inputStream: java.io.InputStream, boolean: bool) -> typing.List[loci.poi.hssf.record.Record]: ...
    @staticmethod
    def main(stringArray: typing.List[java.lang.String]) -> None: ...
    def run(self) -> None: ...
    def setDump(self, boolean: bool) -> None: ...

class EFBiffViewer:
    def __init__(self): ...
    @staticmethod
    def main(stringArray: typing.List[java.lang.String]) -> None: ...
    def run(self) -> None: ...
    def setFile(self, string: typing.Union[java.lang.String, str]) -> None: ...

class FormulaViewer:
    def __init__(self): ...
    @staticmethod
    def main(stringArray: typing.List[java.lang.String]) -> None: ...
    def parseFormulaRecord(self, formulaRecord: bioformats_jar._loci.poi.hssf.record.FormulaRecord) -> None: ...
    def run(self) -> None: ...
    def setFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setList(self, boolean: bool) -> None: ...

class HSSF:
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], boolean: bool): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str], boolean: bool): ...
    @staticmethod
    def main(stringArray: typing.List[java.lang.String]) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("loci.poi.hssf.dev")``.

    BiffViewer: typing.Type[BiffViewer]
    EFBiffViewer: typing.Type[EFBiffViewer]
    FormulaViewer: typing.Type[FormulaViewer]
    HSSF: typing.Type[HSSF]
