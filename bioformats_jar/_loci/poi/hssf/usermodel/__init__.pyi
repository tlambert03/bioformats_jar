import java.awt
import java.awt.font
import java.awt.geom
import java.awt.image
import java.awt.image.renderable
import java.io
import java.lang
import java.text
import java.util
import bioformats_jar._loci.common
import bioformats_jar._loci.poi
import bioformats_jar._loci.poi.hssf.model
import bioformats_jar._loci.poi.hssf.record
import bioformats_jar._loci.poi.hssf.util
import bioformats_jar._loci.poi.poifs.filesystem
import typing



class DummyGraphics2d(java.awt.Graphics2D):
    def __init__(self): ...
    def addRenderingHints(self, map: typing.Union[java.util.Map, typing.Mapping]) -> None: ...
    def clearRect(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def clip(self, shape: java.awt.Shape) -> None: ...
    def clipRect(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def copyArea(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    @typing.overload
    def create(self) -> java.awt.Graphics: ...
    @typing.overload
    def create(self, int: int, int2: int, int3: int, int4: int) -> java.awt.Graphics: ...
    def dispose(self) -> None: ...
    def draw(self, shape: java.awt.Shape) -> None: ...
    def draw3DRect(self, int: int, int2: int, int3: int, int4: int, boolean: bool) -> None: ...
    def drawArc(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    def drawBytes(self, byteArray: typing.List[int], int: int, int2: int, int3: int, int4: int) -> None: ...
    def drawChars(self, charArray: typing.List[str], int: int, int2: int, int3: int, int4: int) -> None: ...
    def drawGlyphVector(self, glyphVector: java.awt.font.GlyphVector, float: float, float2: float) -> None: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, int3: int, int4: int, int5: int, int6: int, int7: int, int8: int, color: java.awt.Color, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, int3: int, int4: int, int5: int, int6: int, int7: int, int8: int, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, int3: int, int4: int, color: java.awt.Color, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, int3: int, int4: int, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, color: java.awt.Color, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, affineTransform: java.awt.geom.AffineTransform, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, bufferedImage: java.awt.image.BufferedImage, bufferedImageOp: java.awt.image.BufferedImageOp, int: int, int2: int) -> None: ...
    def drawLine(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def drawOval(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def drawPolygon(self, intArray: typing.List[int], intArray2: typing.List[int], int3: int) -> None: ...
    @typing.overload
    def drawPolygon(self, polygon: java.awt.Polygon) -> None: ...
    def drawPolyline(self, intArray: typing.List[int], intArray2: typing.List[int], int3: int) -> None: ...
    def drawRect(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def drawRenderableImage(self, renderableImage: java.awt.image.renderable.RenderableImage, affineTransform: java.awt.geom.AffineTransform) -> None: ...
    def drawRenderedImage(self, renderedImage: java.awt.image.RenderedImage, affineTransform: java.awt.geom.AffineTransform) -> None: ...
    def drawRoundRect(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    @typing.overload
    def drawString(self, string: typing.Union[java.lang.String, str], float: float, float2: float) -> None: ...
    @typing.overload
    def drawString(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    @typing.overload
    def drawString(self, attributedCharacterIterator: java.text.AttributedCharacterIterator, float: float, float2: float) -> None: ...
    @typing.overload
    def drawString(self, attributedCharacterIterator: java.text.AttributedCharacterIterator, int: int, int2: int) -> None: ...
    def fill(self, shape: java.awt.Shape) -> None: ...
    def fill3DRect(self, int: int, int2: int, int3: int, int4: int, boolean: bool) -> None: ...
    def fillArc(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    def fillOval(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def fillPolygon(self, intArray: typing.List[int], intArray2: typing.List[int], int3: int) -> None: ...
    @typing.overload
    def fillPolygon(self, polygon: java.awt.Polygon) -> None: ...
    def fillRect(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def fillRoundRect(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    def finalize(self) -> None: ...
    def getBackground(self) -> java.awt.Color: ...
    def getClip(self) -> java.awt.Shape: ...
    @typing.overload
    def getClipBounds(self) -> java.awt.Rectangle: ...
    @typing.overload
    def getClipBounds(self, rectangle: java.awt.Rectangle) -> java.awt.Rectangle: ...
    def getClipRect(self) -> java.awt.Rectangle: ...
    def getColor(self) -> java.awt.Color: ...
    def getComposite(self) -> java.awt.Composite: ...
    def getDeviceConfiguration(self) -> java.awt.GraphicsConfiguration: ...
    def getFont(self) -> java.awt.Font: ...
    @typing.overload
    def getFontMetrics(self) -> java.awt.FontMetrics: ...
    @typing.overload
    def getFontMetrics(self, font: java.awt.Font) -> java.awt.FontMetrics: ...
    def getFontRenderContext(self) -> java.awt.font.FontRenderContext: ...
    def getPaint(self) -> java.awt.Paint: ...
    def getRenderingHint(self, key: java.awt.RenderingHints.Key) -> typing.Any: ...
    def getRenderingHints(self) -> java.awt.RenderingHints: ...
    def getStroke(self) -> java.awt.Stroke: ...
    def getTransform(self) -> java.awt.geom.AffineTransform: ...
    def hit(self, rectangle: java.awt.Rectangle, shape: java.awt.Shape, boolean: bool) -> bool: ...
    def hitClip(self, int: int, int2: int, int3: int, int4: int) -> bool: ...
    @typing.overload
    def rotate(self, double: float) -> None: ...
    @typing.overload
    def rotate(self, double: float, double2: float, double3: float) -> None: ...
    def scale(self, double: float, double2: float) -> None: ...
    def setBackground(self, color: java.awt.Color) -> None: ...
    @typing.overload
    def setClip(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def setClip(self, shape: java.awt.Shape) -> None: ...
    def setColor(self, color: java.awt.Color) -> None: ...
    def setComposite(self, composite: java.awt.Composite) -> None: ...
    def setFont(self, font: java.awt.Font) -> None: ...
    def setPaint(self, paint: java.awt.Paint) -> None: ...
    def setPaintMode(self) -> None: ...
    def setRenderingHint(self, key: java.awt.RenderingHints.Key, object: typing.Any) -> None: ...
    def setRenderingHints(self, map: typing.Union[java.util.Map, typing.Mapping]) -> None: ...
    def setStroke(self, stroke: java.awt.Stroke) -> None: ...
    def setTransform(self, affineTransform: java.awt.geom.AffineTransform) -> None: ...
    def setXORMode(self, color: java.awt.Color) -> None: ...
    def shear(self, double: float, double2: float) -> None: ...
    def toString(self) -> java.lang.String: ...
    def transform(self, affineTransform: java.awt.geom.AffineTransform) -> None: ...
    @typing.overload
    def translate(self, double: float, double2: float) -> None: ...
    @typing.overload
    def translate(self, int: int, int2: int) -> None: ...

class EscherGraphics(java.awt.Graphics):
    def __init__(self, hSSFShapeGroup: 'HSSFShapeGroup', hSSFWorkbook: 'HSSFWorkbook', color: java.awt.Color, float: float): ...
    def clearRect(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def clipRect(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def copyArea(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    @typing.overload
    def create(self, int: int, int2: int, int3: int, int4: int) -> java.awt.Graphics: ...
    @typing.overload
    def create(self) -> java.awt.Graphics: ...
    def dispose(self) -> None: ...
    def drawArc(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, int3: int, int4: int, int5: int, int6: int, int7: int, int8: int, color: java.awt.Color, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, int3: int, int4: int, int5: int, int6: int, int7: int, int8: int, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, int3: int, int4: int, color: java.awt.Color, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, int3: int, int4: int, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, color: java.awt.Color, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawLine(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def drawLine(self, int: int, int2: int, int3: int, int4: int, int5: int) -> None: ...
    def drawOval(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def drawPolygon(self, polygon: java.awt.Polygon) -> None: ...
    @typing.overload
    def drawPolygon(self, intArray: typing.List[int], intArray2: typing.List[int], int3: int) -> None: ...
    def drawPolyline(self, intArray: typing.List[int], intArray2: typing.List[int], int3: int) -> None: ...
    def drawRect(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def drawRoundRect(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    @typing.overload
    def drawString(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    @typing.overload
    def drawString(self, attributedCharacterIterator: java.text.AttributedCharacterIterator, int: int, int2: int) -> None: ...
    def fillArc(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    def fillOval(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def fillPolygon(self, polygon: java.awt.Polygon) -> None: ...
    @typing.overload
    def fillPolygon(self, intArray: typing.List[int], intArray2: typing.List[int], int3: int) -> None: ...
    def fillRect(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def fillRoundRect(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    def getBackground(self) -> java.awt.Color: ...
    def getClip(self) -> java.awt.Shape: ...
    @typing.overload
    def getClipBounds(self, rectangle: java.awt.Rectangle) -> java.awt.Rectangle: ...
    @typing.overload
    def getClipBounds(self) -> java.awt.Rectangle: ...
    def getClipRect(self) -> java.awt.Rectangle: ...
    def getColor(self) -> java.awt.Color: ...
    def getFont(self) -> java.awt.Font: ...
    @typing.overload
    def getFontMetrics(self) -> java.awt.FontMetrics: ...
    @typing.overload
    def getFontMetrics(self, font: java.awt.Font) -> java.awt.FontMetrics: ...
    def setBackground(self, color: java.awt.Color) -> None: ...
    @typing.overload
    def setClip(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def setClip(self, shape: java.awt.Shape) -> None: ...
    def setColor(self, color: java.awt.Color) -> None: ...
    def setFont(self, font: java.awt.Font) -> None: ...
    def setPaintMode(self) -> None: ...
    def setXORMode(self, color: java.awt.Color) -> None: ...
    def translate(self, int: int, int2: int) -> None: ...

class EscherGraphics2d(java.awt.Graphics2D):
    def __init__(self, escherGraphics: EscherGraphics): ...
    def addRenderingHints(self, map: typing.Union[java.util.Map, typing.Mapping]) -> None: ...
    def clearRect(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def clip(self, shape: java.awt.Shape) -> None: ...
    def clipRect(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def copyArea(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    @typing.overload
    def create(self, int: int, int2: int, int3: int, int4: int) -> java.awt.Graphics: ...
    @typing.overload
    def create(self) -> java.awt.Graphics: ...
    def dispose(self) -> None: ...
    def draw(self, shape: java.awt.Shape) -> None: ...
    def drawArc(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    def drawGlyphVector(self, glyphVector: java.awt.font.GlyphVector, float: float, float2: float) -> None: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, int3: int, int4: int, int5: int, int6: int, int7: int, int8: int, color: java.awt.Color, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, int3: int, int4: int, int5: int, int6: int, int7: int, int8: int, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, int3: int, int4: int, color: java.awt.Color, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, int3: int, int4: int, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, color: java.awt.Color, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, int: int, int2: int, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, image: java.awt.Image, affineTransform: java.awt.geom.AffineTransform, imageObserver: java.awt.image.ImageObserver) -> bool: ...
    @typing.overload
    def drawImage(self, bufferedImage: java.awt.image.BufferedImage, bufferedImageOp: java.awt.image.BufferedImageOp, int: int, int2: int) -> None: ...
    @typing.overload
    def drawLine(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def drawLine(self, int: int, int2: int, int3: int, int4: int, int5: int) -> None: ...
    def drawOval(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def drawPolygon(self, polygon: java.awt.Polygon) -> None: ...
    @typing.overload
    def drawPolygon(self, intArray: typing.List[int], intArray2: typing.List[int], int3: int) -> None: ...
    def drawPolyline(self, intArray: typing.List[int], intArray2: typing.List[int], int3: int) -> None: ...
    def drawRect(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def drawRenderableImage(self, renderableImage: java.awt.image.renderable.RenderableImage, affineTransform: java.awt.geom.AffineTransform) -> None: ...
    def drawRenderedImage(self, renderedImage: java.awt.image.RenderedImage, affineTransform: java.awt.geom.AffineTransform) -> None: ...
    def drawRoundRect(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    @typing.overload
    def drawString(self, string: typing.Union[java.lang.String, str], float: float, float2: float) -> None: ...
    @typing.overload
    def drawString(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    @typing.overload
    def drawString(self, attributedCharacterIterator: java.text.AttributedCharacterIterator, float: float, float2: float) -> None: ...
    @typing.overload
    def drawString(self, attributedCharacterIterator: java.text.AttributedCharacterIterator, int: int, int2: int) -> None: ...
    def fill(self, shape: java.awt.Shape) -> None: ...
    def fillArc(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    def fillOval(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def fillPolygon(self, polygon: java.awt.Polygon) -> None: ...
    @typing.overload
    def fillPolygon(self, intArray: typing.List[int], intArray2: typing.List[int], int3: int) -> None: ...
    def fillRect(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def fillRoundRect(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    def getBackground(self) -> java.awt.Color: ...
    def getClip(self) -> java.awt.Shape: ...
    @typing.overload
    def getClipBounds(self, rectangle: java.awt.Rectangle) -> java.awt.Rectangle: ...
    @typing.overload
    def getClipBounds(self) -> java.awt.Rectangle: ...
    def getColor(self) -> java.awt.Color: ...
    def getComposite(self) -> java.awt.Composite: ...
    def getDeviceConfiguration(self) -> java.awt.GraphicsConfiguration: ...
    def getFont(self) -> java.awt.Font: ...
    @typing.overload
    def getFontMetrics(self) -> java.awt.FontMetrics: ...
    @typing.overload
    def getFontMetrics(self, font: java.awt.Font) -> java.awt.FontMetrics: ...
    def getFontRenderContext(self) -> java.awt.font.FontRenderContext: ...
    def getPaint(self) -> java.awt.Paint: ...
    def getRenderingHint(self, key: java.awt.RenderingHints.Key) -> typing.Any: ...
    def getRenderingHints(self) -> java.awt.RenderingHints: ...
    def getStroke(self) -> java.awt.Stroke: ...
    def getTransform(self) -> java.awt.geom.AffineTransform: ...
    def hit(self, rectangle: java.awt.Rectangle, shape: java.awt.Shape, boolean: bool) -> bool: ...
    @typing.overload
    def rotate(self, double: float) -> None: ...
    @typing.overload
    def rotate(self, double: float, double2: float, double3: float) -> None: ...
    def scale(self, double: float, double2: float) -> None: ...
    def setBackground(self, color: java.awt.Color) -> None: ...
    @typing.overload
    def setClip(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def setClip(self, shape: java.awt.Shape) -> None: ...
    def setColor(self, color: java.awt.Color) -> None: ...
    def setComposite(self, composite: java.awt.Composite) -> None: ...
    def setFont(self, font: java.awt.Font) -> None: ...
    def setPaint(self, paint: java.awt.Paint) -> None: ...
    def setPaintMode(self) -> None: ...
    def setRenderingHint(self, key: java.awt.RenderingHints.Key, object: typing.Any) -> None: ...
    def setRenderingHints(self, map: typing.Union[java.util.Map, typing.Mapping]) -> None: ...
    def setStroke(self, stroke: java.awt.Stroke) -> None: ...
    def setTransform(self, affineTransform: java.awt.geom.AffineTransform) -> None: ...
    def setXORMode(self, color: java.awt.Color) -> None: ...
    def shear(self, double: float, double2: float) -> None: ...
    def transform(self, affineTransform: java.awt.geom.AffineTransform) -> None: ...
    @typing.overload
    def translate(self, double: float, double2: float) -> None: ...
    @typing.overload
    def translate(self, int: int, int2: int) -> None: ...

class FontDetails:
    def __init__(self, string: typing.Union[java.lang.String, str], int: int): ...
    def addChar(self, char: str, int: int) -> None: ...
    def addChars(self, charArray: typing.List[str], intArray: typing.List[int]) -> None: ...
    @staticmethod
    def create(string: typing.Union[java.lang.String, str], properties: java.util.Properties) -> 'FontDetails': ...
    def getCharWidth(self, char: str) -> int: ...
    def getFontName(self) -> java.lang.String: ...
    def getHeight(self) -> int: ...
    def getStringWidth(self, string: typing.Union[java.lang.String, str]) -> int: ...

class HSSFAnchor:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, int4: int): ...
    def getDx1(self) -> int: ...
    def getDx2(self) -> int: ...
    def getDy1(self) -> int: ...
    def getDy2(self) -> int: ...
    def isHorizontallyFlipped(self) -> bool: ...
    def isVerticallyFlipped(self) -> bool: ...
    def setDx1(self, int: int) -> None: ...
    def setDx2(self, int: int) -> None: ...
    def setDy1(self, int: int) -> None: ...
    def setDy2(self, int: int) -> None: ...

class HSSFCell:
    CELL_TYPE_NUMERIC: typing.ClassVar[int] = ...
    CELL_TYPE_STRING: typing.ClassVar[int] = ...
    CELL_TYPE_FORMULA: typing.ClassVar[int] = ...
    CELL_TYPE_BLANK: typing.ClassVar[int] = ...
    CELL_TYPE_BOOLEAN: typing.ClassVar[int] = ...
    CELL_TYPE_ERROR: typing.ClassVar[int] = ...
    ENCODING_UNCHANGED: typing.ClassVar[int] = ...
    ENCODING_COMPRESSED_UNICODE: typing.ClassVar[int] = ...
    ENCODING_UTF_16: typing.ClassVar[int] = ...
    def getBooleanCellValue(self) -> bool: ...
    def getCellComment(self) -> 'HSSFComment': ...
    def getCellFormula(self) -> java.lang.String: ...
    def getCellNum(self) -> int: ...
    def getCellStyle(self) -> 'HSSFCellStyle': ...
    def getCellType(self) -> int: ...
    def getDateCellValue(self) -> java.util.Date: ...
    def getEncoding(self) -> int: ...
    def getErrorCellValue(self) -> int: ...
    def getNumericCellValue(self) -> float: ...
    def getRichStringCellValue(self) -> 'HSSFRichTextString': ...
    def getStringCellValue(self) -> java.lang.String: ...
    def setAsActiveCell(self) -> None: ...
    def setCellComment(self, hSSFComment: 'HSSFComment') -> None: ...
    def setCellErrorValue(self, byte: int) -> None: ...
    def setCellFormula(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setCellNum(self, short: int) -> None: ...
    def setCellStyle(self, hSSFCellStyle: 'HSSFCellStyle') -> None: ...
    def setCellType(self, int: int) -> None: ...
    @typing.overload
    def setCellValue(self, boolean: bool) -> None: ...
    @typing.overload
    def setCellValue(self, double: float) -> None: ...
    @typing.overload
    def setCellValue(self, string: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    def setCellValue(self, calendar: java.util.Calendar) -> None: ...
    @typing.overload
    def setCellValue(self, date: java.util.Date) -> None: ...
    @typing.overload
    def setCellValue(self, hSSFRichTextString: 'HSSFRichTextString') -> None: ...
    def setEncoding(self, short: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class HSSFCellStyle:
    ALIGN_GENERAL: typing.ClassVar[int] = ...
    ALIGN_LEFT: typing.ClassVar[int] = ...
    ALIGN_CENTER: typing.ClassVar[int] = ...
    ALIGN_RIGHT: typing.ClassVar[int] = ...
    ALIGN_FILL: typing.ClassVar[int] = ...
    ALIGN_JUSTIFY: typing.ClassVar[int] = ...
    ALIGN_CENTER_SELECTION: typing.ClassVar[int] = ...
    VERTICAL_TOP: typing.ClassVar[int] = ...
    VERTICAL_CENTER: typing.ClassVar[int] = ...
    VERTICAL_BOTTOM: typing.ClassVar[int] = ...
    VERTICAL_JUSTIFY: typing.ClassVar[int] = ...
    BORDER_NONE: typing.ClassVar[int] = ...
    BORDER_THIN: typing.ClassVar[int] = ...
    BORDER_MEDIUM: typing.ClassVar[int] = ...
    BORDER_DASHED: typing.ClassVar[int] = ...
    BORDER_HAIR: typing.ClassVar[int] = ...
    BORDER_THICK: typing.ClassVar[int] = ...
    BORDER_DOUBLE: typing.ClassVar[int] = ...
    BORDER_DOTTED: typing.ClassVar[int] = ...
    BORDER_MEDIUM_DASHED: typing.ClassVar[int] = ...
    BORDER_DASH_DOT: typing.ClassVar[int] = ...
    BORDER_MEDIUM_DASH_DOT: typing.ClassVar[int] = ...
    BORDER_DASH_DOT_DOT: typing.ClassVar[int] = ...
    BORDER_MEDIUM_DASH_DOT_DOT: typing.ClassVar[int] = ...
    BORDER_SLANTED_DASH_DOT: typing.ClassVar[int] = ...
    NO_FILL: typing.ClassVar[int] = ...
    SOLID_FOREGROUND: typing.ClassVar[int] = ...
    FINE_DOTS: typing.ClassVar[int] = ...
    ALT_BARS: typing.ClassVar[int] = ...
    SPARSE_DOTS: typing.ClassVar[int] = ...
    THICK_HORZ_BANDS: typing.ClassVar[int] = ...
    THICK_VERT_BANDS: typing.ClassVar[int] = ...
    THICK_BACKWARD_DIAG: typing.ClassVar[int] = ...
    THICK_FORWARD_DIAG: typing.ClassVar[int] = ...
    BIG_SPOTS: typing.ClassVar[int] = ...
    BRICKS: typing.ClassVar[int] = ...
    THIN_HORZ_BANDS: typing.ClassVar[int] = ...
    THIN_VERT_BANDS: typing.ClassVar[int] = ...
    THIN_BACKWARD_DIAG: typing.ClassVar[int] = ...
    THIN_FORWARD_DIAG: typing.ClassVar[int] = ...
    SQUARES: typing.ClassVar[int] = ...
    DIAMONDS: typing.ClassVar[int] = ...
    LESS_DOTS: typing.ClassVar[int] = ...
    LEAST_DOTS: typing.ClassVar[int] = ...
    def getAlignment(self) -> int: ...
    def getBorderBottom(self) -> int: ...
    def getBorderLeft(self) -> int: ...
    def getBorderRight(self) -> int: ...
    def getBorderTop(self) -> int: ...
    def getBottomBorderColor(self) -> int: ...
    def getDataFormat(self) -> int: ...
    def getDataFormatString(self, workbook: bioformats_jar._loci.poi.hssf.model.Workbook) -> java.lang.String: ...
    def getFillBackgroundColor(self) -> int: ...
    def getFillForegroundColor(self) -> int: ...
    def getFillPattern(self) -> int: ...
    def getFontIndex(self) -> int: ...
    def getHidden(self) -> bool: ...
    def getIndention(self) -> int: ...
    def getIndex(self) -> int: ...
    def getLeftBorderColor(self) -> int: ...
    def getLocked(self) -> bool: ...
    def getRightBorderColor(self) -> int: ...
    def getRotation(self) -> int: ...
    def getTopBorderColor(self) -> int: ...
    def getVerticalAlignment(self) -> int: ...
    def getWrapText(self) -> bool: ...
    def setAlignment(self, short: int) -> None: ...
    def setBorderBottom(self, short: int) -> None: ...
    def setBorderLeft(self, short: int) -> None: ...
    def setBorderRight(self, short: int) -> None: ...
    def setBorderTop(self, short: int) -> None: ...
    def setBottomBorderColor(self, short: int) -> None: ...
    def setDataFormat(self, short: int) -> None: ...
    def setFillBackgroundColor(self, short: int) -> None: ...
    def setFillForegroundColor(self, short: int) -> None: ...
    def setFillPattern(self, short: int) -> None: ...
    def setFont(self, hSSFFont: 'HSSFFont') -> None: ...
    def setHidden(self, boolean: bool) -> None: ...
    def setIndention(self, short: int) -> None: ...
    def setLeftBorderColor(self, short: int) -> None: ...
    def setLocked(self, boolean: bool) -> None: ...
    def setRightBorderColor(self, short: int) -> None: ...
    def setRotation(self, short: int) -> None: ...
    def setTopBorderColor(self, short: int) -> None: ...
    def setVerticalAlignment(self, short: int) -> None: ...
    def setWrapText(self, boolean: bool) -> None: ...

class HSSFDataFormat:
    def __init__(self, workbook: bioformats_jar._loci.poi.hssf.model.Workbook): ...
    @typing.overload
    @staticmethod
    def getBuiltinFormat(short: int) -> java.lang.String: ...
    @typing.overload
    @staticmethod
    def getBuiltinFormat(string: typing.Union[java.lang.String, str]) -> int: ...
    @staticmethod
    def getBuiltinFormats() -> java.util.List: ...
    @typing.overload
    def getFormat(self, short: int) -> java.lang.String: ...
    @typing.overload
    def getFormat(self, string: typing.Union[java.lang.String, str]) -> int: ...
    @staticmethod
    def getNumberOfBuiltinBuiltinFormats() -> int: ...

class HSSFDateUtil:
    @staticmethod
    def getExcelDate(date: java.util.Date) -> float: ...
    @typing.overload
    @staticmethod
    def getJavaDate(double: float) -> java.util.Date: ...
    @typing.overload
    @staticmethod
    def getJavaDate(double: float, boolean: bool) -> java.util.Date: ...
    @staticmethod
    def isADateFormat(int: int, string: typing.Union[java.lang.String, str]) -> bool: ...
    @staticmethod
    def isCellDateFormatted(hSSFCell: HSSFCell) -> bool: ...
    @staticmethod
    def isCellInternalDateFormatted(hSSFCell: HSSFCell) -> bool: ...
    @staticmethod
    def isInternalDateFormat(int: int) -> bool: ...
    @staticmethod
    def isValidExcelDate(double: float) -> bool: ...

class HSSFErrorConstants:
    ERROR_NULL: typing.ClassVar[int] = ...
    ERROR_DIV_0: typing.ClassVar[int] = ...
    ERROR_VALUE: typing.ClassVar[int] = ...
    ERROR_REF: typing.ClassVar[int] = ...
    ERROR_NAME: typing.ClassVar[int] = ...
    ERROR_NUM: typing.ClassVar[int] = ...
    ERROR_NA: typing.ClassVar[int] = ...

class HSSFFont:
    FONT_ARIAL: typing.ClassVar[java.lang.String] = ...
    BOLDWEIGHT_NORMAL: typing.ClassVar[int] = ...
    BOLDWEIGHT_BOLD: typing.ClassVar[int] = ...
    COLOR_NORMAL: typing.ClassVar[int] = ...
    COLOR_RED: typing.ClassVar[int] = ...
    SS_NONE: typing.ClassVar[int] = ...
    SS_SUPER: typing.ClassVar[int] = ...
    SS_SUB: typing.ClassVar[int] = ...
    U_NONE: typing.ClassVar[int] = ...
    U_SINGLE: typing.ClassVar[int] = ...
    U_DOUBLE: typing.ClassVar[int] = ...
    U_SINGLE_ACCOUNTING: typing.ClassVar[int] = ...
    U_DOUBLE_ACCOUNTING: typing.ClassVar[int] = ...
    ANSI_CHARSET: typing.ClassVar[int] = ...
    DEFAULT_CHARSET: typing.ClassVar[int] = ...
    SYMBOL_CHARSET: typing.ClassVar[int] = ...
    def getBoldweight(self) -> int: ...
    def getCharSet(self) -> int: ...
    def getColor(self) -> int: ...
    def getFontHeight(self) -> int: ...
    def getFontHeightInPoints(self) -> int: ...
    def getFontName(self) -> java.lang.String: ...
    def getIndex(self) -> int: ...
    def getItalic(self) -> bool: ...
    def getStrikeout(self) -> bool: ...
    def getTypeOffset(self) -> int: ...
    def getUnderline(self) -> int: ...
    def setBoldweight(self, short: int) -> None: ...
    def setCharSet(self, byte: int) -> None: ...
    def setColor(self, short: int) -> None: ...
    def setFontHeight(self, short: int) -> None: ...
    def setFontHeightInPoints(self, short: int) -> None: ...
    def setFontName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setItalic(self, boolean: bool) -> None: ...
    def setStrikeout(self, boolean: bool) -> None: ...
    def setTypeOffset(self, short: int) -> None: ...
    def setUnderline(self, byte: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class HSSFFooter:
    @staticmethod
    def date() -> java.lang.String: ...
    @staticmethod
    def endDoubleUnderline() -> java.lang.String: ...
    @staticmethod
    def endUnderline() -> java.lang.String: ...
    @staticmethod
    def file() -> java.lang.String: ...
    @staticmethod
    def font(string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str]) -> java.lang.String: ...
    @staticmethod
    def fontSize(short: int) -> java.lang.String: ...
    def getCenter(self) -> java.lang.String: ...
    def getLeft(self) -> java.lang.String: ...
    def getRight(self) -> java.lang.String: ...
    @staticmethod
    def numPages() -> java.lang.String: ...
    @staticmethod
    def page() -> java.lang.String: ...
    def setCenter(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLeft(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setRight(self, string: typing.Union[java.lang.String, str]) -> None: ...
    @staticmethod
    def startDoubleUnderline() -> java.lang.String: ...
    @staticmethod
    def startUnderline() -> java.lang.String: ...
    @staticmethod
    def tab() -> java.lang.String: ...
    @staticmethod
    def time() -> java.lang.String: ...

class HSSFHeader:
    @staticmethod
    def date() -> java.lang.String: ...
    @staticmethod
    def endDoubleUnderline() -> java.lang.String: ...
    @staticmethod
    def endUnderline() -> java.lang.String: ...
    @staticmethod
    def file() -> java.lang.String: ...
    @staticmethod
    def font(string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str]) -> java.lang.String: ...
    @staticmethod
    def fontSize(short: int) -> java.lang.String: ...
    def getCenter(self) -> java.lang.String: ...
    def getLeft(self) -> java.lang.String: ...
    def getRight(self) -> java.lang.String: ...
    @staticmethod
    def numPages() -> java.lang.String: ...
    @staticmethod
    def page() -> java.lang.String: ...
    def setCenter(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setLeft(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setRight(self, string: typing.Union[java.lang.String, str]) -> None: ...
    @staticmethod
    def startDoubleUnderline() -> java.lang.String: ...
    @staticmethod
    def startUnderline() -> java.lang.String: ...
    @staticmethod
    def tab() -> java.lang.String: ...
    @staticmethod
    def time() -> java.lang.String: ...

class HSSFName:
    def getNameName(self) -> java.lang.String: ...
    def getReference(self) -> java.lang.String: ...
    def getSheetName(self) -> java.lang.String: ...
    def setNameName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setReference(self, string: typing.Union[java.lang.String, str]) -> None: ...

class HSSFObjectData:
    def __init__(self, objRecord: bioformats_jar._loci.poi.hssf.record.ObjRecord, pOIFSFileSystem: bioformats_jar._loci.poi.poifs.filesystem.POIFSFileSystem): ...
    def getDirectory(self) -> bioformats_jar._loci.poi.poifs.filesystem.DirectoryEntry: ...

class HSSFPalette:
    def addColor(self, byte: int, byte2: int, byte3: int) -> bioformats_jar._loci.poi.hssf.util.HSSFColor: ...
    def findColor(self, byte: int, byte2: int, byte3: int) -> bioformats_jar._loci.poi.hssf.util.HSSFColor: ...
    def findSimilarColor(self, byte: int, byte2: int, byte3: int) -> bioformats_jar._loci.poi.hssf.util.HSSFColor: ...
    def getColor(self, short: int) -> bioformats_jar._loci.poi.hssf.util.HSSFColor: ...
    def setColorAtIndex(self, short: int, byte: int, byte2: int, byte3: int) -> None: ...

class HSSFPictureData:
    MSOBI_WMF: typing.ClassVar[int] = ...
    MSOBI_EMF: typing.ClassVar[int] = ...
    MSOBI_PICT: typing.ClassVar[int] = ...
    MSOBI_PNG: typing.ClassVar[int] = ...
    MSOBI_JPEG: typing.ClassVar[int] = ...
    MSOBI_DIB: typing.ClassVar[int] = ...
    FORMAT_MASK: typing.ClassVar[int] = ...
    def getData(self) -> typing.List[int]: ...
    def suggestFileExtension(self) -> java.lang.String: ...

class HSSFPrintSetup:
    LETTER_PAPERSIZE: typing.ClassVar[int] = ...
    LEGAL_PAPERSIZE: typing.ClassVar[int] = ...
    EXECUTIVE_PAPERSIZE: typing.ClassVar[int] = ...
    A4_PAPERSIZE: typing.ClassVar[int] = ...
    A5_PAPERSIZE: typing.ClassVar[int] = ...
    ENVELOPE_10_PAPERSIZE: typing.ClassVar[int] = ...
    ENVELOPE_DL_PAPERSIZE: typing.ClassVar[int] = ...
    ENVELOPE_CS_PAPERSIZE: typing.ClassVar[int] = ...
    ENVELOPE_MONARCH_PAPERSIZE: typing.ClassVar[int] = ...
    def getCopies(self) -> int: ...
    def getDraft(self) -> bool: ...
    def getFitHeight(self) -> int: ...
    def getFitWidth(self) -> int: ...
    def getFooterMargin(self) -> float: ...
    def getHResolution(self) -> int: ...
    def getHeaderMargin(self) -> float: ...
    def getLandscape(self) -> bool: ...
    def getLeftToRight(self) -> bool: ...
    def getNoColor(self) -> bool: ...
    def getNoOrientation(self) -> bool: ...
    def getNotes(self) -> bool: ...
    def getOptions(self) -> int: ...
    def getPageStart(self) -> int: ...
    def getPaperSize(self) -> int: ...
    def getScale(self) -> int: ...
    def getUsePage(self) -> bool: ...
    def getVResolution(self) -> int: ...
    def getValidSettings(self) -> bool: ...
    def setCopies(self, short: int) -> None: ...
    def setDraft(self, boolean: bool) -> None: ...
    def setFitHeight(self, short: int) -> None: ...
    def setFitWidth(self, short: int) -> None: ...
    def setFooterMargin(self, double: float) -> None: ...
    def setHResolution(self, short: int) -> None: ...
    def setHeaderMargin(self, double: float) -> None: ...
    def setLandscape(self, boolean: bool) -> None: ...
    def setLeftToRight(self, boolean: bool) -> None: ...
    def setNoColor(self, boolean: bool) -> None: ...
    def setNoOrientation(self, boolean: bool) -> None: ...
    def setNotes(self, boolean: bool) -> None: ...
    def setOptions(self, short: int) -> None: ...
    def setPageStart(self, short: int) -> None: ...
    def setPaperSize(self, short: int) -> None: ...
    def setScale(self, short: int) -> None: ...
    def setUsePage(self, boolean: bool) -> None: ...
    def setVResolution(self, short: int) -> None: ...
    def setValidSettings(self, boolean: bool) -> None: ...

class HSSFRichTextString(java.lang.Comparable):
    NO_FONT: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def applyFont(self, int: int, int2: int, hSSFFont: HSSFFont) -> None: ...
    @typing.overload
    def applyFont(self, int: int, int2: int, short: int) -> None: ...
    @typing.overload
    def applyFont(self, hSSFFont: HSSFFont) -> None: ...
    @typing.overload
    def applyFont(self, short: int) -> None: ...
    def clearFormatting(self) -> None: ...
    def compareTo(self, object: typing.Any) -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getFontAtIndex(self, int: int) -> int: ...
    def getFontOfFormattingRun(self, int: int) -> int: ...
    def getIndexOfFormattingRun(self, int: int) -> int: ...
    def getString(self) -> java.lang.String: ...
    def length(self) -> int: ...
    def numFormattingRuns(self) -> int: ...
    def toString(self) -> java.lang.String: ...

class HSSFRow(java.lang.Comparable):
    INITIAL_CAPACITY: typing.ClassVar[int] = ...
    def cellIterator(self) -> java.util.Iterator: ...
    def compareTo(self, object: typing.Any) -> int: ...
    @typing.overload
    def createCell(self, short: int) -> HSSFCell: ...
    @typing.overload
    def createCell(self, short: int, int: int) -> HSSFCell: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getCell(self, short: int) -> HSSFCell: ...
    def getFirstCellNum(self) -> int: ...
    def getHeight(self) -> int: ...
    def getHeightInPoints(self) -> float: ...
    def getLastCellNum(self) -> int: ...
    def getPhysicalNumberOfCells(self) -> int: ...
    def getRowNum(self) -> int: ...
    def getZeroHeight(self) -> bool: ...
    def removeCell(self, hSSFCell: HSSFCell) -> None: ...
    def setHeight(self, short: int) -> None: ...
    def setHeightInPoints(self, float: float) -> None: ...
    def setRowNum(self, int: int) -> None: ...
    def setZeroHeight(self, boolean: bool) -> None: ...

class HSSFShape:
    LINEWIDTH_ONE_PT: typing.ClassVar[int] = ...
    LINEWIDTH_DEFAULT: typing.ClassVar[int] = ...
    LINESTYLE_SOLID: typing.ClassVar[int] = ...
    LINESTYLE_DASHSYS: typing.ClassVar[int] = ...
    LINESTYLE_DOTSYS: typing.ClassVar[int] = ...
    LINESTYLE_DASHDOTSYS: typing.ClassVar[int] = ...
    LINESTYLE_DASHDOTDOTSYS: typing.ClassVar[int] = ...
    LINESTYLE_DOTGEL: typing.ClassVar[int] = ...
    LINESTYLE_DASHGEL: typing.ClassVar[int] = ...
    LINESTYLE_LONGDASHGEL: typing.ClassVar[int] = ...
    LINESTYLE_DASHDOTGEL: typing.ClassVar[int] = ...
    LINESTYLE_LONGDASHDOTGEL: typing.ClassVar[int] = ...
    LINESTYLE_LONGDASHDOTDOTGEL: typing.ClassVar[int] = ...
    LINESTYLE_NONE: typing.ClassVar[int] = ...
    def countOfAllChildren(self) -> int: ...
    def getAnchor(self) -> HSSFAnchor: ...
    def getFillColor(self) -> int: ...
    def getLineStyle(self) -> int: ...
    def getLineStyleColor(self) -> int: ...
    def getLineWidth(self) -> int: ...
    def getParent(self) -> 'HSSFShape': ...
    def isNoFill(self) -> bool: ...
    def setAnchor(self, hSSFAnchor: HSSFAnchor) -> None: ...
    @typing.overload
    def setFillColor(self, int: int) -> None: ...
    @typing.overload
    def setFillColor(self, int: int, int2: int, int3: int) -> None: ...
    def setLineStyle(self, int: int) -> None: ...
    @typing.overload
    def setLineStyleColor(self, int: int) -> None: ...
    @typing.overload
    def setLineStyleColor(self, int: int, int2: int, int3: int) -> None: ...
    def setLineWidth(self, int: int) -> None: ...
    def setNoFill(self, boolean: bool) -> None: ...

class HSSFShapeContainer:
    def getChildren(self) -> java.util.List: ...

class HSSFSheet:
    LeftMargin: typing.ClassVar[int] = ...
    RightMargin: typing.ClassVar[int] = ...
    TopMargin: typing.ClassVar[int] = ...
    BottomMargin: typing.ClassVar[int] = ...
    PANE_LOWER_RIGHT: typing.ClassVar[int] = ...
    PANE_UPPER_RIGHT: typing.ClassVar[int] = ...
    PANE_LOWER_LEFT: typing.ClassVar[int] = ...
    PANE_UPPER_LEFT: typing.ClassVar[int] = ...
    INITIAL_CAPACITY: typing.ClassVar[int] = ...
    def addMergedRegion(self, region: bioformats_jar._loci.poi.hssf.util.Region) -> int: ...
    def autoSizeColumn(self, short: int) -> None: ...
    def createDrawingPatriarch(self) -> 'HSSFPatriarch': ...
    @typing.overload
    def createFreezePane(self, int: int, int2: int) -> None: ...
    @typing.overload
    def createFreezePane(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    def createRow(self, int: int) -> HSSFRow: ...
    def createSplitPane(self, int: int, int2: int, int3: int, int4: int, int5: int) -> None: ...
    def dumpDrawingRecords(self, boolean: bool) -> None: ...
    def getAlternateExpression(self) -> bool: ...
    def getAlternateFormula(self) -> bool: ...
    def getAutobreaks(self) -> bool: ...
    def getCellComment(self, int: int, int2: int) -> 'HSSFComment': ...
    def getColumnBreaks(self) -> typing.List[int]: ...
    def getColumnWidth(self, short: int) -> int: ...
    def getDefaultColumnWidth(self) -> int: ...
    def getDefaultRowHeight(self) -> int: ...
    def getDefaultRowHeightInPoints(self) -> float: ...
    def getDialog(self) -> bool: ...
    def getDisplayGuts(self) -> bool: ...
    def getFirstRowNum(self) -> int: ...
    def getFitToPage(self) -> bool: ...
    def getFooter(self) -> HSSFFooter: ...
    def getHeader(self) -> HSSFHeader: ...
    def getHorizontallyCenter(self) -> bool: ...
    def getLastRowNum(self) -> int: ...
    def getLeftCol(self) -> int: ...
    def getMargin(self, short: int) -> float: ...
    def getMergedRegionAt(self, int: int) -> bioformats_jar._loci.poi.hssf.util.Region: ...
    def getNumMergedRegions(self) -> int: ...
    def getObjectProtect(self) -> bool: ...
    def getPaneInformation(self) -> bioformats_jar._loci.poi.hssf.util.PaneInformation: ...
    def getPassword(self) -> int: ...
    def getPhysicalNumberOfRows(self) -> int: ...
    def getPrintSetup(self) -> HSSFPrintSetup: ...
    def getProtect(self) -> bool: ...
    def getRow(self, int: int) -> HSSFRow: ...
    def getRowBreaks(self) -> typing.List[int]: ...
    def getRowSumsBelow(self) -> bool: ...
    def getRowSumsRight(self) -> bool: ...
    def getScenarioProtect(self) -> bool: ...
    def getTopRow(self) -> int: ...
    def getVerticallyCenter(self, boolean: bool) -> bool: ...
    def groupColumn(self, short: int, short2: int) -> None: ...
    def groupRow(self, int: int, int2: int) -> None: ...
    def isColumnBroken(self, short: int) -> bool: ...
    def isColumnHidden(self, short: int) -> bool: ...
    def isDisplayFormulas(self) -> bool: ...
    def isDisplayGridlines(self) -> bool: ...
    def isDisplayRowColHeadings(self) -> bool: ...
    def isGridsPrinted(self) -> bool: ...
    def isPrintGridlines(self) -> bool: ...
    def isRowBroken(self, int: int) -> bool: ...
    def protectSheet(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def removeColumnBreak(self, short: int) -> None: ...
    def removeMergedRegion(self, int: int) -> None: ...
    def removeRow(self, hSSFRow: HSSFRow) -> None: ...
    def removeRowBreak(self, int: int) -> None: ...
    def rowIterator(self) -> java.util.Iterator: ...
    def setAlternativeExpression(self, boolean: bool) -> None: ...
    def setAlternativeFormula(self, boolean: bool) -> None: ...
    def setAutobreaks(self, boolean: bool) -> None: ...
    def setColumnBreak(self, short: int) -> None: ...
    def setColumnGroupCollapsed(self, short: int, boolean: bool) -> None: ...
    def setColumnHidden(self, short: int, boolean: bool) -> None: ...
    def setColumnWidth(self, short: int, short2: int) -> None: ...
    def setDefaultColumnStyle(self, short: int, hSSFCellStyle: HSSFCellStyle) -> None: ...
    def setDefaultColumnWidth(self, short: int) -> None: ...
    def setDefaultRowHeight(self, short: int) -> None: ...
    def setDefaultRowHeightInPoints(self, float: float) -> None: ...
    def setDialog(self, boolean: bool) -> None: ...
    def setDisplayFormulas(self, boolean: bool) -> None: ...
    def setDisplayGridlines(self, boolean: bool) -> None: ...
    def setDisplayGuts(self, boolean: bool) -> None: ...
    def setDisplayRowColHeadings(self, boolean: bool) -> None: ...
    def setFitToPage(self, boolean: bool) -> None: ...
    def setGridsPrinted(self, boolean: bool) -> None: ...
    def setHorizontallyCenter(self, boolean: bool) -> None: ...
    def setMargin(self, short: int, double: float) -> None: ...
    def setPrintGridlines(self, boolean: bool) -> None: ...
    def setProtect(self, boolean: bool) -> None: ...
    def setRowBreak(self, int: int) -> None: ...
    def setRowGroupCollapsed(self, int: int, boolean: bool) -> None: ...
    def setRowSumsBelow(self, boolean: bool) -> None: ...
    def setRowSumsRight(self, boolean: bool) -> None: ...
    def setSelected(self, boolean: bool) -> None: ...
    def setVerticallyCenter(self, boolean: bool) -> None: ...
    def setZoom(self, int: int, int2: int) -> None: ...
    @typing.overload
    def shiftRows(self, int: int, int2: int, int3: int) -> None: ...
    @typing.overload
    def shiftRows(self, int: int, int2: int, int3: int, boolean: bool, boolean2: bool) -> None: ...
    def showInPane(self, short: int, short2: int) -> None: ...
    def ungroupColumn(self, short: int, short2: int) -> None: ...
    def ungroupRow(self, int: int, int2: int) -> None: ...

class HSSFWorkbook(loci.poi.POIDocument):
    INITIAL_CAPACITY: typing.ClassVar[int] = ...
    PICTURE_TYPE_EMF: typing.ClassVar[int] = ...
    PICTURE_TYPE_WMF: typing.ClassVar[int] = ...
    PICTURE_TYPE_PICT: typing.ClassVar[int] = ...
    PICTURE_TYPE_JPEG: typing.ClassVar[int] = ...
    PICTURE_TYPE_PNG: typing.ClassVar[int] = ...
    PICTURE_TYPE_DIB: typing.ClassVar[int] = ...
    ENCODING_COMPRESSED_UNICODE: typing.ClassVar[int] = ...
    ENCODING_UTF_16: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, randomAccessInputStream: bioformats_jar._loci.common.RandomAccessInputStream): ...
    @typing.overload
    def __init__(self, randomAccessInputStream: bioformats_jar._loci.common.RandomAccessInputStream, boolean: bool): ...
    @typing.overload
    def __init__(self, pOIFSFileSystem: bioformats_jar._loci.poi.poifs.filesystem.POIFSFileSystem): ...
    @typing.overload
    def __init__(self, pOIFSFileSystem: bioformats_jar._loci.poi.poifs.filesystem.POIFSFileSystem, boolean: bool): ...
    def addPicture(self, byteArray: typing.List[int], int: int) -> int: ...
    def addSSTString(self, string: typing.Union[java.lang.String, str]) -> int: ...
    def cloneSheet(self, int: int) -> HSSFSheet: ...
    def createCellStyle(self) -> HSSFCellStyle: ...
    def createDataFormat(self) -> HSSFDataFormat: ...
    def createFont(self) -> HSSFFont: ...
    def createName(self) -> HSSFName: ...
    @typing.overload
    def createSheet(self) -> HSSFSheet: ...
    @typing.overload
    def createSheet(self, string: typing.Union[java.lang.String, str]) -> HSSFSheet: ...
    def dumpDrawingGroupRecords(self, boolean: bool) -> None: ...
    def findFont(self, short: int, short2: int, short3: int, string: typing.Union[java.lang.String, str], boolean: bool, boolean2: bool, short4: int, byte: int) -> HSSFFont: ...
    def getAllEmbeddedObjects(self) -> java.util.List: ...
    def getAllPictures(self) -> java.util.List: ...
    def getBackupFlag(self) -> bool: ...
    def getBytes(self) -> typing.List[int]: ...
    def getCellStyleAt(self, short: int) -> HSSFCellStyle: ...
    def getCustomPalette(self) -> HSSFPalette: ...
    def getDisplayedTab(self) -> int: ...
    def getFontAt(self, short: int) -> HSSFFont: ...
    def getNameAt(self, int: int) -> HSSFName: ...
    def getNameIndex(self, string: typing.Union[java.lang.String, str]) -> int: ...
    def getNameName(self, int: int) -> java.lang.String: ...
    def getNumCellStyles(self) -> int: ...
    def getNumberOfFonts(self) -> int: ...
    def getNumberOfNames(self) -> int: ...
    def getNumberOfSheets(self) -> int: ...
    def getPrintArea(self, int: int) -> java.lang.String: ...
    def getSSTString(self, int: int) -> java.lang.String: ...
    def getSelectedTab(self) -> int: ...
    def getSheet(self, string: typing.Union[java.lang.String, str]) -> HSSFSheet: ...
    def getSheetAt(self, int: int) -> HSSFSheet: ...
    @typing.overload
    def getSheetIndex(self, string: typing.Union[java.lang.String, str]) -> int: ...
    @typing.overload
    def getSheetIndex(self, hSSFSheet: HSSFSheet) -> int: ...
    def getSheetName(self, int: int) -> java.lang.String: ...
    def insertChartRecord(self) -> None: ...
    @typing.overload
    def removeName(self, int: int) -> None: ...
    @typing.overload
    def removeName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def removePrintArea(self, int: int) -> None: ...
    def removeSheetAt(self, int: int) -> None: ...
    def setBackupFlag(self, boolean: bool) -> None: ...
    def setDisplayedTab(self, short: int) -> None: ...
    @typing.overload
    def setPrintArea(self, int: int, int2: int, int3: int, int4: int, int5: int) -> None: ...
    @typing.overload
    def setPrintArea(self, int: int, string: typing.Union[java.lang.String, str]) -> None: ...
    def setRepeatingRowsAndColumns(self, int: int, int2: int, int3: int, int4: int, int5: int) -> None: ...
    def setSelectedTab(self, short: int) -> None: ...
    @typing.overload
    def setSheetName(self, int: int, string: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    def setSheetName(self, int: int, string: typing.Union[java.lang.String, str], short: int) -> None: ...
    def setSheetOrder(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def unwriteProtectWorkbook(self) -> None: ...
    def write(self, outputStream: java.io.OutputStream) -> None: ...
    def writeProtectWorkbook(self, string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str]) -> None: ...

class HSSFChildAnchor(HSSFAnchor):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, int4: int): ...
    def isHorizontallyFlipped(self) -> bool: ...
    def isVerticallyFlipped(self) -> bool: ...
    def setAnchor(self, int: int, int2: int, int3: int, int4: int) -> None: ...

class HSSFClientAnchor(HSSFAnchor):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, int4: int, short: int, int5: int, short2: int, int6: int): ...
    def getAnchorHeightInPoints(self, hSSFSheet: HSSFSheet) -> float: ...
    def getAnchorType(self) -> int: ...
    def getCol1(self) -> int: ...
    def getCol2(self) -> int: ...
    def getRow1(self) -> int: ...
    def getRow2(self) -> int: ...
    def isHorizontallyFlipped(self) -> bool: ...
    def isVerticallyFlipped(self) -> bool: ...
    def setAnchor(self, short: int, int: int, int2: int, int3: int, short2: int, int4: int, int5: int, int6: int) -> None: ...
    def setAnchorType(self, int: int) -> None: ...
    def setCol1(self, short: int) -> None: ...
    def setCol2(self, short: int) -> None: ...
    def setRow1(self, int: int) -> None: ...
    def setRow2(self, int: int) -> None: ...

class HSSFPatriarch(HSSFShapeContainer):
    def countOfAllChildren(self) -> int: ...
    def createComment(self, hSSFAnchor: HSSFAnchor) -> 'HSSFComment': ...
    def createGroup(self, hSSFClientAnchor: HSSFClientAnchor) -> 'HSSFShapeGroup': ...
    def createPicture(self, hSSFClientAnchor: HSSFClientAnchor, int: int) -> 'HSSFPicture': ...
    def createPolygon(self, hSSFClientAnchor: HSSFClientAnchor) -> 'HSSFPolygon': ...
    def createSimpleShape(self, hSSFClientAnchor: HSSFClientAnchor) -> 'HSSFSimpleShape': ...
    def createTextbox(self, hSSFClientAnchor: HSSFClientAnchor) -> 'HSSFTextbox': ...
    def getChildren(self) -> java.util.List: ...
    def getX1(self) -> int: ...
    def getX2(self) -> int: ...
    def getY1(self) -> int: ...
    def getY2(self) -> int: ...
    def setCoordinates(self, int: int, int2: int, int3: int, int4: int) -> None: ...

class HSSFPolygon(HSSFShape):
    def getDrawAreaHeight(self) -> int: ...
    def getDrawAreaWidth(self) -> int: ...
    def getXPoints(self) -> typing.List[int]: ...
    def getYPoints(self) -> typing.List[int]: ...
    def setPoints(self, intArray: typing.List[int], intArray2: typing.List[int]) -> None: ...
    def setPolygonDrawArea(self, int: int, int2: int) -> None: ...

class HSSFShapeGroup(HSSFShape, HSSFShapeContainer):
    def __init__(self, hSSFShape: HSSFShape, hSSFAnchor: HSSFAnchor): ...
    def countOfAllChildren(self) -> int: ...
    def createGroup(self, hSSFChildAnchor: HSSFChildAnchor) -> 'HSSFShapeGroup': ...
    def createPicture(self, hSSFChildAnchor: HSSFChildAnchor, int: int) -> 'HSSFPicture': ...
    def createPolygon(self, hSSFChildAnchor: HSSFChildAnchor) -> HSSFPolygon: ...
    def createShape(self, hSSFChildAnchor: HSSFChildAnchor) -> 'HSSFSimpleShape': ...
    def createTextbox(self, hSSFChildAnchor: HSSFChildAnchor) -> 'HSSFTextbox': ...
    def getChildren(self) -> java.util.List: ...
    def getX1(self) -> int: ...
    def getX2(self) -> int: ...
    def getY1(self) -> int: ...
    def getY2(self) -> int: ...
    def setCoordinates(self, int: int, int2: int, int3: int, int4: int) -> None: ...

class HSSFSimpleShape(HSSFShape):
    OBJECT_TYPE_LINE: typing.ClassVar[int] = ...
    OBJECT_TYPE_RECTANGLE: typing.ClassVar[int] = ...
    OBJECT_TYPE_OVAL: typing.ClassVar[int] = ...
    OBJECT_TYPE_PICTURE: typing.ClassVar[int] = ...
    OBJECT_TYPE_COMMENT: typing.ClassVar[int] = ...
    def getShapeType(self) -> int: ...
    def setShapeType(self, int: int) -> None: ...

class HSSFPicture(HSSFSimpleShape):
    PICTURE_TYPE_EMF: typing.ClassVar[int] = ...
    PICTURE_TYPE_WMF: typing.ClassVar[int] = ...
    PICTURE_TYPE_PICT: typing.ClassVar[int] = ...
    PICTURE_TYPE_JPEG: typing.ClassVar[int] = ...
    PICTURE_TYPE_PNG: typing.ClassVar[int] = ...
    PICTURE_TYPE_DIB: typing.ClassVar[int] = ...
    def getPictureIndex(self) -> int: ...
    def getPreferredSize(self) -> HSSFClientAnchor: ...
    def resize(self) -> None: ...
    def setPictureIndex(self, int: int) -> None: ...

class HSSFTextbox(HSSFSimpleShape):
    OBJECT_TYPE_TEXT: typing.ClassVar[int] = ...
    def __init__(self, hSSFShape: HSSFShape, hSSFAnchor: HSSFAnchor): ...
    def getMarginBottom(self) -> int: ...
    def getMarginLeft(self) -> int: ...
    def getMarginRight(self) -> int: ...
    def getMarginTop(self) -> int: ...
    def getString(self) -> HSSFRichTextString: ...
    def setMarginBottom(self, int: int) -> None: ...
    def setMarginLeft(self, int: int) -> None: ...
    def setMarginRight(self, int: int) -> None: ...
    def setMarginTop(self, int: int) -> None: ...
    def setString(self, hSSFRichTextString: HSSFRichTextString) -> None: ...

class HSSFComment(HSSFTextbox):
    def __init__(self, hSSFShape: HSSFShape, hSSFAnchor: HSSFAnchor): ...
    def getAuthor(self) -> java.lang.String: ...
    def getColumn(self) -> int: ...
    def getRow(self) -> int: ...
    def isVisible(self) -> bool: ...
    def setAuthor(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setColumn(self, short: int) -> None: ...
    def setRow(self, int: int) -> None: ...
    def setString(self, hSSFRichTextString: HSSFRichTextString) -> None: ...
    def setVisible(self, boolean: bool) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("loci.poi.hssf.usermodel")``.

    DummyGraphics2d: typing.Type[DummyGraphics2d]
    EscherGraphics: typing.Type[EscherGraphics]
    EscherGraphics2d: typing.Type[EscherGraphics2d]
    FontDetails: typing.Type[FontDetails]
    HSSFAnchor: typing.Type[HSSFAnchor]
    HSSFCell: typing.Type[HSSFCell]
    HSSFCellStyle: typing.Type[HSSFCellStyle]
    HSSFChildAnchor: typing.Type[HSSFChildAnchor]
    HSSFClientAnchor: typing.Type[HSSFClientAnchor]
    HSSFComment: typing.Type[HSSFComment]
    HSSFDataFormat: typing.Type[HSSFDataFormat]
    HSSFDateUtil: typing.Type[HSSFDateUtil]
    HSSFErrorConstants: typing.Type[HSSFErrorConstants]
    HSSFFont: typing.Type[HSSFFont]
    HSSFFooter: typing.Type[HSSFFooter]
    HSSFHeader: typing.Type[HSSFHeader]
    HSSFName: typing.Type[HSSFName]
    HSSFObjectData: typing.Type[HSSFObjectData]
    HSSFPalette: typing.Type[HSSFPalette]
    HSSFPatriarch: typing.Type[HSSFPatriarch]
    HSSFPicture: typing.Type[HSSFPicture]
    HSSFPictureData: typing.Type[HSSFPictureData]
    HSSFPolygon: typing.Type[HSSFPolygon]
    HSSFPrintSetup: typing.Type[HSSFPrintSetup]
    HSSFRichTextString: typing.Type[HSSFRichTextString]
    HSSFRow: typing.Type[HSSFRow]
    HSSFShape: typing.Type[HSSFShape]
    HSSFShapeContainer: typing.Type[HSSFShapeContainer]
    HSSFShapeGroup: typing.Type[HSSFShapeGroup]
    HSSFSheet: typing.Type[HSSFSheet]
    HSSFSimpleShape: typing.Type[HSSFSimpleShape]
    HSSFTextbox: typing.Type[HSSFTextbox]
    HSSFWorkbook: typing.Type[HSSFWorkbook]
