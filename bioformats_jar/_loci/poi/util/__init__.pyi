import java.io
import java.lang
import java.util
import typing



class ArrayUtil:
    def __init__(self): ...
    @staticmethod
    def arrayMoveWithin(objectArray: typing.List[typing.Any], int: int, int2: int, int3: int) -> None: ...
    @staticmethod
    def arraycopy(byteArray: typing.List[int], int: int, byteArray2: typing.List[int], int2: int, int3: int) -> None: ...

class BinaryTree(java.util.AbstractMap):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map, typing.Mapping]): ...
    def clear(self) -> None: ...
    def containsKey(self, object: typing.Any) -> bool: ...
    def containsValue(self, object: typing.Any) -> bool: ...
    def entrySet(self) -> java.util.Set: ...
    def entrySetByValue(self) -> java.util.Set: ...
    def get(self, object: typing.Any) -> typing.Any: ...
    def getKeyForValue(self, object: typing.Any) -> typing.Any: ...
    def keySet(self) -> java.util.Set: ...
    def keySetByValue(self) -> java.util.Set: ...
    def put(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def remove(self, object: typing.Any, object2: typing.Any) -> bool: ...
    @typing.overload
    def remove(self, object: typing.Any) -> typing.Any: ...
    def removeValue(self, object: typing.Any) -> typing.Any: ...
    def size(self) -> int: ...
    def values(self) -> java.util.Collection: ...
    def valuesByValue(self) -> java.util.Collection: ...

class BitField:
    def __init__(self, int: int): ...
    def clear(self, int: int) -> int: ...
    def clearByte(self, byte: int) -> int: ...
    def clearShort(self, short: int) -> int: ...
    def getRawValue(self, int: int) -> int: ...
    def getShortRawValue(self, short: int) -> int: ...
    def getShortValue(self, short: int) -> int: ...
    def getValue(self, int: int) -> int: ...
    def isAllSet(self, int: int) -> bool: ...
    def isSet(self, int: int) -> bool: ...
    def set(self, int: int) -> int: ...
    def setBoolean(self, int: int, boolean: bool) -> int: ...
    def setByte(self, byte: int) -> int: ...
    def setByteBoolean(self, byte: int, boolean: bool) -> int: ...
    def setShort(self, short: int) -> int: ...
    def setShortBoolean(self, short: int, boolean: bool) -> int: ...
    def setShortValue(self, short: int, short2: int) -> int: ...
    def setValue(self, int: int, int2: int) -> int: ...

class BitFieldFactory:
    def __init__(self): ...
    @staticmethod
    def getInstance(int: int) -> BitField: ...

class BlockingInputStream(java.io.InputStream):
    def __init__(self, inputStream: java.io.InputStream): ...
    def available(self) -> int: ...
    def close(self) -> None: ...
    def mark(self, int: int) -> None: ...
    def markSupported(self) -> bool: ...
    @typing.overload
    def read(self) -> int: ...
    @typing.overload
    def read(self, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    def read(self, byteArray: typing.List[int], int: int, int2: int) -> int: ...
    def reset(self) -> None: ...
    def skip(self, long: int) -> int: ...

class DoubleList:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, doubleList: 'DoubleList'): ...
    @typing.overload
    def add(self, double: float) -> bool: ...
    @typing.overload
    def add(self, int: int, double: float) -> None: ...
    @typing.overload
    def addAll(self, int: int, doubleList: 'DoubleList') -> bool: ...
    @typing.overload
    def addAll(self, doubleList: 'DoubleList') -> bool: ...
    def clear(self) -> None: ...
    def contains(self, double: float) -> bool: ...
    def containsAll(self, doubleList: 'DoubleList') -> bool: ...
    def equals(self, object: typing.Any) -> bool: ...
    def get(self, int: int) -> float: ...
    def hashCode(self) -> int: ...
    def indexOf(self, double: float) -> int: ...
    def isEmpty(self) -> bool: ...
    def lastIndexOf(self, double: float) -> int: ...
    def remove(self, int: int) -> float: ...
    def removeAll(self, doubleList: 'DoubleList') -> bool: ...
    def removeValue(self, double: float) -> bool: ...
    def retainAll(self, doubleList: 'DoubleList') -> bool: ...
    def set(self, int: int, double: float) -> float: ...
    def size(self) -> int: ...
    @typing.overload
    def toArray(self) -> typing.List[float]: ...
    @typing.overload
    def toArray(self, doubleArray: typing.List[float]) -> typing.List[float]: ...

class DoubleList2d:
    def __init__(self): ...
    def get(self, int: int, int2: int) -> float: ...
    def set(self, int: int, int2: int, double: float) -> None: ...

class DrawingDump:
    def __init__(self): ...
    @staticmethod
    def main(stringArray: typing.List[java.lang.String]) -> None: ...

class FixedField:
    def readFromBytes(self, byteArray: typing.List[int]) -> None: ...
    def readFromStream(self, inputStream: java.io.InputStream) -> None: ...
    def toString(self) -> java.lang.String: ...
    def writeToBytes(self, byteArray: typing.List[int]) -> None: ...

class HexDump:
    EOL: typing.ClassVar[java.lang.String] = ...
    @typing.overload
    @staticmethod
    def dump(byteArray: typing.List[int], long: int, int: int) -> java.lang.String: ...
    @typing.overload
    @staticmethod
    def dump(byteArray: typing.List[int], long: int, outputStream: java.io.OutputStream, int: int) -> None: ...
    @typing.overload
    @staticmethod
    def dump(byteArray: typing.List[int], long: int, outputStream: java.io.OutputStream, int: int, int2: int) -> None: ...
    @typing.overload
    @staticmethod
    def dump(inputStream: java.io.InputStream, printStream: java.io.PrintStream, int: int, int2: int) -> None: ...
    @staticmethod
    def main(stringArray: typing.List[java.lang.String]) -> None: ...
    @typing.overload
    @staticmethod
    def toHex(byte: int) -> java.lang.String: ...
    @typing.overload
    @staticmethod
    def toHex(byteArray: typing.List[int]) -> java.lang.String: ...
    @typing.overload
    @staticmethod
    def toHex(byteArray: typing.List[int], int: int) -> java.lang.String: ...
    @typing.overload
    @staticmethod
    def toHex(int: int) -> java.lang.String: ...
    @typing.overload
    @staticmethod
    def toHex(long: int) -> java.lang.String: ...
    @typing.overload
    @staticmethod
    def toHex(short: int) -> java.lang.String: ...
    @typing.overload
    @staticmethod
    def toHex(shortArray: typing.List[int]) -> java.lang.String: ...

class HexRead:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def readData(inputStream: java.io.InputStream, int: int) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def readData(string: typing.Union[java.lang.String, str]) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def readData(string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str]) -> typing.List[int]: ...
    @staticmethod
    def readFromString(string: typing.Union[java.lang.String, str]) -> typing.List[int]: ...

class IOUtils:
    @typing.overload
    @staticmethod
    def readFully(inputStream: java.io.InputStream, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    @staticmethod
    def readFully(inputStream: java.io.InputStream, byteArray: typing.List[int], int: int, int2: int) -> int: ...

class IntList:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def __init__(self, intList: 'IntList'): ...
    @typing.overload
    def add(self, int: int) -> bool: ...
    @typing.overload
    def add(self, int: int, int2: int) -> None: ...
    @typing.overload
    def addAll(self, int: int, intList: 'IntList') -> bool: ...
    @typing.overload
    def addAll(self, intList: 'IntList') -> bool: ...
    def clear(self) -> None: ...
    def contains(self, int: int) -> bool: ...
    def containsAll(self, intList: 'IntList') -> bool: ...
    def equals(self, object: typing.Any) -> bool: ...
    def get(self, int: int) -> int: ...
    def hashCode(self) -> int: ...
    def indexOf(self, int: int) -> int: ...
    def isEmpty(self) -> bool: ...
    def lastIndexOf(self, int: int) -> int: ...
    def remove(self, int: int) -> int: ...
    def removeAll(self, intList: 'IntList') -> bool: ...
    def removeValue(self, int: int) -> bool: ...
    def retainAll(self, intList: 'IntList') -> bool: ...
    def set(self, int: int, int2: int) -> int: ...
    def size(self) -> int: ...
    @typing.overload
    def toArray(self) -> typing.List[int]: ...
    @typing.overload
    def toArray(self, intArray: typing.List[int]) -> typing.List[int]: ...

class IntList2d:
    def __init__(self): ...
    def get(self, int: int, int2: int) -> int: ...
    def isAllocated(self, int: int, int2: int) -> bool: ...
    def set(self, int: int, int2: int, int3: int) -> None: ...

class IntMapper:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    def add(self, object: typing.Any) -> bool: ...
    def get(self, int: int) -> typing.Any: ...
    def getIndex(self, object: typing.Any) -> int: ...
    def iterator(self) -> java.util.Iterator: ...
    def size(self) -> int: ...

class List2d:
    def __init__(self): ...
    def get(self, int: int, int2: int) -> typing.Any: ...
    def set(self, int: int, int2: int, object: typing.Any) -> None: ...

class LittleEndianConsts:
    BYTE_SIZE: typing.ClassVar[int] = ...
    SHORT_SIZE: typing.ClassVar[int] = ...
    INT_SIZE: typing.ClassVar[int] = ...
    LONG_SIZE: typing.ClassVar[int] = ...
    DOUBLE_SIZE: typing.ClassVar[int] = ...

class POILogFactory:
    @typing.overload
    @staticmethod
    def getLogger(class_: typing.Type) -> 'POILogger': ...
    @typing.overload
    @staticmethod
    def getLogger(string: typing.Union[java.lang.String, str]) -> 'POILogger': ...

class POILogger:
    DEBUG: typing.ClassVar[int] = ...
    INFO: typing.ClassVar[int] = ...
    WARN: typing.ClassVar[int] = ...
    ERROR: typing.ClassVar[int] = ...
    FATAL: typing.ClassVar[int] = ...
    def check(self, int: int) -> bool: ...
    def initialize(self, string: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, object7: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, object7: typing.Any, object8: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, object7: typing.Any, object8: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, object7: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def logFormatted(self, int: int, string: typing.Union[java.lang.String, str], object: typing.Any) -> None: ...
    @typing.overload
    def logFormatted(self, int: int, string: typing.Union[java.lang.String, str], object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def logFormatted(self, int: int, string: typing.Union[java.lang.String, str], object: typing.Any, object2: typing.Any, object3: typing.Any) -> None: ...
    @typing.overload
    def logFormatted(self, int: int, string: typing.Union[java.lang.String, str], object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> None: ...

class ShortList:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, shortList: 'ShortList'): ...
    @typing.overload
    def add(self, short: int) -> bool: ...
    @typing.overload
    def add(self, int: int, short: int) -> None: ...
    @typing.overload
    def addAll(self, int: int, shortList: 'ShortList') -> bool: ...
    @typing.overload
    def addAll(self, shortList: 'ShortList') -> bool: ...
    def clear(self) -> None: ...
    def contains(self, short: int) -> bool: ...
    def containsAll(self, shortList: 'ShortList') -> bool: ...
    def equals(self, object: typing.Any) -> bool: ...
    def get(self, int: int) -> int: ...
    def hashCode(self) -> int: ...
    def indexOf(self, short: int) -> int: ...
    def isEmpty(self) -> bool: ...
    def lastIndexOf(self, short: int) -> int: ...
    def remove(self, int: int) -> int: ...
    def removeAll(self, shortList: 'ShortList') -> bool: ...
    def removeValue(self, short: int) -> bool: ...
    def retainAll(self, shortList: 'ShortList') -> bool: ...
    def set(self, int: int, short: int) -> int: ...
    def size(self) -> int: ...
    @typing.overload
    def toArray(self) -> typing.List[int]: ...
    @typing.overload
    def toArray(self, shortArray: typing.List[int]) -> typing.List[int]: ...

class StringUtil:
    @staticmethod
    def format(string: typing.Union[java.lang.String, str], objectArray: typing.List[typing.Any]) -> java.lang.String: ...
    @staticmethod
    def getFromCompressedUnicode(byteArray: typing.List[int], int: int, int2: int) -> java.lang.String: ...
    @typing.overload
    @staticmethod
    def getFromUnicodeBE(byteArray: typing.List[int]) -> java.lang.String: ...
    @typing.overload
    @staticmethod
    def getFromUnicodeBE(byteArray: typing.List[int], int: int, int2: int) -> java.lang.String: ...
    @typing.overload
    @staticmethod
    def getFromUnicodeLE(byteArray: typing.List[int]) -> java.lang.String: ...
    @typing.overload
    @staticmethod
    def getFromUnicodeLE(byteArray: typing.List[int], int: int, int2: int) -> java.lang.String: ...
    @staticmethod
    def getPreferredEncoding() -> java.lang.String: ...
    @staticmethod
    def hasMultibyte(string: typing.Union[java.lang.String, str]) -> bool: ...
    @staticmethod
    def isUnicodeString(string: typing.Union[java.lang.String, str]) -> bool: ...
    @staticmethod
    def putCompressedUnicode(string: typing.Union[java.lang.String, str], byteArray: typing.List[int], int: int) -> None: ...
    @staticmethod
    def putUnicodeBE(string: typing.Union[java.lang.String, str], byteArray: typing.List[int], int: int) -> None: ...
    @staticmethod
    def putUnicodeLE(string: typing.Union[java.lang.String, str], byteArray: typing.List[int], int: int) -> None: ...

class TempFile:
    def __init__(self): ...
    @staticmethod
    def createTempFile(string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str]) -> java.io.File: ...

class ByteField(FixedField):
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, byte: int): ...
    @typing.overload
    def __init__(self, int: int, byte: int, byteArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, int: int, byteArray: typing.List[int]): ...
    def get(self) -> int: ...
    def readFromBytes(self, byteArray: typing.List[int]) -> None: ...
    def readFromStream(self, inputStream: java.io.InputStream) -> None: ...
    @typing.overload
    def set(self, byte: int) -> None: ...
    @typing.overload
    def set(self, byte: int, byteArray: typing.List[int]) -> None: ...
    def toString(self) -> java.lang.String: ...
    def writeToBytes(self, byteArray: typing.List[int]) -> None: ...

class CommonsLogger(POILogger):
    def __init__(self): ...
    def check(self, int: int) -> bool: ...
    def initialize(self, string: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, object7: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, object7: typing.Any, object8: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, object7: typing.Any, object8: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, object7: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, throwable: java.lang.Throwable) -> None: ...

class IntegerField(FixedField):
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, byteArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, byteArray: typing.List[int]): ...
    def get(self) -> int: ...
    def readFromBytes(self, byteArray: typing.List[int]) -> None: ...
    def readFromStream(self, inputStream: java.io.InputStream) -> None: ...
    @typing.overload
    def set(self, int: int) -> None: ...
    @typing.overload
    def set(self, int: int, byteArray: typing.List[int]) -> None: ...
    def toString(self) -> java.lang.String: ...
    def writeToBytes(self, byteArray: typing.List[int]) -> None: ...

class LittleEndian(LittleEndianConsts):
    @staticmethod
    def getByteArray(byteArray: typing.List[int], int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def getDouble(byteArray: typing.List[int]) -> float: ...
    @typing.overload
    @staticmethod
    def getDouble(byteArray: typing.List[int], int: int) -> float: ...
    @typing.overload
    @staticmethod
    def getInt(byteArray: typing.List[int]) -> int: ...
    @typing.overload
    @staticmethod
    def getInt(byteArray: typing.List[int], int: int) -> int: ...
    @typing.overload
    @staticmethod
    def getLong(byteArray: typing.List[int]) -> int: ...
    @typing.overload
    @staticmethod
    def getLong(byteArray: typing.List[int], int: int) -> int: ...
    @typing.overload
    @staticmethod
    def getShort(byteArray: typing.List[int]) -> int: ...
    @typing.overload
    @staticmethod
    def getShort(byteArray: typing.List[int], int: int) -> int: ...
    @staticmethod
    def getShortArray(byteArray: typing.List[int], int: int) -> typing.List[int]: ...
    @staticmethod
    def getSimpleShortArray(byteArray: typing.List[int], int: int, int2: int) -> typing.List[int]: ...
    @typing.overload
    @staticmethod
    def getUInt(byteArray: typing.List[int]) -> int: ...
    @typing.overload
    @staticmethod
    def getUInt(byteArray: typing.List[int], int: int) -> int: ...
    @staticmethod
    def getULong(byteArray: typing.List[int], int: int) -> int: ...
    @typing.overload
    @staticmethod
    def getUShort(byteArray: typing.List[int]) -> int: ...
    @typing.overload
    @staticmethod
    def getUShort(byteArray: typing.List[int], int: int) -> int: ...
    @typing.overload
    @staticmethod
    def getUnsignedByte(byteArray: typing.List[int]) -> int: ...
    @typing.overload
    @staticmethod
    def getUnsignedByte(byteArray: typing.List[int], int: int) -> int: ...
    @typing.overload
    @staticmethod
    def putDouble(byteArray: typing.List[int], double: float) -> None: ...
    @typing.overload
    @staticmethod
    def putDouble(byteArray: typing.List[int], int: int, double: float) -> None: ...
    @typing.overload
    @staticmethod
    def putInt(byteArray: typing.List[int], int: int) -> None: ...
    @typing.overload
    @staticmethod
    def putInt(byteArray: typing.List[int], int: int, int2: int) -> None: ...
    @typing.overload
    @staticmethod
    def putLong(byteArray: typing.List[int], int: int, long: int) -> None: ...
    @typing.overload
    @staticmethod
    def putLong(byteArray: typing.List[int], long: int) -> None: ...
    @typing.overload
    @staticmethod
    def putShort(byteArray: typing.List[int], int: int, short: int) -> None: ...
    @typing.overload
    @staticmethod
    def putShort(byteArray: typing.List[int], short: int) -> None: ...
    @staticmethod
    def putShortArray(byteArray: typing.List[int], int: int, shortArray: typing.List[int]) -> None: ...
    @staticmethod
    def putUShort(byteArray: typing.List[int], int: int, int2: int) -> None: ...
    @staticmethod
    def readFromStream(inputStream: java.io.InputStream, int: int) -> typing.List[int]: ...
    @staticmethod
    def readInt(inputStream: java.io.InputStream) -> int: ...
    @staticmethod
    def readLong(inputStream: java.io.InputStream) -> int: ...
    @staticmethod
    def readShort(inputStream: java.io.InputStream) -> int: ...
    @staticmethod
    def ubyteToInt(byte: int) -> int: ...
    class BufferUnderrunException(java.io.IOException): ...

class LongField(FixedField):
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, byteArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, int: int, long: int): ...
    @typing.overload
    def __init__(self, int: int, long: int, byteArray: typing.List[int]): ...
    def get(self) -> int: ...
    def readFromBytes(self, byteArray: typing.List[int]) -> None: ...
    def readFromStream(self, inputStream: java.io.InputStream) -> None: ...
    @typing.overload
    def set(self, long: int) -> None: ...
    @typing.overload
    def set(self, long: int, byteArray: typing.List[int]) -> None: ...
    def toString(self) -> java.lang.String: ...
    def writeToBytes(self, byteArray: typing.List[int]) -> None: ...

class NullLogger(POILogger):
    def __init__(self): ...
    def check(self, int: int) -> bool: ...
    def initialize(self, string: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, object7: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, object7: typing.Any, object8: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, object7: typing.Any, object8: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, object7: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def logFormatted(self, int: int, string: typing.Union[java.lang.String, str], object: typing.Any) -> None: ...
    @typing.overload
    def logFormatted(self, int: int, string: typing.Union[java.lang.String, str], object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def logFormatted(self, int: int, string: typing.Union[java.lang.String, str], object: typing.Any, object2: typing.Any, object3: typing.Any) -> None: ...
    @typing.overload
    def logFormatted(self, int: int, string: typing.Union[java.lang.String, str], object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> None: ...

class ShortField(FixedField):
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, byteArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, int: int, short: int): ...
    @typing.overload
    def __init__(self, int: int, short: int, byteArray: typing.List[int]): ...
    def get(self) -> int: ...
    def readFromBytes(self, byteArray: typing.List[int]) -> None: ...
    def readFromStream(self, inputStream: java.io.InputStream) -> None: ...
    @typing.overload
    def set(self, short: int) -> None: ...
    @typing.overload
    def set(self, short: int, byteArray: typing.List[int]) -> None: ...
    def toString(self) -> java.lang.String: ...
    def writeToBytes(self, byteArray: typing.List[int]) -> None: ...

class SystemOutLogger(POILogger):
    def __init__(self): ...
    def check(self, int: int) -> bool: ...
    def initialize(self, string: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, object7: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, object7: typing.Any, object8: typing.Any) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, object7: typing.Any, object8: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, object7: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, object6: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, object5: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, object4: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, object3: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, object2: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, int: int, object: typing.Any) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("loci.poi.util")``.

    ArrayUtil: typing.Type[ArrayUtil]
    BinaryTree: typing.Type[BinaryTree]
    BitField: typing.Type[BitField]
    BitFieldFactory: typing.Type[BitFieldFactory]
    BlockingInputStream: typing.Type[BlockingInputStream]
    ByteField: typing.Type[ByteField]
    CommonsLogger: typing.Type[CommonsLogger]
    DoubleList: typing.Type[DoubleList]
    DoubleList2d: typing.Type[DoubleList2d]
    DrawingDump: typing.Type[DrawingDump]
    FixedField: typing.Type[FixedField]
    HexDump: typing.Type[HexDump]
    HexRead: typing.Type[HexRead]
    IOUtils: typing.Type[IOUtils]
    IntList: typing.Type[IntList]
    IntList2d: typing.Type[IntList2d]
    IntMapper: typing.Type[IntMapper]
    IntegerField: typing.Type[IntegerField]
    List2d: typing.Type[List2d]
    LittleEndian: typing.Type[LittleEndian]
    LittleEndianConsts: typing.Type[LittleEndianConsts]
    LongField: typing.Type[LongField]
    NullLogger: typing.Type[NullLogger]
    POILogFactory: typing.Type[POILogFactory]
    POILogger: typing.Type[POILogger]
    ShortField: typing.Type[ShortField]
    ShortList: typing.Type[ShortList]
    StringUtil: typing.Type[StringUtil]
    SystemOutLogger: typing.Type[SystemOutLogger]
    TempFile: typing.Type[TempFile]
