import java.awt
import java.io
import java.lang
import java.util
import typing



class EscherDump:
    def __init__(self): ...
    @typing.overload
    def dump(self, byteArray: typing.List[int], int: int, int2: int, printStream: java.io.PrintStream) -> None: ...
    @typing.overload
    def dump(self, int: int, byteArray: typing.List[int], printStream: java.io.PrintStream) -> None: ...
    def dumpOld(self, long: int, inputStream: java.io.InputStream, printStream: java.io.PrintStream) -> None: ...
    @staticmethod
    def main(stringArray: typing.List[java.lang.String]) -> None: ...

class EscherProperties:
    TRANSFORM__ROTATION: typing.ClassVar[int] = ...
    PROTECTION__LOCKROTATION: typing.ClassVar[int] = ...
    PROTECTION__LOCKASPECTRATIO: typing.ClassVar[int] = ...
    PROTECTION__LOCKPOSITION: typing.ClassVar[int] = ...
    PROTECTION__LOCKAGAINSTSELECT: typing.ClassVar[int] = ...
    PROTECTION__LOCKCROPPING: typing.ClassVar[int] = ...
    PROTECTION__LOCKVERTICES: typing.ClassVar[int] = ...
    PROTECTION__LOCKTEXT: typing.ClassVar[int] = ...
    PROTECTION__LOCKADJUSTHANDLES: typing.ClassVar[int] = ...
    PROTECTION__LOCKAGAINSTGROUPING: typing.ClassVar[int] = ...
    TEXT__TEXTID: typing.ClassVar[int] = ...
    TEXT__TEXTLEFT: typing.ClassVar[int] = ...
    TEXT__TEXTTOP: typing.ClassVar[int] = ...
    TEXT__TEXTRIGHT: typing.ClassVar[int] = ...
    TEXT__TEXTBOTTOM: typing.ClassVar[int] = ...
    TEXT__WRAPTEXT: typing.ClassVar[int] = ...
    TEXT__SCALETEXT: typing.ClassVar[int] = ...
    TEXT__ANCHORTEXT: typing.ClassVar[int] = ...
    TEXT__TEXTFLOW: typing.ClassVar[int] = ...
    TEXT__FONTROTATION: typing.ClassVar[int] = ...
    TEXT__IDOFNEXTSHAPE: typing.ClassVar[int] = ...
    TEXT__BIDIR: typing.ClassVar[int] = ...
    TEXT__SINGLECLICKSELECTS: typing.ClassVar[int] = ...
    TEXT__USEHOSTMARGINS: typing.ClassVar[int] = ...
    TEXT__ROTATETEXTWITHSHAPE: typing.ClassVar[int] = ...
    TEXT__SIZESHAPETOFITTEXT: typing.ClassVar[int] = ...
    TEXT__SIZE_TEXT_TO_FIT_SHAPE: typing.ClassVar[int] = ...
    GEOTEXT__UNICODE: typing.ClassVar[int] = ...
    GEOTEXT__RTFTEXT: typing.ClassVar[int] = ...
    GEOTEXT__ALIGNMENTONCURVE: typing.ClassVar[int] = ...
    GEOTEXT__DEFAULTPOINTSIZE: typing.ClassVar[int] = ...
    GEOTEXT__TEXTSPACING: typing.ClassVar[int] = ...
    GEOTEXT__FONTFAMILYNAME: typing.ClassVar[int] = ...
    GEOTEXT__REVERSEROWORDER: typing.ClassVar[int] = ...
    GEOTEXT__HASTEXTEFFECT: typing.ClassVar[int] = ...
    GEOTEXT__ROTATECHARACTERS: typing.ClassVar[int] = ...
    GEOTEXT__KERNCHARACTERS: typing.ClassVar[int] = ...
    GEOTEXT__TIGHTORTRACK: typing.ClassVar[int] = ...
    GEOTEXT__STRETCHTOFITSHAPE: typing.ClassVar[int] = ...
    GEOTEXT__CHARBOUNDINGBOX: typing.ClassVar[int] = ...
    GEOTEXT__SCALETEXTONPATH: typing.ClassVar[int] = ...
    GEOTEXT__STRETCHCHARHEIGHT: typing.ClassVar[int] = ...
    GEOTEXT__NOMEASUREALONGPATH: typing.ClassVar[int] = ...
    GEOTEXT__BOLDFONT: typing.ClassVar[int] = ...
    GEOTEXT__ITALICFONT: typing.ClassVar[int] = ...
    GEOTEXT__UNDERLINEFONT: typing.ClassVar[int] = ...
    GEOTEXT__SHADOWFONT: typing.ClassVar[int] = ...
    GEOTEXT__SMALLCAPSFONT: typing.ClassVar[int] = ...
    GEOTEXT__STRIKETHROUGHFONT: typing.ClassVar[int] = ...
    BLIP__CROPFROMTOP: typing.ClassVar[int] = ...
    BLIP__CROPFROMBOTTOM: typing.ClassVar[int] = ...
    BLIP__CROPFROMLEFT: typing.ClassVar[int] = ...
    BLIP__CROPFROMRIGHT: typing.ClassVar[int] = ...
    BLIP__BLIPTODISPLAY: typing.ClassVar[int] = ...
    BLIP__BLIPFILENAME: typing.ClassVar[int] = ...
    BLIP__BLIPFLAGS: typing.ClassVar[int] = ...
    BLIP__TRANSPARENTCOLOR: typing.ClassVar[int] = ...
    BLIP__CONTRASTSETTING: typing.ClassVar[int] = ...
    BLIP__BRIGHTNESSSETTING: typing.ClassVar[int] = ...
    BLIP__GAMMA: typing.ClassVar[int] = ...
    BLIP__PICTUREID: typing.ClassVar[int] = ...
    BLIP__DOUBLEMOD: typing.ClassVar[int] = ...
    BLIP__PICTUREFILLMOD: typing.ClassVar[int] = ...
    BLIP__PICTURELINE: typing.ClassVar[int] = ...
    BLIP__PRINTBLIP: typing.ClassVar[int] = ...
    BLIP__PRINTBLIPFILENAME: typing.ClassVar[int] = ...
    BLIP__PRINTFLAGS: typing.ClassVar[int] = ...
    BLIP__NOHITTESTPICTURE: typing.ClassVar[int] = ...
    BLIP__PICTUREGRAY: typing.ClassVar[int] = ...
    BLIP__PICTUREBILEVEL: typing.ClassVar[int] = ...
    BLIP__PICTUREACTIVE: typing.ClassVar[int] = ...
    GEOMETRY__LEFT: typing.ClassVar[int] = ...
    GEOMETRY__TOP: typing.ClassVar[int] = ...
    GEOMETRY__RIGHT: typing.ClassVar[int] = ...
    GEOMETRY__BOTTOM: typing.ClassVar[int] = ...
    GEOMETRY__SHAPEPATH: typing.ClassVar[int] = ...
    GEOMETRY__VERTICES: typing.ClassVar[int] = ...
    GEOMETRY__SEGMENTINFO: typing.ClassVar[int] = ...
    GEOMETRY__ADJUSTVALUE: typing.ClassVar[int] = ...
    GEOMETRY__ADJUST2VALUE: typing.ClassVar[int] = ...
    GEOMETRY__ADJUST3VALUE: typing.ClassVar[int] = ...
    GEOMETRY__ADJUST4VALUE: typing.ClassVar[int] = ...
    GEOMETRY__ADJUST5VALUE: typing.ClassVar[int] = ...
    GEOMETRY__ADJUST6VALUE: typing.ClassVar[int] = ...
    GEOMETRY__ADJUST7VALUE: typing.ClassVar[int] = ...
    GEOMETRY__ADJUST8VALUE: typing.ClassVar[int] = ...
    GEOMETRY__ADJUST9VALUE: typing.ClassVar[int] = ...
    GEOMETRY__ADJUST10VALUE: typing.ClassVar[int] = ...
    GEOMETRY__SHADOWok: typing.ClassVar[int] = ...
    GEOMETRY__3DOK: typing.ClassVar[int] = ...
    GEOMETRY__LINEOK: typing.ClassVar[int] = ...
    GEOMETRY__GEOTEXTOK: typing.ClassVar[int] = ...
    GEOMETRY__FILLSHADESHAPEOK: typing.ClassVar[int] = ...
    GEOMETRY__FILLOK: typing.ClassVar[int] = ...
    FILL__FILLTYPE: typing.ClassVar[int] = ...
    FILL__FILLCOLOR: typing.ClassVar[int] = ...
    FILL__FILLOPACITY: typing.ClassVar[int] = ...
    FILL__FILLBACKCOLOR: typing.ClassVar[int] = ...
    FILL__BACKOPACITY: typing.ClassVar[int] = ...
    FILL__CRMOD: typing.ClassVar[int] = ...
    FILL__PATTERNTEXTURE: typing.ClassVar[int] = ...
    FILL__BLIPFILENAME: typing.ClassVar[int] = ...
    FILL__BLIPFLAGS: typing.ClassVar[int] = ...
    FILL__WIDTH: typing.ClassVar[int] = ...
    FILL__HEIGHT: typing.ClassVar[int] = ...
    FILL__ANGLE: typing.ClassVar[int] = ...
    FILL__FOCUS: typing.ClassVar[int] = ...
    FILL__TOLEFT: typing.ClassVar[int] = ...
    FILL__TOTOP: typing.ClassVar[int] = ...
    FILL__TORIGHT: typing.ClassVar[int] = ...
    FILL__TOBOTTOM: typing.ClassVar[int] = ...
    FILL__RECTLEFT: typing.ClassVar[int] = ...
    FILL__RECTTOP: typing.ClassVar[int] = ...
    FILL__RECTRIGHT: typing.ClassVar[int] = ...
    FILL__RECTBOTTOM: typing.ClassVar[int] = ...
    FILL__DZTYPE: typing.ClassVar[int] = ...
    FILL__SHADEPRESET: typing.ClassVar[int] = ...
    FILL__SHADECOLORS: typing.ClassVar[int] = ...
    FILL__ORIGINX: typing.ClassVar[int] = ...
    FILL__ORIGINY: typing.ClassVar[int] = ...
    FILL__SHAPEORIGINX: typing.ClassVar[int] = ...
    FILL__SHAPEORIGINY: typing.ClassVar[int] = ...
    FILL__SHADETYPE: typing.ClassVar[int] = ...
    FILL__FILLED: typing.ClassVar[int] = ...
    FILL__HITTESTFILL: typing.ClassVar[int] = ...
    FILL__SHAPE: typing.ClassVar[int] = ...
    FILL__USERECT: typing.ClassVar[int] = ...
    FILL__NOFILLHITTEST: typing.ClassVar[int] = ...
    LINESTYLE__COLOR: typing.ClassVar[int] = ...
    LINESTYLE__OPACITY: typing.ClassVar[int] = ...
    LINESTYLE__BACKCOLOR: typing.ClassVar[int] = ...
    LINESTYLE__CRMOD: typing.ClassVar[int] = ...
    LINESTYLE__LINETYPE: typing.ClassVar[int] = ...
    LINESTYLE__FILLBLIP: typing.ClassVar[int] = ...
    LINESTYLE__FILLBLIPNAME: typing.ClassVar[int] = ...
    LINESTYLE__FILLBLIPFLAGS: typing.ClassVar[int] = ...
    LINESTYLE__FILLWIDTH: typing.ClassVar[int] = ...
    LINESTYLE__FILLHEIGHT: typing.ClassVar[int] = ...
    LINESTYLE__FILLDZTYPE: typing.ClassVar[int] = ...
    LINESTYLE__LINEWIDTH: typing.ClassVar[int] = ...
    LINESTYLE__LINEMITERLIMIT: typing.ClassVar[int] = ...
    LINESTYLE__LINESTYLE: typing.ClassVar[int] = ...
    LINESTYLE__LINEDASHING: typing.ClassVar[int] = ...
    LINESTYLE__LINEDASHSTYLE: typing.ClassVar[int] = ...
    LINESTYLE__LINESTARTARROWHEAD: typing.ClassVar[int] = ...
    LINESTYLE__LINEENDARROWHEAD: typing.ClassVar[int] = ...
    LINESTYLE__LINESTARTARROWWIDTH: typing.ClassVar[int] = ...
    LINESTYLE__LINEESTARTARROWLENGTH: typing.ClassVar[int] = ...
    LINESTYLE__LINEENDARROWWIDTH: typing.ClassVar[int] = ...
    LINESTYLE__LINEENDARROWLENGTH: typing.ClassVar[int] = ...
    LINESTYLE__LINEJOINSTYLE: typing.ClassVar[int] = ...
    LINESTYLE__LINEENDCAPSTYLE: typing.ClassVar[int] = ...
    LINESTYLE__ARROWHEADSOK: typing.ClassVar[int] = ...
    LINESTYLE__ANYLINE: typing.ClassVar[int] = ...
    LINESTYLE__HITLINETEST: typing.ClassVar[int] = ...
    LINESTYLE__LINEFILLSHAPE: typing.ClassVar[int] = ...
    LINESTYLE__NOLINEDRAWDASH: typing.ClassVar[int] = ...
    SHADOWSTYLE__TYPE: typing.ClassVar[int] = ...
    SHADOWSTYLE__COLOR: typing.ClassVar[int] = ...
    SHADOWSTYLE__HIGHLIGHT: typing.ClassVar[int] = ...
    SHADOWSTYLE__CRMOD: typing.ClassVar[int] = ...
    SHADOWSTYLE__OPACITY: typing.ClassVar[int] = ...
    SHADOWSTYLE__OFFSETX: typing.ClassVar[int] = ...
    SHADOWSTYLE__OFFSETY: typing.ClassVar[int] = ...
    SHADOWSTYLE__SECONDOFFSETX: typing.ClassVar[int] = ...
    SHADOWSTYLE__SECONDOFFSETY: typing.ClassVar[int] = ...
    SHADOWSTYLE__SCALEXTOX: typing.ClassVar[int] = ...
    SHADOWSTYLE__SCALEYTOX: typing.ClassVar[int] = ...
    SHADOWSTYLE__SCALEXTOY: typing.ClassVar[int] = ...
    SHADOWSTYLE__SCALEYTOY: typing.ClassVar[int] = ...
    SHADOWSTYLE__PERSPECTIVEX: typing.ClassVar[int] = ...
    SHADOWSTYLE__PERSPECTIVEY: typing.ClassVar[int] = ...
    SHADOWSTYLE__WEIGHT: typing.ClassVar[int] = ...
    SHADOWSTYLE__ORIGINX: typing.ClassVar[int] = ...
    SHADOWSTYLE__ORIGINY: typing.ClassVar[int] = ...
    SHADOWSTYLE__SHADOW: typing.ClassVar[int] = ...
    SHADOWSTYLE__SHADOWOBSURED: typing.ClassVar[int] = ...
    PERSPECTIVE__TYPE: typing.ClassVar[int] = ...
    PERSPECTIVE__OFFSETX: typing.ClassVar[int] = ...
    PERSPECTIVE__OFFSETY: typing.ClassVar[int] = ...
    PERSPECTIVE__SCALEXTOX: typing.ClassVar[int] = ...
    PERSPECTIVE__SCALEYTOX: typing.ClassVar[int] = ...
    PERSPECTIVE__SCALEXTOY: typing.ClassVar[int] = ...
    PERSPECTIVE__SCALEYTOY: typing.ClassVar[int] = ...
    PERSPECTIVE__PERSPECTIVEX: typing.ClassVar[int] = ...
    PERSPECTIVE__PERSPECTIVEY: typing.ClassVar[int] = ...
    PERSPECTIVE__WEIGHT: typing.ClassVar[int] = ...
    PERSPECTIVE__ORIGINX: typing.ClassVar[int] = ...
    PERSPECTIVE__ORIGINY: typing.ClassVar[int] = ...
    PERSPECTIVE__PERSPECTIVEON: typing.ClassVar[int] = ...
    THREED__SPECULARAMOUNT: typing.ClassVar[int] = ...
    THREED__DIFFUSEAMOUNT: typing.ClassVar[int] = ...
    THREED__SHININESS: typing.ClassVar[int] = ...
    THREED__EDGETHICKNESS: typing.ClassVar[int] = ...
    THREED__EXTRUDEFORWARD: typing.ClassVar[int] = ...
    THREED__EXTRUDEBACKWARD: typing.ClassVar[int] = ...
    THREED__EXTRUDEPLANE: typing.ClassVar[int] = ...
    THREED__EXTRUSIONCOLOR: typing.ClassVar[int] = ...
    THREED__CRMOD: typing.ClassVar[int] = ...
    THREED__3DEFFECT: typing.ClassVar[int] = ...
    THREED__METALLIC: typing.ClassVar[int] = ...
    THREED__USEEXTRUSIONCOLOR: typing.ClassVar[int] = ...
    THREED__LIGHTFACE: typing.ClassVar[int] = ...
    THREEDSTYLE__YROTATIONANGLE: typing.ClassVar[int] = ...
    THREEDSTYLE__XROTATIONANGLE: typing.ClassVar[int] = ...
    THREEDSTYLE__ROTATIONAXISX: typing.ClassVar[int] = ...
    THREEDSTYLE__ROTATIONAXISY: typing.ClassVar[int] = ...
    THREEDSTYLE__ROTATIONAXISZ: typing.ClassVar[int] = ...
    THREEDSTYLE__ROTATIONANGLE: typing.ClassVar[int] = ...
    THREEDSTYLE__ROTATIONCENTERX: typing.ClassVar[int] = ...
    THREEDSTYLE__ROTATIONCENTERY: typing.ClassVar[int] = ...
    THREEDSTYLE__ROTATIONCENTERZ: typing.ClassVar[int] = ...
    THREEDSTYLE__RENDERMODE: typing.ClassVar[int] = ...
    THREEDSTYLE__TOLERANCE: typing.ClassVar[int] = ...
    THREEDSTYLE__XVIEWPOINT: typing.ClassVar[int] = ...
    THREEDSTYLE__YVIEWPOINT: typing.ClassVar[int] = ...
    THREEDSTYLE__ZVIEWPOINT: typing.ClassVar[int] = ...
    THREEDSTYLE__ORIGINX: typing.ClassVar[int] = ...
    THREEDSTYLE__ORIGINY: typing.ClassVar[int] = ...
    THREEDSTYLE__SKEWANGLE: typing.ClassVar[int] = ...
    THREEDSTYLE__SKEWAMOUNT: typing.ClassVar[int] = ...
    THREEDSTYLE__AMBIENTINTENSITY: typing.ClassVar[int] = ...
    THREEDSTYLE__KEYX: typing.ClassVar[int] = ...
    THREEDSTYLE__KEYY: typing.ClassVar[int] = ...
    THREEDSTYLE__KEYZ: typing.ClassVar[int] = ...
    THREEDSTYLE__KEYINTENSITY: typing.ClassVar[int] = ...
    THREEDSTYLE__FILLX: typing.ClassVar[int] = ...
    THREEDSTYLE__FILLY: typing.ClassVar[int] = ...
    THREEDSTYLE__FILLZ: typing.ClassVar[int] = ...
    THREEDSTYLE__FILLINTENSITY: typing.ClassVar[int] = ...
    THREEDSTYLE__CONSTRAINROTATION: typing.ClassVar[int] = ...
    THREEDSTYLE__ROTATIONCENTERAUTO: typing.ClassVar[int] = ...
    THREEDSTYLE__PARALLEL: typing.ClassVar[int] = ...
    THREEDSTYLE__KEYHARSH: typing.ClassVar[int] = ...
    THREEDSTYLE__FILLHARSH: typing.ClassVar[int] = ...
    SHAPE__MASTER: typing.ClassVar[int] = ...
    SHAPE__CONNECTORSTYLE: typing.ClassVar[int] = ...
    SHAPE__BLACKANDWHITESETTINGS: typing.ClassVar[int] = ...
    SHAPE__WMODEPUREBW: typing.ClassVar[int] = ...
    SHAPE__WMODEBW: typing.ClassVar[int] = ...
    SHAPE__OLEICON: typing.ClassVar[int] = ...
    SHAPE__PREFERRELATIVERESIZE: typing.ClassVar[int] = ...
    SHAPE__LOCKSHAPETYPE: typing.ClassVar[int] = ...
    SHAPE__DELETEATTACHEDOBJECT: typing.ClassVar[int] = ...
    SHAPE__BACKGROUNDSHAPE: typing.ClassVar[int] = ...
    CALLOUT__CALLOUTTYPE: typing.ClassVar[int] = ...
    CALLOUT__XYCALLOUTGAP: typing.ClassVar[int] = ...
    CALLOUT__CALLOUTANGLE: typing.ClassVar[int] = ...
    CALLOUT__CALLOUTDROPTYPE: typing.ClassVar[int] = ...
    CALLOUT__CALLOUTDROPSPECIFIED: typing.ClassVar[int] = ...
    CALLOUT__CALLOUTLENGTHSPECIFIED: typing.ClassVar[int] = ...
    CALLOUT__ISCALLOUT: typing.ClassVar[int] = ...
    CALLOUT__CALLOUTACCENTBAR: typing.ClassVar[int] = ...
    CALLOUT__CALLOUTTEXTBORDER: typing.ClassVar[int] = ...
    CALLOUT__CALLOUTMINUSX: typing.ClassVar[int] = ...
    CALLOUT__CALLOUTMINUSY: typing.ClassVar[int] = ...
    CALLOUT__DROPAUTO: typing.ClassVar[int] = ...
    CALLOUT__LENGTHSPECIFIED: typing.ClassVar[int] = ...
    GROUPSHAPE__SHAPENAME: typing.ClassVar[int] = ...
    GROUPSHAPE__DESCRIPTION: typing.ClassVar[int] = ...
    GROUPSHAPE__HYPERLINK: typing.ClassVar[int] = ...
    GROUPSHAPE__WRAPPOLYGONVERTICES: typing.ClassVar[int] = ...
    GROUPSHAPE__WRAPDISTLEFT: typing.ClassVar[int] = ...
    GROUPSHAPE__WRAPDISTTOP: typing.ClassVar[int] = ...
    GROUPSHAPE__WRAPDISTRIGHT: typing.ClassVar[int] = ...
    GROUPSHAPE__WRAPDISTBOTTOM: typing.ClassVar[int] = ...
    GROUPSHAPE__REGROUPID: typing.ClassVar[int] = ...
    GROUPSHAPE__EDITEDWRAP: typing.ClassVar[int] = ...
    GROUPSHAPE__BEHINDDOCUMENT: typing.ClassVar[int] = ...
    GROUPSHAPE__ONDBLCLICKNOTIFY: typing.ClassVar[int] = ...
    GROUPSHAPE__ISBUTTON: typing.ClassVar[int] = ...
    GROUPSHAPE__1DADJUSTMENT: typing.ClassVar[int] = ...
    GROUPSHAPE__HIDDEN: typing.ClassVar[int] = ...
    GROUPSHAPE__PRINT: typing.ClassVar[int] = ...
    def __init__(self): ...
    @staticmethod
    def getPropertyName(short: int) -> java.lang.String: ...
    @staticmethod
    def getPropertyType(short: int) -> int: ...

class EscherProperty:
    @typing.overload
    def __init__(self, short: int): ...
    @typing.overload
    def __init__(self, short: int, boolean: bool, boolean2: bool): ...
    def getId(self) -> int: ...
    def getName(self) -> java.lang.String: ...
    def getPropertyNumber(self) -> int: ...
    def getPropertySize(self) -> int: ...
    def isBlipId(self) -> bool: ...
    def isComplex(self) -> bool: ...
    def serializeComplexPart(self, byteArray: typing.List[int], int: int) -> int: ...
    def serializeSimplePart(self, byteArray: typing.List[int], int: int) -> int: ...

class EscherPropertyFactory:
    def __init__(self): ...
    def createProperties(self, byteArray: typing.List[int], int: int, short: int) -> java.util.List: ...

class EscherPropertyMetaData:
    TYPE_UNKNOWN: typing.ClassVar[int] = ...
    TYPE_BOOLEAN: typing.ClassVar[int] = ...
    TYPE_RGB: typing.ClassVar[int] = ...
    TYPE_SHAPEPATH: typing.ClassVar[int] = ...
    TYPE_SIMPLE: typing.ClassVar[int] = ...
    TYPE_ARRAY: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], byte: int): ...
    def getDescription(self) -> java.lang.String: ...
    def getType(self) -> int: ...

class EscherRecord:
    def __init__(self): ...
    def clone(self) -> typing.Any: ...
    def display(self, printWriter: java.io.PrintWriter, int: int) -> None: ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: 'EscherRecordFactory') -> int: ...
    def getChild(self, int: int) -> 'EscherRecord': ...
    def getChildRecords(self) -> java.util.List: ...
    def getInstance(self) -> int: ...
    def getOptions(self) -> int: ...
    def getRecordId(self) -> int: ...
    def getRecordName(self) -> java.lang.String: ...
    def getRecordSize(self) -> int: ...
    def isContainerRecord(self) -> bool: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: 'EscherSerializationListener') -> int: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    def setChildRecords(self, list: java.util.List) -> None: ...
    def setOptions(self, short: int) -> None: ...
    def setRecordId(self, short: int) -> None: ...

class EscherRecordFactory:
    def createRecord(self, byteArray: typing.List[int], int: int) -> EscherRecord: ...

class EscherSerializationListener:
    def afterRecordSerialize(self, int: int, short: int, int2: int, escherRecord: EscherRecord) -> None: ...
    def beforeRecordSerialize(self, int: int, short: int, escherRecord: EscherRecord) -> None: ...

class DefaultEscherRecordFactory(EscherRecordFactory):
    def __init__(self): ...
    def createRecord(self, byteArray: typing.List[int], int: int) -> EscherRecord: ...

class EscherBSERecord(EscherRecord):
    RECORD_ID: typing.ClassVar[int] = ...
    RECORD_DESCRIPTION: typing.ClassVar[java.lang.String] = ...
    BT_ERROR: typing.ClassVar[int] = ...
    BT_UNKNOWN: typing.ClassVar[int] = ...
    BT_EMF: typing.ClassVar[int] = ...
    BT_WMF: typing.ClassVar[int] = ...
    BT_PICT: typing.ClassVar[int] = ...
    BT_JPEG: typing.ClassVar[int] = ...
    BT_PNG: typing.ClassVar[int] = ...
    BT_DIB: typing.ClassVar[int] = ...
    def __init__(self): ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getBlipRecord(self) -> 'EscherBlipRecord': ...
    def getBlipType(self, byte: int) -> java.lang.String: ...
    def getBlipTypeMacOS(self) -> int: ...
    def getBlipTypeWin32(self) -> int: ...
    def getName(self) -> int: ...
    def getOffset(self) -> int: ...
    def getRecordName(self) -> java.lang.String: ...
    def getRecordSize(self) -> int: ...
    def getRef(self) -> int: ...
    def getRemainingData(self) -> typing.List[int]: ...
    def getSize(self) -> int: ...
    def getTag(self) -> int: ...
    def getUid(self) -> typing.List[int]: ...
    def getUnused2(self) -> int: ...
    def getUnused3(self) -> int: ...
    def getUsage(self) -> int: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    def setBlipRecord(self, escherBlipRecord: 'EscherBlipRecord') -> None: ...
    def setBlipTypeMacOS(self, byte: int) -> None: ...
    def setBlipTypeWin32(self, byte: int) -> None: ...
    def setName(self, byte: int) -> None: ...
    def setOffset(self, int: int) -> None: ...
    def setRef(self, int: int) -> None: ...
    def setRemainingData(self, byteArray: typing.List[int]) -> None: ...
    def setSize(self, int: int) -> None: ...
    def setTag(self, short: int) -> None: ...
    def setUid(self, byteArray: typing.List[int]) -> None: ...
    def setUnused2(self, byte: int) -> None: ...
    def setUnused3(self, byte: int) -> None: ...
    def setUsage(self, byte: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class EscherBlipRecord(EscherRecord):
    RECORD_ID_START: typing.ClassVar[int] = ...
    RECORD_ID_END: typing.ClassVar[int] = ...
    RECORD_DESCRIPTION: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getPicturedata(self) -> typing.List[int]: ...
    def getRecordName(self) -> java.lang.String: ...
    def getRecordSize(self) -> int: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    def setPictureData(self, byteArray: typing.List[int]) -> None: ...
    def toString(self) -> java.lang.String: ...

class EscherChildAnchorRecord(EscherRecord):
    RECORD_ID: typing.ClassVar[int] = ...
    RECORD_DESCRIPTION: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getDx1(self) -> int: ...
    def getDx2(self) -> int: ...
    def getDy1(self) -> int: ...
    def getDy2(self) -> int: ...
    def getRecordId(self) -> int: ...
    def getRecordName(self) -> java.lang.String: ...
    def getRecordSize(self) -> int: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    def setDx1(self, int: int) -> None: ...
    def setDx2(self, int: int) -> None: ...
    def setDy1(self, int: int) -> None: ...
    def setDy2(self, int: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class EscherClientAnchorRecord(EscherRecord):
    RECORD_ID: typing.ClassVar[int] = ...
    RECORD_DESCRIPTION: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getCol1(self) -> int: ...
    def getCol2(self) -> int: ...
    def getDx1(self) -> int: ...
    def getDx2(self) -> int: ...
    def getDy1(self) -> int: ...
    def getDy2(self) -> int: ...
    def getFlag(self) -> int: ...
    def getRecordId(self) -> int: ...
    def getRecordName(self) -> java.lang.String: ...
    def getRecordSize(self) -> int: ...
    def getRemainingData(self) -> typing.List[int]: ...
    def getRow1(self) -> int: ...
    def getRow2(self) -> int: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    def setCol1(self, short: int) -> None: ...
    def setCol2(self, short: int) -> None: ...
    def setDx1(self, short: int) -> None: ...
    def setDx2(self, short: int) -> None: ...
    def setDy1(self, short: int) -> None: ...
    def setDy2(self, short: int) -> None: ...
    def setFlag(self, short: int) -> None: ...
    def setRemainingData(self, byteArray: typing.List[int]) -> None: ...
    def setRow1(self, short: int) -> None: ...
    def setRow2(self, short: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class EscherClientDataRecord(EscherRecord):
    RECORD_ID: typing.ClassVar[int] = ...
    RECORD_DESCRIPTION: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getRecordId(self) -> int: ...
    def getRecordName(self) -> java.lang.String: ...
    def getRecordSize(self) -> int: ...
    def getRemainingData(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    def setRemainingData(self, byteArray: typing.List[int]) -> None: ...
    def toString(self) -> java.lang.String: ...

class EscherComplexProperty(EscherProperty):
    @typing.overload
    def __init__(self, short: int, boolean: bool, byteArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, short: int, byteArray: typing.List[int]): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getComplexData(self) -> typing.List[int]: ...
    def getPropertySize(self) -> int: ...
    def hashCode(self) -> int: ...
    def serializeComplexPart(self, byteArray: typing.List[int], int: int) -> int: ...
    def serializeSimplePart(self, byteArray: typing.List[int], int: int) -> int: ...
    def toString(self) -> java.lang.String: ...

class EscherContainerRecord(EscherRecord):
    DGG_CONTAINER: typing.ClassVar[int] = ...
    BSTORE_CONTAINER: typing.ClassVar[int] = ...
    DG_CONTAINER: typing.ClassVar[int] = ...
    SPGR_CONTAINER: typing.ClassVar[int] = ...
    SP_CONTAINER: typing.ClassVar[int] = ...
    SOLVER_CONTAINER: typing.ClassVar[int] = ...
    def __init__(self): ...
    def addChildRecord(self, escherRecord: EscherRecord) -> None: ...
    def display(self, printWriter: java.io.PrintWriter, int: int) -> None: ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getChildById(self, short: int) -> 'EscherSpRecord': ...
    def getChildRecords(self) -> java.util.List: ...
    def getRecordName(self) -> java.lang.String: ...
    def getRecordSize(self) -> int: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    def setChildRecords(self, list: java.util.List) -> None: ...
    def toString(self) -> java.lang.String: ...

class EscherDgRecord(EscherRecord):
    RECORD_ID: typing.ClassVar[int] = ...
    RECORD_DESCRIPTION: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getDrawingGroupId(self) -> int: ...
    def getLastMSOSPID(self) -> int: ...
    def getNumShapes(self) -> int: ...
    def getRecordId(self) -> int: ...
    def getRecordName(self) -> java.lang.String: ...
    def getRecordSize(self) -> int: ...
    def incrementShapeCount(self) -> None: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    def setLastMSOSPID(self, int: int) -> None: ...
    def setNumShapes(self, int: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class EscherDggRecord(EscherRecord):
    RECORD_ID: typing.ClassVar[int] = ...
    RECORD_DESCRIPTION: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    def addCluster(self, int: int, int2: int) -> None: ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getDrawingsSaved(self) -> int: ...
    def getFileIdClusters(self) -> typing.List['EscherDggRecord.FileIdCluster']: ...
    def getNumIdClusters(self) -> int: ...
    def getNumShapesSaved(self) -> int: ...
    def getRecordId(self) -> int: ...
    def getRecordName(self) -> java.lang.String: ...
    def getRecordSize(self) -> int: ...
    def getShapeIdMax(self) -> int: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    def setDrawingsSaved(self, int: int) -> None: ...
    def setFileIdClusters(self, fileIdClusterArray: typing.List['EscherDggRecord.FileIdCluster']) -> None: ...
    def setNumShapesSaved(self, int: int) -> None: ...
    def setShapeIdMax(self, int: int) -> None: ...
    def toString(self) -> java.lang.String: ...
    class FileIdCluster:
        def __init__(self, int: int, int2: int): ...
        def getDrawingGroupId(self) -> int: ...
        def getNumShapeIdsUsed(self) -> int: ...
        def incrementShapeId(self) -> None: ...

class EscherOptRecord(EscherRecord):
    RECORD_ID: typing.ClassVar[int] = ...
    RECORD_DESCRIPTION: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    def addEscherProperty(self, escherProperty: EscherProperty) -> None: ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getEscherProperties(self) -> java.util.List: ...
    def getEscherProperty(self, int: int) -> EscherProperty: ...
    def getOptions(self) -> int: ...
    def getRecordName(self) -> java.lang.String: ...
    def getRecordSize(self) -> int: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    def sortProperties(self) -> None: ...
    def toString(self) -> java.lang.String: ...

class EscherSimpleProperty(EscherProperty):
    @typing.overload
    def __init__(self, short: int, boolean: bool, boolean2: bool, int: int): ...
    @typing.overload
    def __init__(self, short: int, int: int): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getPropertyValue(self) -> int: ...
    def hashCode(self) -> int: ...
    def serializeComplexPart(self, byteArray: typing.List[int], int: int) -> int: ...
    def serializeSimplePart(self, byteArray: typing.List[int], int: int) -> int: ...
    def toString(self) -> java.lang.String: ...

class EscherSpRecord(EscherRecord):
    RECORD_ID: typing.ClassVar[int] = ...
    RECORD_DESCRIPTION: typing.ClassVar[java.lang.String] = ...
    FLAG_GROUP: typing.ClassVar[int] = ...
    FLAG_CHILD: typing.ClassVar[int] = ...
    FLAG_PATRIARCH: typing.ClassVar[int] = ...
    FLAG_DELETED: typing.ClassVar[int] = ...
    FLAG_OLESHAPE: typing.ClassVar[int] = ...
    FLAG_HAVEMASTER: typing.ClassVar[int] = ...
    FLAG_FLIPHORIZ: typing.ClassVar[int] = ...
    FLAG_FLIPVERT: typing.ClassVar[int] = ...
    FLAG_CONNECTOR: typing.ClassVar[int] = ...
    FLAG_HAVEANCHOR: typing.ClassVar[int] = ...
    FLAG_BACKGROUND: typing.ClassVar[int] = ...
    FLAG_HASSHAPETYPE: typing.ClassVar[int] = ...
    def __init__(self): ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getFlags(self) -> int: ...
    def getRecordId(self) -> int: ...
    def getRecordName(self) -> java.lang.String: ...
    def getRecordSize(self) -> int: ...
    def getShapeId(self) -> int: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    def setFlags(self, int: int) -> None: ...
    def setShapeId(self, int: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class EscherSpgrRecord(EscherRecord):
    RECORD_ID: typing.ClassVar[int] = ...
    RECORD_DESCRIPTION: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getRecordId(self) -> int: ...
    def getRecordName(self) -> java.lang.String: ...
    def getRecordSize(self) -> int: ...
    def getRectX1(self) -> int: ...
    def getRectX2(self) -> int: ...
    def getRectY1(self) -> int: ...
    def getRectY2(self) -> int: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    def setRectX1(self, int: int) -> None: ...
    def setRectX2(self, int: int) -> None: ...
    def setRectY1(self, int: int) -> None: ...
    def setRectY2(self, int: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class EscherSplitMenuColorsRecord(EscherRecord):
    RECORD_ID: typing.ClassVar[int] = ...
    RECORD_DESCRIPTION: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getColor1(self) -> int: ...
    def getColor2(self) -> int: ...
    def getColor3(self) -> int: ...
    def getColor4(self) -> int: ...
    def getRecordId(self) -> int: ...
    def getRecordName(self) -> java.lang.String: ...
    def getRecordSize(self) -> int: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    def setColor1(self, int: int) -> None: ...
    def setColor2(self, int: int) -> None: ...
    def setColor3(self, int: int) -> None: ...
    def setColor4(self, int: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class EscherTextboxRecord(EscherRecord):
    RECORD_ID: typing.ClassVar[int] = ...
    RECORD_DESCRIPTION: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    def clone(self) -> typing.Any: ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getData(self) -> typing.List[int]: ...
    def getRecordName(self) -> java.lang.String: ...
    def getRecordSize(self) -> int: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    @typing.overload
    def setData(self, byteArray: typing.List[int]) -> None: ...
    @typing.overload
    def setData(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class NullEscherSerializationListener(EscherSerializationListener):
    def __init__(self): ...
    def afterRecordSerialize(self, int: int, short: int, int2: int, escherRecord: EscherRecord) -> None: ...
    def beforeRecordSerialize(self, int: int, short: int, escherRecord: EscherRecord) -> None: ...

class UnknownEscherRecord(EscherRecord):
    def __init__(self): ...
    def addChildRecord(self, escherRecord: EscherRecord) -> None: ...
    def clone(self) -> typing.Any: ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getChildRecords(self) -> java.util.List: ...
    def getData(self) -> typing.List[int]: ...
    def getRecordName(self) -> java.lang.String: ...
    def getRecordSize(self) -> int: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    def setChildRecords(self, list: java.util.List) -> None: ...
    def toString(self) -> java.lang.String: ...

class EscherArrayProperty(EscherComplexProperty):
    @typing.overload
    def __init__(self, short: int, boolean: bool, byteArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, short: int, byteArray: typing.List[int]): ...
    @staticmethod
    def getActualSizeOfElements(short: int) -> int: ...
    def getElement(self, int: int) -> typing.List[int]: ...
    def getNumberOfElementsInArray(self) -> int: ...
    def getNumberOfElementsInMemory(self) -> int: ...
    def getSizeOfElements(self) -> int: ...
    def serializeSimplePart(self, byteArray: typing.List[int], int: int) -> int: ...
    def setArrayData(self, byteArray: typing.List[int], int: int) -> int: ...
    def setElement(self, int: int, byteArray: typing.List[int]) -> None: ...
    def setNumberOfElementsInArray(self, int: int) -> None: ...
    def setNumberOfElementsInMemory(self, int: int) -> None: ...
    def setSizeOfElements(self, int: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class EscherBitmapBlip(EscherBlipRecord):
    RECORD_ID_JPEG: typing.ClassVar[int] = ...
    RECORD_ID_PNG: typing.ClassVar[int] = ...
    RECORD_ID_DIB: typing.ClassVar[int] = ...
    def __init__(self): ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getMarker(self) -> int: ...
    def getRecordSize(self) -> int: ...
    def getUID(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    def setMarker(self, byte: int) -> None: ...
    def setUID(self, byteArray: typing.List[int]) -> None: ...
    def toString(self) -> java.lang.String: ...

class EscherBlipWMFRecord(EscherBlipRecord):
    RECORD_DESCRIPTION: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    @staticmethod
    def compress(byteArray: typing.List[int]) -> typing.List[int]: ...
    @staticmethod
    def decompress(byteArray: typing.List[int], int: int, int2: int) -> typing.List[int]: ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getBoundaryHeight(self) -> int: ...
    def getBoundaryLeft(self) -> int: ...
    def getBoundaryTop(self) -> int: ...
    def getBoundaryWidth(self) -> int: ...
    def getCacheOfSavedSize(self) -> int: ...
    def getCacheOfSize(self) -> int: ...
    def getCompressionFlag(self) -> int: ...
    def getData(self) -> typing.List[int]: ...
    def getFilter(self) -> int: ...
    def getHeight(self) -> int: ...
    def getRecordName(self) -> java.lang.String: ...
    def getRecordSize(self) -> int: ...
    def getSecondaryUID(self) -> typing.List[int]: ...
    def getWidth(self) -> int: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    def setBoundaryHeight(self, int: int) -> None: ...
    def setBoundaryLeft(self, int: int) -> None: ...
    def setBoundaryTop(self, int: int) -> None: ...
    def setBoundaryWidth(self, int: int) -> None: ...
    def setCacheOfSavedSize(self, int: int) -> None: ...
    def setCacheOfSize(self, int: int) -> None: ...
    def setCompressionFlag(self, byte: int) -> None: ...
    def setData(self, byteArray: typing.List[int]) -> None: ...
    def setFilter(self, byte: int) -> None: ...
    def setHeight(self, int: int) -> None: ...
    def setSecondaryUID(self, byteArray: typing.List[int]) -> None: ...
    def setWidth(self, int: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class EscherBoolProperty(EscherSimpleProperty):
    def __init__(self, short: int, int: int): ...
    def isFalse(self) -> bool: ...
    def isTrue(self) -> bool: ...

class EscherMetafileBlip(EscherBlipRecord):
    RECORD_ID_EMF: typing.ClassVar[int] = ...
    RECORD_ID_WMF: typing.ClassVar[int] = ...
    RECORD_ID_PICT: typing.ClassVar[int] = ...
    def __init__(self): ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getBounds(self) -> java.awt.Rectangle: ...
    def getCompressedSize(self) -> int: ...
    def getRecordSize(self) -> int: ...
    def getSizeEMU(self) -> java.awt.Dimension: ...
    def getUID(self) -> typing.List[int]: ...
    def getUncompressedSize(self) -> int: ...
    def isCompressed(self) -> bool: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    def setBounds(self, rectangle: java.awt.Rectangle) -> None: ...
    def setCompressed(self, boolean: bool) -> None: ...
    def setCompressedSize(self, int: int) -> None: ...
    def setSizeEMU(self, dimension: java.awt.Dimension) -> None: ...
    def setUID(self, byteArray: typing.List[int]) -> None: ...
    def setUncompressedSize(self, int: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class EscherPictBlip(EscherBlipRecord):
    RECORD_ID_EMF: typing.ClassVar[int] = ...
    RECORD_ID_WMF: typing.ClassVar[int] = ...
    RECORD_ID_PICT: typing.ClassVar[int] = ...
    def __init__(self): ...
    def fillFields(self, byteArray: typing.List[int], int: int, escherRecordFactory: EscherRecordFactory) -> int: ...
    def getBounds(self) -> java.awt.Rectangle: ...
    def getCompressedSize(self) -> int: ...
    def getRecordSize(self) -> int: ...
    def getSizeEMU(self) -> java.awt.Dimension: ...
    def getUID(self) -> typing.List[int]: ...
    def getUncompressedSize(self) -> int: ...
    def isCompressed(self) -> bool: ...
    @typing.overload
    def serialize(self) -> typing.List[int]: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int], escherSerializationListener: EscherSerializationListener) -> int: ...
    @typing.overload
    def serialize(self, int: int, byteArray: typing.List[int]) -> int: ...
    def setBounds(self, rectangle: java.awt.Rectangle) -> None: ...
    def setCompressed(self, boolean: bool) -> None: ...
    def setCompressedSize(self, int: int) -> None: ...
    def setSizeEMU(self, dimension: java.awt.Dimension) -> None: ...
    def setUID(self, byteArray: typing.List[int]) -> None: ...
    def setUncompressedSize(self, int: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class EscherRGBProperty(EscherSimpleProperty):
    def __init__(self, short: int, int: int): ...
    def getBlue(self) -> int: ...
    def getGreen(self) -> int: ...
    def getRed(self) -> int: ...
    def getRgbColor(self) -> int: ...

class EscherShapePathProperty(EscherSimpleProperty):
    LINE_OF_STRAIGHT_SEGMENTS: typing.ClassVar[int] = ...
    CLOSED_POLYGON: typing.ClassVar[int] = ...
    CURVES: typing.ClassVar[int] = ...
    CLOSED_CURVES: typing.ClassVar[int] = ...
    COMPLEX: typing.ClassVar[int] = ...
    def __init__(self, short: int, int: int): ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("loci.poi.ddf")``.

    DefaultEscherRecordFactory: typing.Type[DefaultEscherRecordFactory]
    EscherArrayProperty: typing.Type[EscherArrayProperty]
    EscherBSERecord: typing.Type[EscherBSERecord]
    EscherBitmapBlip: typing.Type[EscherBitmapBlip]
    EscherBlipRecord: typing.Type[EscherBlipRecord]
    EscherBlipWMFRecord: typing.Type[EscherBlipWMFRecord]
    EscherBoolProperty: typing.Type[EscherBoolProperty]
    EscherChildAnchorRecord: typing.Type[EscherChildAnchorRecord]
    EscherClientAnchorRecord: typing.Type[EscherClientAnchorRecord]
    EscherClientDataRecord: typing.Type[EscherClientDataRecord]
    EscherComplexProperty: typing.Type[EscherComplexProperty]
    EscherContainerRecord: typing.Type[EscherContainerRecord]
    EscherDgRecord: typing.Type[EscherDgRecord]
    EscherDggRecord: typing.Type[EscherDggRecord]
    EscherDump: typing.Type[EscherDump]
    EscherMetafileBlip: typing.Type[EscherMetafileBlip]
    EscherOptRecord: typing.Type[EscherOptRecord]
    EscherPictBlip: typing.Type[EscherPictBlip]
    EscherProperties: typing.Type[EscherProperties]
    EscherProperty: typing.Type[EscherProperty]
    EscherPropertyFactory: typing.Type[EscherPropertyFactory]
    EscherPropertyMetaData: typing.Type[EscherPropertyMetaData]
    EscherRGBProperty: typing.Type[EscherRGBProperty]
    EscherRecord: typing.Type[EscherRecord]
    EscherRecordFactory: typing.Type[EscherRecordFactory]
    EscherSerializationListener: typing.Type[EscherSerializationListener]
    EscherShapePathProperty: typing.Type[EscherShapePathProperty]
    EscherSimpleProperty: typing.Type[EscherSimpleProperty]
    EscherSpRecord: typing.Type[EscherSpRecord]
    EscherSpgrRecord: typing.Type[EscherSpgrRecord]
    EscherSplitMenuColorsRecord: typing.Type[EscherSplitMenuColorsRecord]
    EscherTextboxRecord: typing.Type[EscherTextboxRecord]
    NullEscherSerializationListener: typing.Type[NullEscherSerializationListener]
    UnknownEscherRecord: typing.Type[UnknownEscherRecord]
