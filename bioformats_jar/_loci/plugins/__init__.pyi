import ij
import ij.plugin
import ij.plugin.filter
import ij.process
import java.lang
import bioformats_jar._loci.plugins.config
import bioformats_jar._loci.plugins.in_
import bioformats_jar._loci.plugins.macro
import bioformats_jar._loci.plugins.out
import bioformats_jar._loci.plugins.prefs
import bioformats_jar._loci.plugins.shortcut
import bioformats_jar._loci.plugins.util
import typing



class About(ij.plugin.PlugIn):
    URL_SOFTWARE: typing.ClassVar[java.lang.String] = ...
    URL_BIO_FORMATS_IMAGEJ: typing.ClassVar[java.lang.String] = ...
    URL_DATA_BROWSER: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    @staticmethod
    def about() -> None: ...
    @staticmethod
    def main(stringArray: typing.List[java.lang.String]) -> None: ...
    def run(self, string: typing.Union[java.lang.String, str]) -> None: ...

class BF:
    @staticmethod
    def debug(string: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    @staticmethod
    def openImagePlus(string: typing.Union[java.lang.String, str]) -> typing.List[ij.ImagePlus]: ...
    @typing.overload
    @staticmethod
    def openImagePlus(importerOptions: bioformats_jar._loci.plugins.in_.ImporterOptions) -> typing.List[ij.ImagePlus]: ...
    @typing.overload
    @staticmethod
    def openThumbImagePlus(string: typing.Union[java.lang.String, str]) -> typing.List[ij.ImagePlus]: ...
    @typing.overload
    @staticmethod
    def openThumbImagePlus(importerOptions: bioformats_jar._loci.plugins.in_.ImporterOptions) -> typing.List[ij.ImagePlus]: ...
    @staticmethod
    def progress(boolean: bool, int: int, int2: int) -> None: ...
    @staticmethod
    def status(boolean: bool, string: typing.Union[java.lang.String, str]) -> None: ...
    @staticmethod
    def warn(boolean: bool, string: typing.Union[java.lang.String, str]) -> None: ...

class LociExporter(ij.plugin.filter.PlugInFilter):
    arg: java.lang.String = ...
    def __init__(self): ...
    def run(self, imageProcessor: ij.process.ImageProcessor) -> None: ...
    def setup(self, string: typing.Union[java.lang.String, str], imagePlus: ij.ImagePlus) -> int: ...

class LociImporter(ij.plugin.PlugIn):
    success: bool = ...
    canceled: bool = ...
    def __init__(self): ...
    def run(self, string: typing.Union[java.lang.String, str]) -> None: ...

class Slicer(ij.plugin.filter.PlugInFilter):
    canceled: bool = ...
    def __init__(self): ...
    @staticmethod
    def reorder(imagePlus: ij.ImagePlus, string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str]) -> ij.ImagePlus: ...
    def reslice(self, imagePlus: ij.ImagePlus, boolean: bool, boolean2: bool, boolean3: bool, string: typing.Union[java.lang.String, str]) -> typing.List[ij.ImagePlus]: ...
    def run(self, imageProcessor: ij.process.ImageProcessor) -> None: ...
    def setup(self, string: typing.Union[java.lang.String, str], imagePlus: ij.ImagePlus) -> int: ...

class Updater(ij.plugin.PlugIn):
    canceled: bool = ...
    def __init__(self): ...
    @staticmethod
    def install(string: typing.Union[java.lang.String, str]) -> None: ...
    @staticmethod
    def isFiji() -> bool: ...
    def run(self, string: typing.Union[java.lang.String, str]) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("loci.plugins")``.

    About: typing.Type[About]
    BF: typing.Type[BF]
    LociExporter: typing.Type[LociExporter]
    LociImporter: typing.Type[LociImporter]
    Slicer: typing.Type[Slicer]
    Updater: typing.Type[Updater]
    config: bioformats_jar._loci.plugins.config.__module_protocol__
    in_: bioformats_jar._loci.plugins.in_.__module_protocol__
    macro: bioformats_jar._loci.plugins.macro.__module_protocol__
    out: bioformats_jar._loci.plugins.out.__module_protocol__
    prefs: bioformats_jar._loci.plugins.prefs.__module_protocol__
    shortcut: bioformats_jar._loci.plugins.shortcut.__module_protocol__
    util: bioformats_jar._loci.plugins.util.__module_protocol__
