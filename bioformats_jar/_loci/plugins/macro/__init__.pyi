import ij.macro
import ij.plugin
import java.lang
import typing



class MacroFunctions(ij.plugin.PlugIn, ij.macro.MacroExtension):
    def __init__(self): ...
    def getExtensionFunctions(self) -> typing.List[ij.macro.ExtensionDescriptor]: ...
    def handleExtension(self, string: typing.Union[java.lang.String, str], objectArray: typing.List[typing.Any]) -> java.lang.String: ...
    def run(self, string: typing.Union[java.lang.String, str]) -> None: ...

class LociFunctions(MacroFunctions):
    URL_JAVADOCS: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    def close(self) -> None: ...
    def closeFileOnly(self) -> None: ...
    def fileGroupOption(self, string: typing.Union[java.lang.String, str], stringArray: typing.List[java.lang.String]) -> None: ...
    def getBuildDate(self, stringArray: typing.List[java.lang.String]) -> None: ...
    def getChannelDimCount(self, doubleArray: typing.List[float]) -> None: ...
    def getChannelDimLength(self, double: float, doubleArray: typing.List[float]) -> None: ...
    def getChannelDimType(self, double: float, doubleArray: typing.List[float]) -> None: ...
    def getCurrentFile(self, stringArray: typing.List[java.lang.String]) -> None: ...
    def getDimensionOrder(self, stringArray: typing.List[java.lang.String]) -> None: ...
    def getEffectiveSizeC(self, doubleArray: typing.List[float]) -> None: ...
    def getFormat(self, string: typing.Union[java.lang.String, str], stringArray: typing.List[java.lang.String]) -> None: ...
    def getImageCount(self, doubleArray: typing.List[float]) -> None: ...
    def getImageCreationDate(self, stringArray: typing.List[java.lang.String]) -> None: ...
    def getIndex(self, double: float, double2: float, double3: float, doubleArray: typing.List[float]) -> None: ...
    def getMetadataValue(self, string: typing.Union[java.lang.String, str], stringArray: typing.List[java.lang.String]) -> None: ...
    def getPixelType(self, stringArray: typing.List[java.lang.String]) -> None: ...
    def getPixelsPhysicalSizeX(self, doubleArray: typing.List[float]) -> None: ...
    def getPixelsPhysicalSizeY(self, doubleArray: typing.List[float]) -> None: ...
    def getPixelsPhysicalSizeZ(self, doubleArray: typing.List[float]) -> None: ...
    def getPixelsTimeIncrement(self, doubleArray: typing.List[float]) -> None: ...
    def getPlanePositionX(self, doubleArray: typing.List[float], double2: float) -> None: ...
    def getPlanePositionY(self, doubleArray: typing.List[float], double2: float) -> None: ...
    def getPlanePositionZ(self, doubleArray: typing.List[float], double2: float) -> None: ...
    def getPlaneTimingDeltaT(self, doubleArray: typing.List[float], double2: float) -> None: ...
    def getPlaneTimingExposureTime(self, doubleArray: typing.List[float], double2: float) -> None: ...
    def getRGBChannelCount(self, doubleArray: typing.List[float]) -> None: ...
    def getRevision(self, stringArray: typing.List[java.lang.String]) -> None: ...
    def getSeries(self, doubleArray: typing.List[float]) -> None: ...
    def getSeriesCount(self, doubleArray: typing.List[float]) -> None: ...
    def getSeriesMetadataValue(self, string: typing.Union[java.lang.String, str], stringArray: typing.List[java.lang.String]) -> None: ...
    def getSeriesName(self, stringArray: typing.List[java.lang.String]) -> None: ...
    def getSizeC(self, doubleArray: typing.List[float]) -> None: ...
    def getSizeT(self, doubleArray: typing.List[float]) -> None: ...
    def getSizeX(self, doubleArray: typing.List[float]) -> None: ...
    def getSizeY(self, doubleArray: typing.List[float]) -> None: ...
    def getSizeZ(self, doubleArray: typing.List[float]) -> None: ...
    def getUsedFile(self, double: float, stringArray: typing.List[java.lang.String]) -> None: ...
    def getUsedFileCount(self, doubleArray: typing.List[float]) -> None: ...
    def getVersionNumber(self, stringArray: typing.List[java.lang.String]) -> None: ...
    def getZCTCoords(self, double: float, doubleArray: typing.List[float], doubleArray2: typing.List[float], doubleArray3: typing.List[float]) -> None: ...
    def isGroupFiles(self, stringArray: typing.List[java.lang.String]) -> None: ...
    def isIndexed(self, stringArray: typing.List[java.lang.String]) -> None: ...
    def isInterleaved(self, stringArray: typing.List[java.lang.String]) -> None: ...
    def isInterleavedSubC(self, double: float, stringArray: typing.List[java.lang.String]) -> None: ...
    def isLittleEndian(self, stringArray: typing.List[java.lang.String]) -> None: ...
    def isMetadataComplete(self, stringArray: typing.List[java.lang.String]) -> None: ...
    def isMetadataFiltered(self, stringArray: typing.List[java.lang.String]) -> None: ...
    def isNormalized(self, booleanArray: typing.List[bool]) -> None: ...
    def isOrderCertain(self, stringArray: typing.List[java.lang.String]) -> None: ...
    def isOriginalMetadataPopulated(self, booleanArray: typing.List[bool]) -> None: ...
    def isThisType(self, string: typing.Union[java.lang.String, str], stringArray: typing.List[java.lang.String]) -> None: ...
    def isThisTypeFast(self, string: typing.Union[java.lang.String, str], stringArray: typing.List[java.lang.String]) -> None: ...
    def openImage(self, string: typing.Union[java.lang.String, str], double: float) -> None: ...
    def openImagePlus(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def openSubImage(self, string: typing.Union[java.lang.String, str], double: float, double2: float, double3: float, double4: float, double5: float) -> None: ...
    def openThumbImage(self, string: typing.Union[java.lang.String, str], double: float) -> None: ...
    def openThumbImagePlus(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setGroupFiles(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setId(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMetadataFiltered(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setNormalized(self, boolean: bool) -> None: ...
    def setOriginalMetadataPopulated(self, boolean: bool) -> None: ...
    def setSeries(self, double: float) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("loci.plugins.macro")``.

    LociFunctions: typing.Type[LociFunctions]
    MacroFunctions: typing.Type[MacroFunctions]
