import java.lang
import java.util
import bioformats_jar._loci.common
import typing



class Option:
    KEY_PREFIX: typing.ClassVar[java.lang.String] = ...
    INI_KEY: typing.ClassVar[java.lang.String] = ...
    INI_SAVE: typing.ClassVar[java.lang.String] = ...
    INI_LABEL: typing.ClassVar[java.lang.String] = ...
    INI_INFO: typing.ClassVar[java.lang.String] = ...
    INI_DEFAULT: typing.ClassVar[java.lang.String] = ...
    def __init__(self, string: typing.Union[java.lang.String, str], boolean: bool, string2: typing.Union[java.lang.String, str], string3: typing.Union[java.lang.String, str]): ...
    def getInfo(self) -> java.lang.String: ...
    def getKey(self) -> java.lang.String: ...
    def getLabel(self) -> java.lang.String: ...
    def isSaved(self) -> bool: ...
    def loadOption(self) -> None: ...
    def parseOption(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def saveOption(self) -> None: ...

class OptionsDialog:
    STATUS_OK: typing.ClassVar[int] = ...
    STATUS_CANCELED: typing.ClassVar[int] = ...
    STATUS_FINISHED: typing.ClassVar[int] = ...
    def __init__(self, optionsList: 'OptionsList'): ...
    def showDialog(self) -> int: ...

class OptionsList:
    INI_TYPE: typing.ClassVar[java.lang.String] = ...
    TYPE_BOOLEAN: typing.ClassVar[java.lang.String] = ...
    TYPE_STRING: typing.ClassVar[java.lang.String] = ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], class_: typing.Type[typing.Any]): ...
    @typing.overload
    def __init__(self, iniList: bioformats_jar._loci.common.IniList): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getBooleanOption(self, string: typing.Union[java.lang.String, str]) -> 'BooleanOption': ...
    def getDefaultValue(self, string: typing.Union[java.lang.String, str]) -> java.lang.String: ...
    def getInfo(self, string: typing.Union[java.lang.String, str]) -> java.lang.String: ...
    def getLabel(self, string: typing.Union[java.lang.String, str]) -> java.lang.String: ...
    def getOption(self, string: typing.Union[java.lang.String, str]) -> Option: ...
    def getPossible(self, string: typing.Union[java.lang.String, str]) -> typing.List[java.lang.String]: ...
    def getStringOption(self, string: typing.Union[java.lang.String, str]) -> 'StringOption': ...
    def getValue(self, string: typing.Union[java.lang.String, str]) -> java.lang.String: ...
    def hashCode(self) -> int: ...
    def isPossible(self, string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str]) -> bool: ...
    def isSaved(self, string: typing.Union[java.lang.String, str]) -> bool: ...
    def isSet(self, string: typing.Union[java.lang.String, str]) -> bool: ...
    def isSetByDefault(self, string: typing.Union[java.lang.String, str]) -> bool: ...
    def loadOptions(self) -> None: ...
    def parseOptions(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def saveOptions(self) -> None: ...
    @typing.overload
    def setValue(self, string: typing.Union[java.lang.String, str], boolean: bool) -> None: ...
    @typing.overload
    def setValue(self, string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str]) -> None: ...

class BooleanOption(Option):
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], boolean: bool, string2: typing.Union[java.lang.String, str], string3: typing.Union[java.lang.String, str], boolean2: bool): ...
    @typing.overload
    def __init__(self, hashMap: java.util.HashMap[typing.Union[java.lang.String, str], typing.Union[java.lang.String, str]]): ...
    def getDefault(self) -> bool: ...
    def getValue(self) -> bool: ...
    def loadOption(self) -> None: ...
    def parseOption(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def saveOption(self) -> None: ...
    def setValue(self, boolean: bool) -> None: ...

class DoubleOption(Option):
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], boolean: bool, string2: typing.Union[java.lang.String, str], string3: typing.Union[java.lang.String, str], double: float): ...
    @typing.overload
    def __init__(self, hashMap: java.util.HashMap[typing.Union[java.lang.String, str], typing.Union[java.lang.String, str]]): ...
    def getDefault(self) -> float: ...
    def getValue(self) -> float: ...
    def loadOption(self) -> None: ...
    def parseOption(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def saveOption(self) -> None: ...
    def setValue(self, double: float) -> None: ...

class StringOption(Option):
    INI_POSSIBLE: typing.ClassVar[java.lang.String] = ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], boolean: bool, string2: typing.Union[java.lang.String, str], string3: typing.Union[java.lang.String, str], string4: typing.Union[java.lang.String, str], vector: java.util.Vector[typing.Union[java.lang.String, str]]): ...
    @typing.overload
    def __init__(self, hashMap: java.util.HashMap[typing.Union[java.lang.String, str], typing.Union[java.lang.String, str]]): ...
    def addPossible(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def getDefault(self) -> java.lang.String: ...
    def getPossible(self) -> java.util.Vector[java.lang.String]: ...
    def getValue(self) -> java.lang.String: ...
    def loadOption(self) -> None: ...
    @staticmethod
    def parseList(string: typing.Union[java.lang.String, str]) -> java.util.Vector[java.lang.String]: ...
    def parseOption(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def removePossible(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def saveOption(self) -> None: ...
    def setValue(self, string: typing.Union[java.lang.String, str]) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("loci.plugins.prefs")``.

    BooleanOption: typing.Type[BooleanOption]
    DoubleOption: typing.Type[DoubleOption]
    Option: typing.Type[Option]
    OptionsDialog: typing.Type[OptionsDialog]
    OptionsList: typing.Type[OptionsList]
    StringOption: typing.Type[StringOption]
