import ij.plugin
import java.awt
import java.awt.event
import java.io
import java.lang
import java.net
import java.util
import javax.swing
import javax.swing.event
import jpype.protocol
import typing



class ConfigWindow(javax.swing.JFrame, java.awt.event.ActionListener, java.awt.event.ItemListener, javax.swing.event.ListSelectionListener, java.lang.Runnable):
    def __init__(self): ...
    def actionPerformed(self, actionEvent: java.awt.event.ActionEvent) -> None: ...
    @staticmethod
    def addEntry(comparable: java.lang.Comparable[typing.Any], defaultListModel: javax.swing.DefaultListModel) -> None: ...
    def itemStateChanged(self, itemEvent: java.awt.event.ItemEvent) -> None: ...
    @staticmethod
    def makeTextField() -> javax.swing.JTextField: ...
    def run(self) -> None: ...
    def valueChanged(self, listSelectionEvent: javax.swing.event.ListSelectionEvent) -> None: ...

class FormatEntry(java.lang.Comparable[typing.Any]):
    def __init__(self, printWriter: java.io.PrintWriter, object: typing.Any): ...
    def compareTo(self, object: typing.Any) -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def toString(self) -> java.lang.String: ...

class IFormatWidgets:
    def getLabels(self) -> typing.List[java.lang.String]: ...
    def getWidgets(self) -> typing.List[java.awt.Component]: ...

class InstallWizard(javax.swing.JFrame):
    def __init__(self): ...
    @staticmethod
    def checkLatest(string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    @staticmethod
    def download(uRLConnection: java.net.URLConnection) -> java.lang.String: ...
    @typing.overload
    @staticmethod
    def download(uRLConnection: java.net.URLConnection, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...

class LibraryEntry(java.lang.Comparable[typing.Any]):
    MISSING_VERSION_CODE: typing.ClassVar[java.lang.String] = ...
    @typing.overload
    def __init__(self, printWriter: java.io.PrintWriter, string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str], string3: typing.Union[java.lang.String, str], string4: typing.Union[java.lang.String, str], string5: typing.Union[java.lang.String, str], string6: typing.Union[java.lang.String, str], string7: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, printWriter: java.io.PrintWriter, hashMap: java.util.HashMap[typing.Union[java.lang.String, str], typing.Union[java.lang.String, str]]): ...
    def compareTo(self, object: typing.Any) -> int: ...
    def toString(self) -> java.lang.String: ...

class LociConfig(ij.plugin.PlugIn):
    def __init__(self): ...
    @staticmethod
    def main(stringArray: typing.List[java.lang.String]) -> None: ...
    def run(self, string: typing.Union[java.lang.String, str]) -> None: ...

class LociInstaller(ij.plugin.PlugIn):
    def __init__(self): ...
    def run(self, string: typing.Union[java.lang.String, str]) -> None: ...

class SpringUtilities:
    def __init__(self): ...
    @staticmethod
    def makeCompactGrid(container: java.awt.Container, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    @staticmethod
    def makeGrid(container: java.awt.Container, int: int, int2: int, int3: int, int4: int, int5: int, int6: int) -> None: ...
    @staticmethod
    def printSizes(component: java.awt.Component) -> None: ...

class TextAreaWriter(java.io.Writer):
    def __init__(self, jTextArea: javax.swing.JTextArea): ...
    def close(self) -> None: ...
    def flush(self) -> None: ...
    @typing.overload
    def write(self, charArray: typing.List[str]) -> None: ...
    @typing.overload
    def write(self, int: int) -> None: ...
    @typing.overload
    def write(self, string: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    def write(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    @typing.overload
    def write(self, charArray: typing.List[str], int: int, int2: int) -> None: ...

class CellSensWidgets(IFormatWidgets, java.awt.event.ItemListener):
    def __init__(self): ...
    def getLabels(self) -> typing.List[java.lang.String]: ...
    def getWidgets(self) -> typing.List[java.awt.Component]: ...
    def itemStateChanged(self, itemEvent: java.awt.event.ItemEvent) -> None: ...

class FlexWidgets(javax.swing.event.DocumentListener, IFormatWidgets):
    def __init__(self): ...
    def changedUpdate(self, documentEvent: javax.swing.event.DocumentEvent) -> None: ...
    def getLabels(self) -> typing.List[java.lang.String]: ...
    def getWidgets(self) -> typing.List[java.awt.Component]: ...
    def insertUpdate(self, documentEvent: javax.swing.event.DocumentEvent) -> None: ...
    def removeUpdate(self, documentEvent: javax.swing.event.DocumentEvent) -> None: ...

class LIFWidgets(IFormatWidgets, java.awt.event.ItemListener):
    def __init__(self): ...
    def getLabels(self) -> typing.List[java.lang.String]: ...
    def getWidgets(self) -> typing.List[java.awt.Component]: ...
    def itemStateChanged(self, itemEvent: java.awt.event.ItemEvent) -> None: ...

class ND2Widgets(IFormatWidgets, java.awt.event.ItemListener):
    def __init__(self): ...
    def getLabels(self) -> typing.List[java.lang.String]: ...
    def getWidgets(self) -> typing.List[java.awt.Component]: ...
    def itemStateChanged(self, itemEvent: java.awt.event.ItemEvent) -> None: ...

class PictWidgets(IFormatWidgets, java.awt.event.ItemListener):
    def __init__(self): ...
    def getLabels(self) -> typing.List[java.lang.String]: ...
    def getWidgets(self) -> typing.List[java.awt.Component]: ...
    def itemStateChanged(self, itemEvent: java.awt.event.ItemEvent) -> None: ...

class QTWidgets(IFormatWidgets, java.awt.event.ItemListener):
    def __init__(self): ...
    def getLabels(self) -> typing.List[java.lang.String]: ...
    def getWidgets(self) -> typing.List[java.awt.Component]: ...
    def itemStateChanged(self, itemEvent: java.awt.event.ItemEvent) -> None: ...

class SDTWidgets(IFormatWidgets, java.awt.event.ItemListener):
    def __init__(self): ...
    def getLabels(self) -> typing.List[java.lang.String]: ...
    def getWidgets(self) -> typing.List[java.awt.Component]: ...
    def itemStateChanged(self, itemEvent: java.awt.event.ItemEvent) -> None: ...

class TiffDelegateWidgets(IFormatWidgets, java.awt.event.ItemListener):
    def __init__(self): ...
    def getLabels(self) -> typing.List[java.lang.String]: ...
    def getWidgets(self) -> typing.List[java.awt.Component]: ...
    def itemStateChanged(self, itemEvent: java.awt.event.ItemEvent) -> None: ...

class ZeissCZIWidgets(IFormatWidgets, java.awt.event.ItemListener):
    def __init__(self): ...
    def getLabels(self) -> typing.List[java.lang.String]: ...
    def getWidgets(self) -> typing.List[java.awt.Component]: ...
    def itemStateChanged(self, itemEvent: java.awt.event.ItemEvent) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("loci.plugins.config")``.

    CellSensWidgets: typing.Type[CellSensWidgets]
    ConfigWindow: typing.Type[ConfigWindow]
    FlexWidgets: typing.Type[FlexWidgets]
    FormatEntry: typing.Type[FormatEntry]
    IFormatWidgets: typing.Type[IFormatWidgets]
    InstallWizard: typing.Type[InstallWizard]
    LIFWidgets: typing.Type[LIFWidgets]
    LibraryEntry: typing.Type[LibraryEntry]
    LociConfig: typing.Type[LociConfig]
    LociInstaller: typing.Type[LociInstaller]
    ND2Widgets: typing.Type[ND2Widgets]
    PictWidgets: typing.Type[PictWidgets]
    QTWidgets: typing.Type[QTWidgets]
    SDTWidgets: typing.Type[SDTWidgets]
    SpringUtilities: typing.Type[SpringUtilities]
    TextAreaWriter: typing.Type[TextAreaWriter]
    TiffDelegateWidgets: typing.Type[TiffDelegateWidgets]
    ZeissCZIWidgets: typing.Type[ZeissCZIWidgets]
