import java.io
import java.lang
import java.nio
import jpype.protocol
import bioformats_jar._ome
import typing



class DecodeContext:
    def __init__(self): ...
    def decodeFirstFrame(self, byteArray: typing.List[int], long: int, long2: int) -> typing.List[int]: ...
    def delete(self) -> None: ...

class DecodeException(java.lang.Exception):
    def __init__(self, string: typing.Union[java.lang.String, str]): ...

class FormatError(java.lang.Exception):
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    def delete(self) -> None: ...
    def getMessage(self) -> java.lang.String: ...

class GUID:
    def __init__(self): ...
    def delete(self) -> None: ...
    def getData1(self) -> int: ...
    def getData2(self) -> int: ...
    def getData3(self) -> int: ...
    def getData4(self) -> typing.List[int]: ...
    def setData1(self, long: int) -> None: ...
    def setData2(self, int: int) -> None: ...
    def setData3(self, int: int) -> None: ...
    def setData4(self, shortArray: typing.List[int]) -> None: ...

class ImageData:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, long: int): ...
    def add(self, char: str) -> None: ...
    def capacity(self) -> int: ...
    def clear(self) -> None: ...
    def delete(self) -> None: ...
    def get(self, int: int) -> str: ...
    def isEmpty(self) -> bool: ...
    def reserve(self, long: int) -> None: ...
    def set(self, int: int, char: str) -> None: ...
    def size(self) -> int: ...

class Decode(ome.jxrlib.AbstractDecode):
    @typing.overload
    def __init__(self, byteArray: typing.List[int]): ...
    @typing.overload
    def __init__(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]): ...
    @typing.overload
    def __init__(self, byteBuffer: java.nio.ByteBuffer): ...
    @typing.overload
    def __init__(self, byteBuffer: java.nio.ByteBuffer, int: int, int2: int): ...
    @staticmethod
    def decodeFirstFrame(byteArray: typing.List[int], int: int, int2: int) -> typing.List[int]: ...

class AbstractDecode: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("ome.jxrlib")``.

    AbstractDecode: typing.Type[AbstractDecode]
    Decode: typing.Type[Decode]
    DecodeContext: typing.Type[DecodeContext]
    DecodeException: typing.Type[DecodeException]
    FormatError: typing.Type[FormatError]
    GUID: typing.Type[GUID]
    ImageData: typing.Type[ImageData]
