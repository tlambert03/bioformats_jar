import java.lang
import java.util
import loci.common
import typing



class Column:
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    def getName(self) -> java.lang.String: ...
    def getType(self) -> typing.Type: ...
    def getTypeString(self) -> java.lang.String: ...

class ColumnMap:
    def __init__(self, column: Column, randomAccessInputStream: loci.common.RandomAccessInputStream, int: int): ...
    def getValueList(self) -> java.util.ArrayList: ...
    def getValues(self) -> typing.List[typing.Any]: ...
    def isFixedMap(self) -> bool: ...

class MetakitException(java.lang.Exception):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable): ...

class MetakitReader:
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, randomAccessInputStream: loci.common.RandomAccessInputStream): ...
    def close(self) -> None: ...
    @typing.overload
    def getColumnNames(self, int: int) -> typing.List[java.lang.String]: ...
    @typing.overload
    def getColumnNames(self, string: typing.Union[java.lang.String, str]) -> typing.List[java.lang.String]: ...
    @typing.overload
    def getColumnTypes(self, int: int) -> typing.List[typing.Type]: ...
    @typing.overload
    def getColumnTypes(self, string: typing.Union[java.lang.String, str]) -> typing.List[typing.Type]: ...
    @typing.overload
    def getRowCount(self, int: int) -> int: ...
    @typing.overload
    def getRowCount(self, string: typing.Union[java.lang.String, str]) -> int: ...
    @typing.overload
    def getRowData(self, int: int, int2: int) -> typing.List[typing.Any]: ...
    @typing.overload
    def getRowData(self, int: int, string: typing.Union[java.lang.String, str]) -> typing.List[typing.Any]: ...
    def getTableCount(self) -> int: ...
    @typing.overload
    def getTableData(self, int: int) -> typing.List[typing.List[typing.Any]]: ...
    @typing.overload
    def getTableData(self, string: typing.Union[java.lang.String, str]) -> typing.List[typing.List[typing.Any]]: ...
    def getTableNames(self) -> typing.List[java.lang.String]: ...

class MetakitTools:
    def __init__(self): ...
    @staticmethod
    def readBpInt(randomAccessInputStream: loci.common.RandomAccessInputStream) -> int: ...
    @staticmethod
    def readPString(randomAccessInputStream: loci.common.RandomAccessInputStream) -> java.lang.String: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("ome.metakit")``.

    Column: typing.Type[Column]
    ColumnMap: typing.Type[ColumnMap]
    MetakitException: typing.Type[MetakitException]
    MetakitReader: typing.Type[MetakitReader]
    MetakitTools: typing.Type[MetakitTools]
