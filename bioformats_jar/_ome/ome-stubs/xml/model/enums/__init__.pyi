import java.lang
import bioformats_jar._ome.units.quantity
import bioformats_jar._ome.xml.model.enums.handlers
import bioformats_jar._ome.xml.model.primitives
import typing



class Enumeration: ...

class EnumerationException(java.lang.Exception):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable): ...

class AcquisitionMode(java.lang.Enum['AcquisitionMode'], Enumeration):
    WIDEFIELD: typing.ClassVar['AcquisitionMode'] = ...
    LASERSCANNINGCONFOCALMICROSCOPY: typing.ClassVar['AcquisitionMode'] = ...
    SPINNINGDISKCONFOCAL: typing.ClassVar['AcquisitionMode'] = ...
    SLITSCANCONFOCAL: typing.ClassVar['AcquisitionMode'] = ...
    MULTIPHOTONMICROSCOPY: typing.ClassVar['AcquisitionMode'] = ...
    STRUCTUREDILLUMINATION: typing.ClassVar['AcquisitionMode'] = ...
    SINGLEMOLECULEIMAGING: typing.ClassVar['AcquisitionMode'] = ...
    TOTALINTERNALREFLECTION: typing.ClassVar['AcquisitionMode'] = ...
    FLUORESCENCELIFETIME: typing.ClassVar['AcquisitionMode'] = ...
    SPECTRALIMAGING: typing.ClassVar['AcquisitionMode'] = ...
    FLUORESCENCECORRELATIONSPECTROSCOPY: typing.ClassVar['AcquisitionMode'] = ...
    NEARFIELDSCANNINGOPTICALMICROSCOPY: typing.ClassVar['AcquisitionMode'] = ...
    SECONDHARMONICGENERATIONIMAGING: typing.ClassVar['AcquisitionMode'] = ...
    PALM: typing.ClassVar['AcquisitionMode'] = ...
    STORM: typing.ClassVar['AcquisitionMode'] = ...
    STED: typing.ClassVar['AcquisitionMode'] = ...
    TIRF: typing.ClassVar['AcquisitionMode'] = ...
    FSM: typing.ClassVar['AcquisitionMode'] = ...
    LCM: typing.ClassVar['AcquisitionMode'] = ...
    OTHER: typing.ClassVar['AcquisitionMode'] = ...
    BRIGHTFIELD: typing.ClassVar['AcquisitionMode'] = ...
    SWEPTFIELDCONFOCAL: typing.ClassVar['AcquisitionMode'] = ...
    SPIM: typing.ClassVar['AcquisitionMode'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'AcquisitionMode': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'AcquisitionMode': ...
    @staticmethod
    def values() -> typing.List['AcquisitionMode']: ...

class ArcType(java.lang.Enum['ArcType'], Enumeration):
    HG: typing.ClassVar['ArcType'] = ...
    XE: typing.ClassVar['ArcType'] = ...
    HGXE: typing.ClassVar['ArcType'] = ...
    OTHER: typing.ClassVar['ArcType'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'ArcType': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'ArcType': ...
    @staticmethod
    def values() -> typing.List['ArcType']: ...

class Binning(java.lang.Enum['Binning'], Enumeration):
    ONEBYONE: typing.ClassVar['Binning'] = ...
    TWOBYTWO: typing.ClassVar['Binning'] = ...
    FOURBYFOUR: typing.ClassVar['Binning'] = ...
    EIGHTBYEIGHT: typing.ClassVar['Binning'] = ...
    OTHER: typing.ClassVar['Binning'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'Binning': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'Binning': ...
    @staticmethod
    def values() -> typing.List['Binning']: ...

class Compression(java.lang.Enum['Compression'], Enumeration):
    ZLIB: typing.ClassVar['Compression'] = ...
    BZIP2: typing.ClassVar['Compression'] = ...
    NONE: typing.ClassVar['Compression'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'Compression': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'Compression': ...
    @staticmethod
    def values() -> typing.List['Compression']: ...

class ContrastMethod(java.lang.Enum['ContrastMethod'], Enumeration):
    BRIGHTFIELD: typing.ClassVar['ContrastMethod'] = ...
    PHASE: typing.ClassVar['ContrastMethod'] = ...
    DIC: typing.ClassVar['ContrastMethod'] = ...
    HOFFMANMODULATION: typing.ClassVar['ContrastMethod'] = ...
    OBLIQUEILLUMINATION: typing.ClassVar['ContrastMethod'] = ...
    POLARIZEDLIGHT: typing.ClassVar['ContrastMethod'] = ...
    DARKFIELD: typing.ClassVar['ContrastMethod'] = ...
    FLUORESCENCE: typing.ClassVar['ContrastMethod'] = ...
    OTHER: typing.ClassVar['ContrastMethod'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'ContrastMethod': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'ContrastMethod': ...
    @staticmethod
    def values() -> typing.List['ContrastMethod']: ...

class Correction(java.lang.Enum['Correction'], Enumeration):
    UV: typing.ClassVar['Correction'] = ...
    PLANAPO: typing.ClassVar['Correction'] = ...
    PLANFLUOR: typing.ClassVar['Correction'] = ...
    SUPERFLUOR: typing.ClassVar['Correction'] = ...
    VIOLETCORRECTED: typing.ClassVar['Correction'] = ...
    ACHRO: typing.ClassVar['Correction'] = ...
    ACHROMAT: typing.ClassVar['Correction'] = ...
    FLUOR: typing.ClassVar['Correction'] = ...
    FL: typing.ClassVar['Correction'] = ...
    FLUAR: typing.ClassVar['Correction'] = ...
    NEOFLUAR: typing.ClassVar['Correction'] = ...
    FLUOTAR: typing.ClassVar['Correction'] = ...
    APO: typing.ClassVar['Correction'] = ...
    PLANNEOFLUAR: typing.ClassVar['Correction'] = ...
    OTHER: typing.ClassVar['Correction'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'Correction': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'Correction': ...
    @staticmethod
    def values() -> typing.List['Correction']: ...

class DetectorType(java.lang.Enum['DetectorType'], Enumeration):
    CCD: typing.ClassVar['DetectorType'] = ...
    INTENSIFIEDCCD: typing.ClassVar['DetectorType'] = ...
    ANALOGVIDEO: typing.ClassVar['DetectorType'] = ...
    PMT: typing.ClassVar['DetectorType'] = ...
    PHOTODIODE: typing.ClassVar['DetectorType'] = ...
    SPECTROSCOPY: typing.ClassVar['DetectorType'] = ...
    LIFETIMEIMAGING: typing.ClassVar['DetectorType'] = ...
    CORRELATIONSPECTROSCOPY: typing.ClassVar['DetectorType'] = ...
    FTIR: typing.ClassVar['DetectorType'] = ...
    EMCCD: typing.ClassVar['DetectorType'] = ...
    APD: typing.ClassVar['DetectorType'] = ...
    CMOS: typing.ClassVar['DetectorType'] = ...
    EBCCD: typing.ClassVar['DetectorType'] = ...
    OTHER: typing.ClassVar['DetectorType'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'DetectorType': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'DetectorType': ...
    @staticmethod
    def values() -> typing.List['DetectorType']: ...

class DimensionOrder(java.lang.Enum['DimensionOrder'], Enumeration):
    XYZCT: typing.ClassVar['DimensionOrder'] = ...
    XYZTC: typing.ClassVar['DimensionOrder'] = ...
    XYCTZ: typing.ClassVar['DimensionOrder'] = ...
    XYCZT: typing.ClassVar['DimensionOrder'] = ...
    XYTCZ: typing.ClassVar['DimensionOrder'] = ...
    XYTZC: typing.ClassVar['DimensionOrder'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'DimensionOrder': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'DimensionOrder': ...
    @staticmethod
    def values() -> typing.List['DimensionOrder']: ...

class ExperimentType(java.lang.Enum['ExperimentType'], Enumeration):
    FP: typing.ClassVar['ExperimentType'] = ...
    FRET: typing.ClassVar['ExperimentType'] = ...
    TIMELAPSE: typing.ClassVar['ExperimentType'] = ...
    FOURDPLUS: typing.ClassVar['ExperimentType'] = ...
    SCREEN: typing.ClassVar['ExperimentType'] = ...
    IMMUNOCYTOCHEMISTRY: typing.ClassVar['ExperimentType'] = ...
    IMMUNOFLUORESCENCE: typing.ClassVar['ExperimentType'] = ...
    FISH: typing.ClassVar['ExperimentType'] = ...
    ELECTROPHYSIOLOGY: typing.ClassVar['ExperimentType'] = ...
    IONIMAGING: typing.ClassVar['ExperimentType'] = ...
    COLOCALIZATION: typing.ClassVar['ExperimentType'] = ...
    PGIDOCUMENTATION: typing.ClassVar['ExperimentType'] = ...
    FLUORESCENCELIFETIME: typing.ClassVar['ExperimentType'] = ...
    SPECTRALIMAGING: typing.ClassVar['ExperimentType'] = ...
    PHOTOBLEACHING: typing.ClassVar['ExperimentType'] = ...
    SPIM: typing.ClassVar['ExperimentType'] = ...
    OTHER: typing.ClassVar['ExperimentType'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'ExperimentType': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'ExperimentType': ...
    @staticmethod
    def values() -> typing.List['ExperimentType']: ...

class FilamentType(java.lang.Enum['FilamentType'], Enumeration):
    INCANDESCENT: typing.ClassVar['FilamentType'] = ...
    HALOGEN: typing.ClassVar['FilamentType'] = ...
    OTHER: typing.ClassVar['FilamentType'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'FilamentType': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'FilamentType': ...
    @staticmethod
    def values() -> typing.List['FilamentType']: ...

class FillRule(java.lang.Enum['FillRule'], Enumeration):
    EVENODD: typing.ClassVar['FillRule'] = ...
    NONZERO: typing.ClassVar['FillRule'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'FillRule': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'FillRule': ...
    @staticmethod
    def values() -> typing.List['FillRule']: ...

class FilterType(java.lang.Enum['FilterType'], Enumeration):
    DICHROIC: typing.ClassVar['FilterType'] = ...
    LONGPASS: typing.ClassVar['FilterType'] = ...
    SHORTPASS: typing.ClassVar['FilterType'] = ...
    BANDPASS: typing.ClassVar['FilterType'] = ...
    MULTIPASS: typing.ClassVar['FilterType'] = ...
    NEUTRALDENSITY: typing.ClassVar['FilterType'] = ...
    TUNEABLE: typing.ClassVar['FilterType'] = ...
    OTHER: typing.ClassVar['FilterType'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'FilterType': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'FilterType': ...
    @staticmethod
    def values() -> typing.List['FilterType']: ...

class FontFamily(java.lang.Enum['FontFamily'], Enumeration):
    SERIF: typing.ClassVar['FontFamily'] = ...
    SANSSERIF: typing.ClassVar['FontFamily'] = ...
    CURSIVE: typing.ClassVar['FontFamily'] = ...
    FANTASY: typing.ClassVar['FontFamily'] = ...
    MONOSPACE: typing.ClassVar['FontFamily'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'FontFamily': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'FontFamily': ...
    @staticmethod
    def values() -> typing.List['FontFamily']: ...

class FontStyle(java.lang.Enum['FontStyle'], Enumeration):
    BOLD: typing.ClassVar['FontStyle'] = ...
    BOLDITALIC: typing.ClassVar['FontStyle'] = ...
    ITALIC: typing.ClassVar['FontStyle'] = ...
    NORMAL: typing.ClassVar['FontStyle'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'FontStyle': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'FontStyle': ...
    @staticmethod
    def values() -> typing.List['FontStyle']: ...

class IlluminationType(java.lang.Enum['IlluminationType'], Enumeration):
    TRANSMITTED: typing.ClassVar['IlluminationType'] = ...
    EPIFLUORESCENCE: typing.ClassVar['IlluminationType'] = ...
    OBLIQUE: typing.ClassVar['IlluminationType'] = ...
    NONLINEAR: typing.ClassVar['IlluminationType'] = ...
    OTHER: typing.ClassVar['IlluminationType'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'IlluminationType': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'IlluminationType': ...
    @staticmethod
    def values() -> typing.List['IlluminationType']: ...

class Immersion(java.lang.Enum['Immersion'], Enumeration):
    OIL: typing.ClassVar['Immersion'] = ...
    WATER: typing.ClassVar['Immersion'] = ...
    WATERDIPPING: typing.ClassVar['Immersion'] = ...
    AIR: typing.ClassVar['Immersion'] = ...
    MULTI: typing.ClassVar['Immersion'] = ...
    GLYCEROL: typing.ClassVar['Immersion'] = ...
    OTHER: typing.ClassVar['Immersion'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'Immersion': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'Immersion': ...
    @staticmethod
    def values() -> typing.List['Immersion']: ...

class LaserMedium(java.lang.Enum['LaserMedium'], Enumeration):
    CU: typing.ClassVar['LaserMedium'] = ...
    AG: typing.ClassVar['LaserMedium'] = ...
    ARFL: typing.ClassVar['LaserMedium'] = ...
    ARCL: typing.ClassVar['LaserMedium'] = ...
    KRFL: typing.ClassVar['LaserMedium'] = ...
    KRCL: typing.ClassVar['LaserMedium'] = ...
    XEFL: typing.ClassVar['LaserMedium'] = ...
    XECL: typing.ClassVar['LaserMedium'] = ...
    XEBR: typing.ClassVar['LaserMedium'] = ...
    N: typing.ClassVar['LaserMedium'] = ...
    AR: typing.ClassVar['LaserMedium'] = ...
    KR: typing.ClassVar['LaserMedium'] = ...
    XE: typing.ClassVar['LaserMedium'] = ...
    HENE: typing.ClassVar['LaserMedium'] = ...
    HECD: typing.ClassVar['LaserMedium'] = ...
    CO: typing.ClassVar['LaserMedium'] = ...
    CO2: typing.ClassVar['LaserMedium'] = ...
    H2O: typing.ClassVar['LaserMedium'] = ...
    HFL: typing.ClassVar['LaserMedium'] = ...
    NDGLASS: typing.ClassVar['LaserMedium'] = ...
    NDYAG: typing.ClassVar['LaserMedium'] = ...
    ERGLASS: typing.ClassVar['LaserMedium'] = ...
    ERYAG: typing.ClassVar['LaserMedium'] = ...
    HOYLF: typing.ClassVar['LaserMedium'] = ...
    HOYAG: typing.ClassVar['LaserMedium'] = ...
    RUBY: typing.ClassVar['LaserMedium'] = ...
    TISAPPHIRE: typing.ClassVar['LaserMedium'] = ...
    ALEXANDRITE: typing.ClassVar['LaserMedium'] = ...
    RHODAMINE6G: typing.ClassVar['LaserMedium'] = ...
    COUMARINC30: typing.ClassVar['LaserMedium'] = ...
    GAAS: typing.ClassVar['LaserMedium'] = ...
    GAALAS: typing.ClassVar['LaserMedium'] = ...
    EMINUS: typing.ClassVar['LaserMedium'] = ...
    OTHER: typing.ClassVar['LaserMedium'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'LaserMedium': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'LaserMedium': ...
    @staticmethod
    def values() -> typing.List['LaserMedium']: ...

class LaserType(java.lang.Enum['LaserType'], Enumeration):
    EXCIMER: typing.ClassVar['LaserType'] = ...
    GAS: typing.ClassVar['LaserType'] = ...
    METALVAPOR: typing.ClassVar['LaserType'] = ...
    SOLIDSTATE: typing.ClassVar['LaserType'] = ...
    DYE: typing.ClassVar['LaserType'] = ...
    SEMICONDUCTOR: typing.ClassVar['LaserType'] = ...
    FREEELECTRON: typing.ClassVar['LaserType'] = ...
    OTHER: typing.ClassVar['LaserType'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'LaserType': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'LaserType': ...
    @staticmethod
    def values() -> typing.List['LaserType']: ...

class Marker(java.lang.Enum['Marker'], Enumeration):
    ARROW: typing.ClassVar['Marker'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'Marker': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'Marker': ...
    @staticmethod
    def values() -> typing.List['Marker']: ...

class Medium(java.lang.Enum['Medium'], Enumeration):
    AIR: typing.ClassVar['Medium'] = ...
    OIL: typing.ClassVar['Medium'] = ...
    WATER: typing.ClassVar['Medium'] = ...
    GLYCEROL: typing.ClassVar['Medium'] = ...
    OTHER: typing.ClassVar['Medium'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'Medium': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'Medium': ...
    @staticmethod
    def values() -> typing.List['Medium']: ...

class MicrobeamManipulationType(java.lang.Enum['MicrobeamManipulationType'], Enumeration):
    FRAP: typing.ClassVar['MicrobeamManipulationType'] = ...
    FLIP: typing.ClassVar['MicrobeamManipulationType'] = ...
    INVERSEFRAP: typing.ClassVar['MicrobeamManipulationType'] = ...
    PHOTOABLATION: typing.ClassVar['MicrobeamManipulationType'] = ...
    PHOTOACTIVATION: typing.ClassVar['MicrobeamManipulationType'] = ...
    UNCAGING: typing.ClassVar['MicrobeamManipulationType'] = ...
    OPTICALTRAPPING: typing.ClassVar['MicrobeamManipulationType'] = ...
    OTHER: typing.ClassVar['MicrobeamManipulationType'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'MicrobeamManipulationType': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'MicrobeamManipulationType': ...
    @staticmethod
    def values() -> typing.List['MicrobeamManipulationType']: ...

class MicroscopeType(java.lang.Enum['MicroscopeType'], Enumeration):
    UPRIGHT: typing.ClassVar['MicroscopeType'] = ...
    INVERTED: typing.ClassVar['MicroscopeType'] = ...
    DISSECTION: typing.ClassVar['MicroscopeType'] = ...
    ELECTROPHYSIOLOGY: typing.ClassVar['MicroscopeType'] = ...
    OTHER: typing.ClassVar['MicroscopeType'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'MicroscopeType': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'MicroscopeType': ...
    @staticmethod
    def values() -> typing.List['MicroscopeType']: ...

class NamingConvention(java.lang.Enum['NamingConvention'], Enumeration):
    LETTER: typing.ClassVar['NamingConvention'] = ...
    NUMBER: typing.ClassVar['NamingConvention'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'NamingConvention': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'NamingConvention': ...
    @staticmethod
    def values() -> typing.List['NamingConvention']: ...

class PixelType(java.lang.Enum['PixelType'], Enumeration):
    INT8: typing.ClassVar['PixelType'] = ...
    INT16: typing.ClassVar['PixelType'] = ...
    INT32: typing.ClassVar['PixelType'] = ...
    UINT8: typing.ClassVar['PixelType'] = ...
    UINT16: typing.ClassVar['PixelType'] = ...
    UINT32: typing.ClassVar['PixelType'] = ...
    FLOAT: typing.ClassVar['PixelType'] = ...
    DOUBLE: typing.ClassVar['PixelType'] = ...
    COMPLEXFLOAT: typing.ClassVar['PixelType'] = ...
    COMPLEXDOUBLE: typing.ClassVar['PixelType'] = ...
    BIT: typing.ClassVar['PixelType'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'PixelType': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'PixelType': ...
    @staticmethod
    def values() -> typing.List['PixelType']: ...

class Pulse(java.lang.Enum['Pulse'], Enumeration):
    CW: typing.ClassVar['Pulse'] = ...
    SINGLE: typing.ClassVar['Pulse'] = ...
    QSWITCHED: typing.ClassVar['Pulse'] = ...
    REPETITIVE: typing.ClassVar['Pulse'] = ...
    MODELOCKED: typing.ClassVar['Pulse'] = ...
    OTHER: typing.ClassVar['Pulse'] = ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'Pulse': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'Pulse': ...
    @staticmethod
    def values() -> typing.List['Pulse']: ...

class UnitsElectricPotential(java.lang.Enum['UnitsElectricPotential'], Enumeration):
    YOTTAVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    ZETTAVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    EXAVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    PETAVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    TERAVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    GIGAVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    MEGAVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    KILOVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    HECTOVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    DECAVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    VOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    DECIVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    CENTIVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    MILLIVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    MICROVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    NANOVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    PICOVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    FEMTOVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    ATTOVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    ZEPTOVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    YOCTOVOLT: typing.ClassVar['UnitsElectricPotential'] = ...
    _create_0__T = typing.TypeVar('_create_0__T', bound=java.lang.Number)  # <T>
    _create_1__T = typing.TypeVar('_create_1__T', bound=ome.xml.model.primitives.PrimitiveNumber)  # <T>
    @typing.overload
    @staticmethod
    def create(t: _create_0__T, unitsElectricPotential: 'UnitsElectricPotential') -> bioformats_jar._ome.units.quantity.ElectricPotential: ...
    @typing.overload
    @staticmethod
    def create(t: _create_1__T, unitsElectricPotential: 'UnitsElectricPotential') -> bioformats_jar._ome.units.quantity.ElectricPotential: ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'UnitsElectricPotential': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'UnitsElectricPotential': ...
    @staticmethod
    def values() -> typing.List['UnitsElectricPotential']: ...

class UnitsFrequency(java.lang.Enum['UnitsFrequency'], Enumeration):
    YOTTAHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    ZETTAHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    EXAHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    PETAHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    TERAHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    GIGAHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    MEGAHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    KILOHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    HECTOHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    DECAHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    HERTZ: typing.ClassVar['UnitsFrequency'] = ...
    DECIHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    CENTIHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    MILLIHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    MICROHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    NANOHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    PICOHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    FEMTOHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    ATTOHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    ZEPTOHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    YOCTOHERTZ: typing.ClassVar['UnitsFrequency'] = ...
    _create_0__T = typing.TypeVar('_create_0__T', bound=java.lang.Number)  # <T>
    _create_1__T = typing.TypeVar('_create_1__T', bound=ome.xml.model.primitives.PrimitiveNumber)  # <T>
    @typing.overload
    @staticmethod
    def create(t: _create_0__T, unitsFrequency: 'UnitsFrequency') -> bioformats_jar._ome.units.quantity.Frequency: ...
    @typing.overload
    @staticmethod
    def create(t: _create_1__T, unitsFrequency: 'UnitsFrequency') -> bioformats_jar._ome.units.quantity.Frequency: ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'UnitsFrequency': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'UnitsFrequency': ...
    @staticmethod
    def values() -> typing.List['UnitsFrequency']: ...

class UnitsLength(java.lang.Enum['UnitsLength'], Enumeration):
    YOTTAMETER: typing.ClassVar['UnitsLength'] = ...
    ZETTAMETER: typing.ClassVar['UnitsLength'] = ...
    EXAMETER: typing.ClassVar['UnitsLength'] = ...
    PETAMETER: typing.ClassVar['UnitsLength'] = ...
    TERAMETER: typing.ClassVar['UnitsLength'] = ...
    GIGAMETER: typing.ClassVar['UnitsLength'] = ...
    MEGAMETER: typing.ClassVar['UnitsLength'] = ...
    KILOMETER: typing.ClassVar['UnitsLength'] = ...
    HECTOMETER: typing.ClassVar['UnitsLength'] = ...
    DECAMETER: typing.ClassVar['UnitsLength'] = ...
    METER: typing.ClassVar['UnitsLength'] = ...
    DECIMETER: typing.ClassVar['UnitsLength'] = ...
    CENTIMETER: typing.ClassVar['UnitsLength'] = ...
    MILLIMETER: typing.ClassVar['UnitsLength'] = ...
    MICROMETER: typing.ClassVar['UnitsLength'] = ...
    NANOMETER: typing.ClassVar['UnitsLength'] = ...
    PICOMETER: typing.ClassVar['UnitsLength'] = ...
    FEMTOMETER: typing.ClassVar['UnitsLength'] = ...
    ATTOMETER: typing.ClassVar['UnitsLength'] = ...
    ZEPTOMETER: typing.ClassVar['UnitsLength'] = ...
    YOCTOMETER: typing.ClassVar['UnitsLength'] = ...
    ANGSTROM: typing.ClassVar['UnitsLength'] = ...
    THOU: typing.ClassVar['UnitsLength'] = ...
    LINE: typing.ClassVar['UnitsLength'] = ...
    INCH: typing.ClassVar['UnitsLength'] = ...
    FOOT: typing.ClassVar['UnitsLength'] = ...
    YARD: typing.ClassVar['UnitsLength'] = ...
    MILE: typing.ClassVar['UnitsLength'] = ...
    ASTRONOMICALUNIT: typing.ClassVar['UnitsLength'] = ...
    LIGHTYEAR: typing.ClassVar['UnitsLength'] = ...
    PARSEC: typing.ClassVar['UnitsLength'] = ...
    POINT: typing.ClassVar['UnitsLength'] = ...
    PIXEL: typing.ClassVar['UnitsLength'] = ...
    REFERENCEFRAME: typing.ClassVar['UnitsLength'] = ...
    _create_0__T = typing.TypeVar('_create_0__T', bound=java.lang.Number)  # <T>
    _create_1__T = typing.TypeVar('_create_1__T', bound=ome.xml.model.primitives.PrimitiveNumber)  # <T>
    @typing.overload
    @staticmethod
    def create(t: _create_0__T, unitsLength: 'UnitsLength') -> bioformats_jar._ome.units.quantity.Length: ...
    @typing.overload
    @staticmethod
    def create(t: _create_1__T, unitsLength: 'UnitsLength') -> bioformats_jar._ome.units.quantity.Length: ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'UnitsLength': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'UnitsLength': ...
    @staticmethod
    def values() -> typing.List['UnitsLength']: ...

class UnitsPower(java.lang.Enum['UnitsPower'], Enumeration):
    YOTTAWATT: typing.ClassVar['UnitsPower'] = ...
    ZETTAWATT: typing.ClassVar['UnitsPower'] = ...
    EXAWATT: typing.ClassVar['UnitsPower'] = ...
    PETAWATT: typing.ClassVar['UnitsPower'] = ...
    TERAWATT: typing.ClassVar['UnitsPower'] = ...
    GIGAWATT: typing.ClassVar['UnitsPower'] = ...
    MEGAWATT: typing.ClassVar['UnitsPower'] = ...
    KILOWATT: typing.ClassVar['UnitsPower'] = ...
    HECTOWATT: typing.ClassVar['UnitsPower'] = ...
    DECAWATT: typing.ClassVar['UnitsPower'] = ...
    WATT: typing.ClassVar['UnitsPower'] = ...
    DECIWATT: typing.ClassVar['UnitsPower'] = ...
    CENTIWATT: typing.ClassVar['UnitsPower'] = ...
    MILLIWATT: typing.ClassVar['UnitsPower'] = ...
    MICROWATT: typing.ClassVar['UnitsPower'] = ...
    NANOWATT: typing.ClassVar['UnitsPower'] = ...
    PICOWATT: typing.ClassVar['UnitsPower'] = ...
    FEMTOWATT: typing.ClassVar['UnitsPower'] = ...
    ATTOWATT: typing.ClassVar['UnitsPower'] = ...
    ZEPTOWATT: typing.ClassVar['UnitsPower'] = ...
    YOCTOWATT: typing.ClassVar['UnitsPower'] = ...
    _create_0__T = typing.TypeVar('_create_0__T', bound=java.lang.Number)  # <T>
    _create_1__T = typing.TypeVar('_create_1__T', bound=ome.xml.model.primitives.PrimitiveNumber)  # <T>
    @typing.overload
    @staticmethod
    def create(t: _create_0__T, unitsPower: 'UnitsPower') -> bioformats_jar._ome.units.quantity.Power: ...
    @typing.overload
    @staticmethod
    def create(t: _create_1__T, unitsPower: 'UnitsPower') -> bioformats_jar._ome.units.quantity.Power: ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'UnitsPower': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'UnitsPower': ...
    @staticmethod
    def values() -> typing.List['UnitsPower']: ...

class UnitsPressure(java.lang.Enum['UnitsPressure'], Enumeration):
    YOTTAPASCAL: typing.ClassVar['UnitsPressure'] = ...
    ZETTAPASCAL: typing.ClassVar['UnitsPressure'] = ...
    EXAPASCAL: typing.ClassVar['UnitsPressure'] = ...
    PETAPASCAL: typing.ClassVar['UnitsPressure'] = ...
    TERAPASCAL: typing.ClassVar['UnitsPressure'] = ...
    GIGAPASCAL: typing.ClassVar['UnitsPressure'] = ...
    MEGAPASCAL: typing.ClassVar['UnitsPressure'] = ...
    KILOPASCAL: typing.ClassVar['UnitsPressure'] = ...
    HECTOPASCAL: typing.ClassVar['UnitsPressure'] = ...
    DECAPASCAL: typing.ClassVar['UnitsPressure'] = ...
    PASCAL: typing.ClassVar['UnitsPressure'] = ...
    DECIPASCAL: typing.ClassVar['UnitsPressure'] = ...
    CENTIPASCAL: typing.ClassVar['UnitsPressure'] = ...
    MILLIPASCAL: typing.ClassVar['UnitsPressure'] = ...
    MICROPASCAL: typing.ClassVar['UnitsPressure'] = ...
    NANOPASCAL: typing.ClassVar['UnitsPressure'] = ...
    PICOPASCAL: typing.ClassVar['UnitsPressure'] = ...
    FEMTOPASCAL: typing.ClassVar['UnitsPressure'] = ...
    ATTOPASCAL: typing.ClassVar['UnitsPressure'] = ...
    ZEPTOPASCAL: typing.ClassVar['UnitsPressure'] = ...
    YOCTOPASCAL: typing.ClassVar['UnitsPressure'] = ...
    BAR: typing.ClassVar['UnitsPressure'] = ...
    MEGABAR: typing.ClassVar['UnitsPressure'] = ...
    KILOBAR: typing.ClassVar['UnitsPressure'] = ...
    DECIBAR: typing.ClassVar['UnitsPressure'] = ...
    CENTIBAR: typing.ClassVar['UnitsPressure'] = ...
    MILLIBAR: typing.ClassVar['UnitsPressure'] = ...
    ATMOSPHERE: typing.ClassVar['UnitsPressure'] = ...
    PSI: typing.ClassVar['UnitsPressure'] = ...
    TORR: typing.ClassVar['UnitsPressure'] = ...
    MILLITORR: typing.ClassVar['UnitsPressure'] = ...
    MMHG: typing.ClassVar['UnitsPressure'] = ...
    Pascal: typing.ClassVar['UnitsPressure'] = ...
    _create_0__T = typing.TypeVar('_create_0__T', bound=java.lang.Number)  # <T>
    _create_1__T = typing.TypeVar('_create_1__T', bound=ome.xml.model.primitives.PrimitiveNumber)  # <T>
    @typing.overload
    @staticmethod
    def create(t: _create_0__T, unitsPressure: 'UnitsPressure') -> bioformats_jar._ome.units.quantity.Pressure: ...
    @typing.overload
    @staticmethod
    def create(t: _create_1__T, unitsPressure: 'UnitsPressure') -> bioformats_jar._ome.units.quantity.Pressure: ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'UnitsPressure': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'UnitsPressure': ...
    @staticmethod
    def values() -> typing.List['UnitsPressure']: ...

class UnitsTemperature(java.lang.Enum['UnitsTemperature'], Enumeration):
    CELSIUS: typing.ClassVar['UnitsTemperature'] = ...
    FAHRENHEIT: typing.ClassVar['UnitsTemperature'] = ...
    KELVIN: typing.ClassVar['UnitsTemperature'] = ...
    RANKINE: typing.ClassVar['UnitsTemperature'] = ...
    _create_0__T = typing.TypeVar('_create_0__T', bound=java.lang.Number)  # <T>
    _create_1__T = typing.TypeVar('_create_1__T', bound=ome.xml.model.primitives.PrimitiveNumber)  # <T>
    @typing.overload
    @staticmethod
    def create(t: _create_0__T, unitsTemperature: 'UnitsTemperature') -> bioformats_jar._ome.units.quantity.Temperature: ...
    @typing.overload
    @staticmethod
    def create(t: _create_1__T, unitsTemperature: 'UnitsTemperature') -> bioformats_jar._ome.units.quantity.Temperature: ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'UnitsTemperature': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'UnitsTemperature': ...
    @staticmethod
    def values() -> typing.List['UnitsTemperature']: ...

class UnitsTime(java.lang.Enum['UnitsTime'], Enumeration):
    YOTTASECOND: typing.ClassVar['UnitsTime'] = ...
    ZETTASECOND: typing.ClassVar['UnitsTime'] = ...
    EXASECOND: typing.ClassVar['UnitsTime'] = ...
    PETASECOND: typing.ClassVar['UnitsTime'] = ...
    TERASECOND: typing.ClassVar['UnitsTime'] = ...
    GIGASECOND: typing.ClassVar['UnitsTime'] = ...
    MEGASECOND: typing.ClassVar['UnitsTime'] = ...
    KILOSECOND: typing.ClassVar['UnitsTime'] = ...
    HECTOSECOND: typing.ClassVar['UnitsTime'] = ...
    DECASECOND: typing.ClassVar['UnitsTime'] = ...
    SECOND: typing.ClassVar['UnitsTime'] = ...
    DECISECOND: typing.ClassVar['UnitsTime'] = ...
    CENTISECOND: typing.ClassVar['UnitsTime'] = ...
    MILLISECOND: typing.ClassVar['UnitsTime'] = ...
    MICROSECOND: typing.ClassVar['UnitsTime'] = ...
    NANOSECOND: typing.ClassVar['UnitsTime'] = ...
    PICOSECOND: typing.ClassVar['UnitsTime'] = ...
    FEMTOSECOND: typing.ClassVar['UnitsTime'] = ...
    ATTOSECOND: typing.ClassVar['UnitsTime'] = ...
    ZEPTOSECOND: typing.ClassVar['UnitsTime'] = ...
    YOCTOSECOND: typing.ClassVar['UnitsTime'] = ...
    MINUTE: typing.ClassVar['UnitsTime'] = ...
    HOUR: typing.ClassVar['UnitsTime'] = ...
    DAY: typing.ClassVar['UnitsTime'] = ...
    _create_0__T = typing.TypeVar('_create_0__T', bound=java.lang.Number)  # <T>
    _create_1__T = typing.TypeVar('_create_1__T', bound=ome.xml.model.primitives.PrimitiveNumber)  # <T>
    @typing.overload
    @staticmethod
    def create(t: _create_0__T, unitsTime: 'UnitsTime') -> bioformats_jar._ome.units.quantity.Time: ...
    @typing.overload
    @staticmethod
    def create(t: _create_1__T, unitsTime: 'UnitsTime') -> bioformats_jar._ome.units.quantity.Time: ...
    @staticmethod
    def fromString(string: typing.Union[java.lang.String, str]) -> 'UnitsTime': ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'UnitsTime': ...
    @staticmethod
    def values() -> typing.List['UnitsTime']: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("ome.xml.model.enums")``.

    AcquisitionMode: typing.Type[AcquisitionMode]
    ArcType: typing.Type[ArcType]
    Binning: typing.Type[Binning]
    Compression: typing.Type[Compression]
    ContrastMethod: typing.Type[ContrastMethod]
    Correction: typing.Type[Correction]
    DetectorType: typing.Type[DetectorType]
    DimensionOrder: typing.Type[DimensionOrder]
    Enumeration: typing.Type[Enumeration]
    EnumerationException: typing.Type[EnumerationException]
    ExperimentType: typing.Type[ExperimentType]
    FilamentType: typing.Type[FilamentType]
    FillRule: typing.Type[FillRule]
    FilterType: typing.Type[FilterType]
    FontFamily: typing.Type[FontFamily]
    FontStyle: typing.Type[FontStyle]
    IlluminationType: typing.Type[IlluminationType]
    Immersion: typing.Type[Immersion]
    LaserMedium: typing.Type[LaserMedium]
    LaserType: typing.Type[LaserType]
    Marker: typing.Type[Marker]
    Medium: typing.Type[Medium]
    MicrobeamManipulationType: typing.Type[MicrobeamManipulationType]
    MicroscopeType: typing.Type[MicroscopeType]
    NamingConvention: typing.Type[NamingConvention]
    PixelType: typing.Type[PixelType]
    Pulse: typing.Type[Pulse]
    UnitsElectricPotential: typing.Type[UnitsElectricPotential]
    UnitsFrequency: typing.Type[UnitsFrequency]
    UnitsLength: typing.Type[UnitsLength]
    UnitsPower: typing.Type[UnitsPower]
    UnitsPressure: typing.Type[UnitsPressure]
    UnitsTemperature: typing.Type[UnitsTemperature]
    UnitsTime: typing.Type[UnitsTime]
    handlers: bioformats_jar._ome.xml.model.enums.handlers.__module_protocol__
