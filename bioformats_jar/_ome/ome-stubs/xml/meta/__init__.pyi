import java.lang
import java.util
import bioformats_jar._ome.units.quantity
import bioformats_jar._ome.xml.model
import bioformats_jar._ome.xml.model.enums
import bioformats_jar._ome.xml.model.primitives
import org.w3c.dom
import typing



class BaseMetadata: ...

class MetadataRoot: ...

class MetadataRetrieve(BaseMetadata):
    def getArcAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getArcID(self, int: int, int2: int) -> java.lang.String: ...
    def getArcLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getArcManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getArcModel(self, int: int, int2: int) -> java.lang.String: ...
    def getArcPower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getArcSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getArcType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.ArcType: ...
    def getBinaryFileBinData(self, int: int) -> typing.List[int]: ...
    def getBinaryFileBinDataBigEndian(self, int: int) -> bool: ...
    def getBinaryFileBinDataCompression(self, int: int) -> bioformats_jar._ome.xml.model.enums.Compression: ...
    def getBinaryFileBinDataLength(self, int: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeLong: ...
    def getBinaryFileFileName(self, int: int) -> java.lang.String: ...
    def getBinaryFileMIMEType(self, int: int) -> java.lang.String: ...
    def getBinaryFileSize(self, int: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeLong: ...
    def getBinaryOnlyMetadataFile(self) -> java.lang.String: ...
    def getBinaryOnlyUUID(self) -> java.lang.String: ...
    def getBooleanAnnotationAnnotationCount(self, int: int) -> int: ...
    def getBooleanAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getBooleanAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getBooleanAnnotationCount(self) -> int: ...
    def getBooleanAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getBooleanAnnotationID(self, int: int) -> java.lang.String: ...
    def getBooleanAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getBooleanAnnotationValue(self, int: int) -> bool: ...
    def getChannelAcquisitionMode(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.AcquisitionMode: ...
    def getChannelAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getChannelAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getChannelColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getChannelContrastMethod(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.ContrastMethod: ...
    def getChannelCount(self, int: int) -> int: ...
    def getChannelEmissionWavelength(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getChannelExcitationWavelength(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getChannelFilterSetRef(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelFluor(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelID(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelIlluminationType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.IlluminationType: ...
    def getChannelLightSourceSettingsAttenuation(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getChannelLightSourceSettingsID(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelLightSourceSettingsWavelength(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getChannelNDFilter(self, int: int, int2: int) -> float: ...
    def getChannelName(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelPinholeSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getChannelPockelCellSetting(self, int: int, int2: int) -> int: ...
    def getChannelSamplesPerPixel(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getCommentAnnotationAnnotationCount(self, int: int) -> int: ...
    def getCommentAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getCommentAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getCommentAnnotationCount(self) -> int: ...
    def getCommentAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getCommentAnnotationID(self, int: int) -> java.lang.String: ...
    def getCommentAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getCommentAnnotationValue(self, int: int) -> java.lang.String: ...
    def getCreator(self) -> java.lang.String: ...
    def getDatasetAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getDatasetAnnotationRefCount(self, int: int) -> int: ...
    def getDatasetCount(self) -> int: ...
    def getDatasetDescription(self, int: int) -> java.lang.String: ...
    def getDatasetExperimenterGroupRef(self, int: int) -> java.lang.String: ...
    def getDatasetExperimenterRef(self, int: int) -> java.lang.String: ...
    def getDatasetID(self, int: int) -> java.lang.String: ...
    def getDatasetImageRef(self, int: int, int2: int) -> java.lang.String: ...
    def getDatasetImageRefCount(self, int: int) -> int: ...
    def getDatasetName(self, int: int) -> java.lang.String: ...
    def getDatasetRefCount(self, int: int) -> int: ...
    def getDetectorAmplificationGain(self, int: int, int2: int) -> float: ...
    def getDetectorAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getDetectorAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getDetectorCount(self, int: int) -> int: ...
    def getDetectorGain(self, int: int, int2: int) -> float: ...
    def getDetectorID(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorModel(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorOffset(self, int: int, int2: int) -> float: ...
    def getDetectorSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorSettingsBinning(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Binning: ...
    def getDetectorSettingsGain(self, int: int, int2: int) -> float: ...
    def getDetectorSettingsID(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorSettingsIntegration(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getDetectorSettingsOffset(self, int: int, int2: int) -> float: ...
    def getDetectorSettingsReadOutRate(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Frequency: ...
    def getDetectorSettingsVoltage(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.ElectricPotential: ...
    def getDetectorSettingsZoom(self, int: int, int2: int) -> float: ...
    def getDetectorType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.DetectorType: ...
    def getDetectorVoltage(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.ElectricPotential: ...
    def getDetectorZoom(self, int: int, int2: int) -> float: ...
    def getDichroicAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getDichroicAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getDichroicCount(self, int: int) -> int: ...
    def getDichroicID(self, int: int, int2: int) -> java.lang.String: ...
    def getDichroicLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getDichroicManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getDichroicModel(self, int: int, int2: int) -> java.lang.String: ...
    def getDichroicSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getDoubleAnnotationAnnotationCount(self, int: int) -> int: ...
    def getDoubleAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getDoubleAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getDoubleAnnotationCount(self) -> int: ...
    def getDoubleAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getDoubleAnnotationID(self, int: int) -> java.lang.String: ...
    def getDoubleAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getDoubleAnnotationValue(self, int: int) -> float: ...
    def getEllipseAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getEllipseFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getEllipseFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getEllipseFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getEllipseFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getEllipseFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getEllipseID(self, int: int, int2: int) -> java.lang.String: ...
    def getEllipseLocked(self, int: int, int2: int) -> bool: ...
    def getEllipseRadiusX(self, int: int, int2: int) -> float: ...
    def getEllipseRadiusY(self, int: int, int2: int) -> float: ...
    def getEllipseStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getEllipseStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getEllipseStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getEllipseText(self, int: int, int2: int) -> java.lang.String: ...
    def getEllipseTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getEllipseTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getEllipseTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getEllipseTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getEllipseX(self, int: int, int2: int) -> float: ...
    def getEllipseY(self, int: int, int2: int) -> float: ...
    def getExperimentCount(self) -> int: ...
    def getExperimentDescription(self, int: int) -> java.lang.String: ...
    def getExperimentExperimenterRef(self, int: int) -> java.lang.String: ...
    def getExperimentID(self, int: int) -> java.lang.String: ...
    def getExperimentType(self, int: int) -> bioformats_jar._ome.xml.model.enums.ExperimentType: ...
    def getExperimenterAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getExperimenterAnnotationRefCount(self, int: int) -> int: ...
    def getExperimenterCount(self) -> int: ...
    def getExperimenterEmail(self, int: int) -> java.lang.String: ...
    def getExperimenterFirstName(self, int: int) -> java.lang.String: ...
    def getExperimenterGroupAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getExperimenterGroupAnnotationRefCount(self, int: int) -> int: ...
    def getExperimenterGroupCount(self) -> int: ...
    def getExperimenterGroupDescription(self, int: int) -> java.lang.String: ...
    def getExperimenterGroupExperimenterRef(self, int: int, int2: int) -> java.lang.String: ...
    def getExperimenterGroupExperimenterRefCount(self, int: int) -> int: ...
    def getExperimenterGroupID(self, int: int) -> java.lang.String: ...
    def getExperimenterGroupLeader(self, int: int, int2: int) -> java.lang.String: ...
    def getExperimenterGroupName(self, int: int) -> java.lang.String: ...
    def getExperimenterID(self, int: int) -> java.lang.String: ...
    def getExperimenterInstitution(self, int: int) -> java.lang.String: ...
    def getExperimenterLastName(self, int: int) -> java.lang.String: ...
    def getExperimenterMiddleName(self, int: int) -> java.lang.String: ...
    def getExperimenterUserName(self, int: int) -> java.lang.String: ...
    def getFilamentAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getFilamentID(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentModel(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentPower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getFilamentSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FilamentType: ...
    def getFileAnnotationAnnotationCount(self, int: int) -> int: ...
    def getFileAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFileAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getFileAnnotationCount(self) -> int: ...
    def getFileAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getFileAnnotationID(self, int: int) -> java.lang.String: ...
    def getFileAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getFilterAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getFilterAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getFilterCount(self, int: int) -> int: ...
    def getFilterFilterWheel(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterID(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterModel(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetCount(self, int: int) -> int: ...
    def getFilterSetDichroicRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetEmissionFilterRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getFilterSetEmissionFilterRefCount(self, int: int, int2: int) -> int: ...
    def getFilterSetExcitationFilterRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getFilterSetExcitationFilterRefCount(self, int: int, int2: int) -> int: ...
    def getFilterSetID(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetModel(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FilterType: ...
    def getFolderAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFolderAnnotationRefCount(self, int: int) -> int: ...
    def getFolderCount(self) -> int: ...
    def getFolderDescription(self, int: int) -> java.lang.String: ...
    def getFolderFolderRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFolderID(self, int: int) -> java.lang.String: ...
    def getFolderImageRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFolderImageRefCount(self, int: int) -> int: ...
    def getFolderName(self, int: int) -> java.lang.String: ...
    def getFolderROIRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFolderROIRefCount(self, int: int) -> int: ...
    def getFolderRefCount(self, int: int) -> int: ...
    def getGenericExcitationSourceAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getGenericExcitationSourceID(self, int: int, int2: int) -> java.lang.String: ...
    def getGenericExcitationSourceLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getGenericExcitationSourceManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getGenericExcitationSourceMap(self, int: int, int2: int) -> java.util.List[bioformats_jar._ome.xml.model.MapPair]: ...
    def getGenericExcitationSourceModel(self, int: int, int2: int) -> java.lang.String: ...
    def getGenericExcitationSourcePower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getGenericExcitationSourceSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getImageAcquisitionDate(self, int: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getImageAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getImageAnnotationRefCount(self, int: int) -> int: ...
    def getImageCount(self) -> int: ...
    def getImageDescription(self, int: int) -> java.lang.String: ...
    def getImageExperimentRef(self, int: int) -> java.lang.String: ...
    def getImageExperimenterGroupRef(self, int: int) -> java.lang.String: ...
    def getImageExperimenterRef(self, int: int) -> java.lang.String: ...
    def getImageID(self, int: int) -> java.lang.String: ...
    def getImageInstrumentRef(self, int: int) -> java.lang.String: ...
    def getImageMicrobeamManipulationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getImageName(self, int: int) -> java.lang.String: ...
    def getImageROIRef(self, int: int, int2: int) -> java.lang.String: ...
    def getImageROIRefCount(self, int: int) -> int: ...
    def getImagingEnvironmentAirPressure(self, int: int) -> bioformats_jar._ome.units.quantity.Pressure: ...
    def getImagingEnvironmentCO2Percent(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getImagingEnvironmentHumidity(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getImagingEnvironmentMap(self, int: int) -> java.util.List[bioformats_jar._ome.xml.model.MapPair]: ...
    def getImagingEnvironmentTemperature(self, int: int) -> bioformats_jar._ome.units.quantity.Temperature: ...
    def getInstrumentAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getInstrumentAnnotationRefCount(self, int: int) -> int: ...
    def getInstrumentCount(self) -> int: ...
    def getInstrumentID(self, int: int) -> java.lang.String: ...
    def getLabelAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLabelFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getLabelFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getLabelFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getLabelFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLabelFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getLabelID(self, int: int, int2: int) -> java.lang.String: ...
    def getLabelLocked(self, int: int, int2: int) -> bool: ...
    def getLabelStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getLabelStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getLabelStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLabelText(self, int: int, int2: int) -> java.lang.String: ...
    def getLabelTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLabelTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLabelTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLabelTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getLabelX(self, int: int, int2: int) -> float: ...
    def getLabelY(self, int: int, int2: int) -> float: ...
    def getLaserAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLaserFrequencyMultiplication(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getLaserID(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserLaserMedium(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.LaserMedium: ...
    def getLaserLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserModel(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserPockelCell(self, int: int, int2: int) -> bool: ...
    def getLaserPower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getLaserPulse(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Pulse: ...
    def getLaserPump(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserRepetitionRate(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Frequency: ...
    def getLaserSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserTuneable(self, int: int, int2: int) -> bool: ...
    def getLaserType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.LaserType: ...
    def getLaserWavelength(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLeaderCount(self, int: int) -> int: ...
    def getLightEmittingDiodeAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLightEmittingDiodeID(self, int: int, int2: int) -> java.lang.String: ...
    def getLightEmittingDiodeLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getLightEmittingDiodeManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getLightEmittingDiodeModel(self, int: int, int2: int) -> java.lang.String: ...
    def getLightEmittingDiodePower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getLightEmittingDiodeSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getLightPathAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLightPathAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getLightPathDichroicRef(self, int: int, int2: int) -> java.lang.String: ...
    def getLightPathEmissionFilterRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLightPathEmissionFilterRefCount(self, int: int, int2: int) -> int: ...
    def getLightPathExcitationFilterRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLightPathExcitationFilterRefCount(self, int: int, int2: int) -> int: ...
    def getLightSourceAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getLightSourceCount(self, int: int) -> int: ...
    def getLightSourceType(self, int: int, int2: int) -> java.lang.String: ...
    def getLineAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLineFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getLineFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getLineFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getLineFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLineFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getLineID(self, int: int, int2: int) -> java.lang.String: ...
    def getLineLocked(self, int: int, int2: int) -> bool: ...
    def getLineMarkerEnd(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Marker: ...
    def getLineMarkerStart(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Marker: ...
    def getLineStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getLineStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getLineStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLineText(self, int: int, int2: int) -> java.lang.String: ...
    def getLineTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLineTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLineTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLineTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getLineX1(self, int: int, int2: int) -> float: ...
    def getLineX2(self, int: int, int2: int) -> float: ...
    def getLineY1(self, int: int, int2: int) -> float: ...
    def getLineY2(self, int: int, int2: int) -> float: ...
    def getListAnnotationAnnotationCount(self, int: int) -> int: ...
    def getListAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getListAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getListAnnotationCount(self) -> int: ...
    def getListAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getListAnnotationID(self, int: int) -> java.lang.String: ...
    def getListAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getLongAnnotationAnnotationCount(self, int: int) -> int: ...
    def getLongAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getLongAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getLongAnnotationCount(self) -> int: ...
    def getLongAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getLongAnnotationID(self, int: int) -> java.lang.String: ...
    def getLongAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getLongAnnotationValue(self, int: int) -> int: ...
    def getMapAnnotationAnnotationCount(self, int: int) -> int: ...
    def getMapAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getMapAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getMapAnnotationCount(self) -> int: ...
    def getMapAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getMapAnnotationID(self, int: int) -> java.lang.String: ...
    def getMapAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getMapAnnotationValue(self, int: int) -> java.util.List[bioformats_jar._ome.xml.model.MapPair]: ...
    def getMaskAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getMaskBinData(self, int: int, int2: int) -> typing.List[int]: ...
    def getMaskBinDataBigEndian(self, int: int, int2: int) -> bool: ...
    def getMaskBinDataCompression(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Compression: ...
    def getMaskBinDataLength(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeLong: ...
    def getMaskFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getMaskFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getMaskFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getMaskFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getMaskFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getMaskHeight(self, int: int, int2: int) -> float: ...
    def getMaskID(self, int: int, int2: int) -> java.lang.String: ...
    def getMaskLocked(self, int: int, int2: int) -> bool: ...
    def getMaskStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getMaskStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getMaskStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getMaskText(self, int: int, int2: int) -> java.lang.String: ...
    def getMaskTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getMaskTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getMaskTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getMaskTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getMaskWidth(self, int: int, int2: int) -> float: ...
    def getMaskX(self, int: int, int2: int) -> float: ...
    def getMaskY(self, int: int, int2: int) -> float: ...
    def getMicrobeamManipulationCount(self, int: int) -> int: ...
    def getMicrobeamManipulationDescription(self, int: int, int2: int) -> java.lang.String: ...
    def getMicrobeamManipulationExperimenterRef(self, int: int, int2: int) -> java.lang.String: ...
    def getMicrobeamManipulationID(self, int: int, int2: int) -> java.lang.String: ...
    def getMicrobeamManipulationLightSourceSettingsAttenuation(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getMicrobeamManipulationLightSourceSettingsCount(self, int: int, int2: int) -> int: ...
    def getMicrobeamManipulationLightSourceSettingsID(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getMicrobeamManipulationLightSourceSettingsWavelength(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getMicrobeamManipulationROIRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getMicrobeamManipulationROIRefCount(self, int: int, int2: int) -> int: ...
    def getMicrobeamManipulationRefCount(self, int: int) -> int: ...
    def getMicrobeamManipulationType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.MicrobeamManipulationType: ...
    def getMicroscopeLotNumber(self, int: int) -> java.lang.String: ...
    def getMicroscopeManufacturer(self, int: int) -> java.lang.String: ...
    def getMicroscopeModel(self, int: int) -> java.lang.String: ...
    def getMicroscopeSerialNumber(self, int: int) -> java.lang.String: ...
    def getMicroscopeType(self, int: int) -> bioformats_jar._ome.xml.model.enums.MicroscopeType: ...
    def getObjectiveAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getObjectiveAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getObjectiveCalibratedMagnification(self, int: int, int2: int) -> float: ...
    def getObjectiveCorrection(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Correction: ...
    def getObjectiveCount(self, int: int) -> int: ...
    def getObjectiveID(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveImmersion(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Immersion: ...
    def getObjectiveIris(self, int: int, int2: int) -> bool: ...
    def getObjectiveLensNA(self, int: int, int2: int) -> float: ...
    def getObjectiveLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveModel(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveNominalMagnification(self, int: int, int2: int) -> float: ...
    def getObjectiveSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveSettingsCorrectionCollar(self, int: int) -> float: ...
    def getObjectiveSettingsID(self, int: int) -> java.lang.String: ...
    def getObjectiveSettingsMedium(self, int: int) -> bioformats_jar._ome.xml.model.enums.Medium: ...
    def getObjectiveSettingsRefractiveIndex(self, int: int) -> float: ...
    def getObjectiveWorkingDistance(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPixelsBigEndian(self, int: int) -> bool: ...
    def getPixelsBinData(self, int: int, int2: int) -> typing.List[int]: ...
    def getPixelsBinDataBigEndian(self, int: int, int2: int) -> bool: ...
    def getPixelsBinDataCompression(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Compression: ...
    def getPixelsBinDataCount(self, int: int) -> int: ...
    def getPixelsBinDataLength(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeLong: ...
    def getPixelsDimensionOrder(self, int: int) -> bioformats_jar._ome.xml.model.enums.DimensionOrder: ...
    def getPixelsID(self, int: int) -> java.lang.String: ...
    def getPixelsInterleaved(self, int: int) -> bool: ...
    def getPixelsPhysicalSizeX(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPixelsPhysicalSizeY(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPixelsPhysicalSizeZ(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPixelsSignificantBits(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeC(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeT(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeX(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeY(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeZ(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsTimeIncrement(self, int: int) -> bioformats_jar._ome.units.quantity.Time: ...
    def getPixelsType(self, int: int) -> bioformats_jar._ome.xml.model.enums.PixelType: ...
    def getPlaneAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPlaneAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getPlaneCount(self, int: int) -> int: ...
    def getPlaneDeltaT(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Time: ...
    def getPlaneExposureTime(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Time: ...
    def getPlaneHashSHA1(self, int: int, int2: int) -> java.lang.String: ...
    def getPlanePositionX(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPlanePositionY(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPlanePositionZ(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPlaneTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPlaneTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPlaneTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPlateAcquisitionAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPlateAcquisitionAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getPlateAcquisitionCount(self, int: int) -> int: ...
    def getPlateAcquisitionDescription(self, int: int, int2: int) -> java.lang.String: ...
    def getPlateAcquisitionEndTime(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getPlateAcquisitionID(self, int: int, int2: int) -> java.lang.String: ...
    def getPlateAcquisitionMaximumFieldCount(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPlateAcquisitionName(self, int: int, int2: int) -> java.lang.String: ...
    def getPlateAcquisitionStartTime(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getPlateAcquisitionWellSampleRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPlateAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getPlateAnnotationRefCount(self, int: int) -> int: ...
    def getPlateColumnNamingConvention(self, int: int) -> bioformats_jar._ome.xml.model.enums.NamingConvention: ...
    def getPlateColumns(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPlateCount(self) -> int: ...
    def getPlateDescription(self, int: int) -> java.lang.String: ...
    def getPlateExternalIdentifier(self, int: int) -> java.lang.String: ...
    def getPlateFieldIndex(self, int: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPlateID(self, int: int) -> java.lang.String: ...
    def getPlateName(self, int: int) -> java.lang.String: ...
    def getPlateRefCount(self, int: int) -> int: ...
    def getPlateRowNamingConvention(self, int: int) -> bioformats_jar._ome.xml.model.enums.NamingConvention: ...
    def getPlateRows(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPlateStatus(self, int: int) -> java.lang.String: ...
    def getPlateWellOriginX(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPlateWellOriginY(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPointAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPointFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPointFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getPointFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getPointFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPointFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getPointID(self, int: int, int2: int) -> java.lang.String: ...
    def getPointLocked(self, int: int, int2: int) -> bool: ...
    def getPointStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPointStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getPointStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPointText(self, int: int, int2: int) -> java.lang.String: ...
    def getPointTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPointTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPointTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPointTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getPointX(self, int: int, int2: int) -> float: ...
    def getPointY(self, int: int, int2: int) -> float: ...
    def getPolygonAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPolygonFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPolygonFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getPolygonFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getPolygonFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPolygonFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getPolygonID(self, int: int, int2: int) -> java.lang.String: ...
    def getPolygonLocked(self, int: int, int2: int) -> bool: ...
    def getPolygonPoints(self, int: int, int2: int) -> java.lang.String: ...
    def getPolygonStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPolygonStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getPolygonStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPolygonText(self, int: int, int2: int) -> java.lang.String: ...
    def getPolygonTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolygonTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolygonTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolygonTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getPolylineAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPolylineFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPolylineFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getPolylineFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getPolylineFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPolylineFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getPolylineID(self, int: int, int2: int) -> java.lang.String: ...
    def getPolylineLocked(self, int: int, int2: int) -> bool: ...
    def getPolylineMarkerEnd(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Marker: ...
    def getPolylineMarkerStart(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Marker: ...
    def getPolylinePoints(self, int: int, int2: int) -> java.lang.String: ...
    def getPolylineStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPolylineStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getPolylineStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPolylineText(self, int: int, int2: int) -> java.lang.String: ...
    def getPolylineTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolylineTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolylineTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolylineTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getProjectAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getProjectAnnotationRefCount(self, int: int) -> int: ...
    def getProjectCount(self) -> int: ...
    def getProjectDatasetRef(self, int: int, int2: int) -> java.lang.String: ...
    def getProjectDescription(self, int: int) -> java.lang.String: ...
    def getProjectExperimenterGroupRef(self, int: int) -> java.lang.String: ...
    def getProjectExperimenterRef(self, int: int) -> java.lang.String: ...
    def getProjectID(self, int: int) -> java.lang.String: ...
    def getProjectName(self, int: int) -> java.lang.String: ...
    def getROIAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getROIAnnotationRefCount(self, int: int) -> int: ...
    def getROICount(self) -> int: ...
    def getROIDescription(self, int: int) -> java.lang.String: ...
    def getROIID(self, int: int) -> java.lang.String: ...
    def getROIName(self, int: int) -> java.lang.String: ...
    def getReagentAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getReagentAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getReagentCount(self, int: int) -> int: ...
    def getReagentDescription(self, int: int, int2: int) -> java.lang.String: ...
    def getReagentID(self, int: int, int2: int) -> java.lang.String: ...
    def getReagentName(self, int: int, int2: int) -> java.lang.String: ...
    def getReagentReagentIdentifier(self, int: int, int2: int) -> java.lang.String: ...
    def getRectangleAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getRectangleFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getRectangleFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getRectangleFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getRectangleFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getRectangleFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getRectangleHeight(self, int: int, int2: int) -> float: ...
    def getRectangleID(self, int: int, int2: int) -> java.lang.String: ...
    def getRectangleLocked(self, int: int, int2: int) -> bool: ...
    def getRectangleStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getRectangleStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getRectangleStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getRectangleText(self, int: int, int2: int) -> java.lang.String: ...
    def getRectangleTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getRectangleTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getRectangleTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getRectangleTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getRectangleWidth(self, int: int, int2: int) -> float: ...
    def getRectangleX(self, int: int, int2: int) -> float: ...
    def getRectangleY(self, int: int, int2: int) -> float: ...
    def getRightsRightsHeld(self) -> java.lang.String: ...
    def getRightsRightsHolder(self) -> java.lang.String: ...
    def getScreenAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getScreenAnnotationRefCount(self, int: int) -> int: ...
    def getScreenCount(self) -> int: ...
    def getScreenDescription(self, int: int) -> java.lang.String: ...
    def getScreenID(self, int: int) -> java.lang.String: ...
    def getScreenName(self, int: int) -> java.lang.String: ...
    def getScreenPlateRef(self, int: int, int2: int) -> java.lang.String: ...
    def getScreenProtocolDescription(self, int: int) -> java.lang.String: ...
    def getScreenProtocolIdentifier(self, int: int) -> java.lang.String: ...
    def getScreenReagentSetDescription(self, int: int) -> java.lang.String: ...
    def getScreenReagentSetIdentifier(self, int: int) -> java.lang.String: ...
    def getScreenType(self, int: int) -> java.lang.String: ...
    def getShapeAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getShapeCount(self, int: int) -> int: ...
    def getShapeType(self, int: int, int2: int) -> java.lang.String: ...
    def getStageLabelName(self, int: int) -> java.lang.String: ...
    def getStageLabelX(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getStageLabelY(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getStageLabelZ(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTagAnnotationAnnotationCount(self, int: int) -> int: ...
    def getTagAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getTagAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getTagAnnotationCount(self) -> int: ...
    def getTagAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getTagAnnotationID(self, int: int) -> java.lang.String: ...
    def getTagAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getTagAnnotationValue(self, int: int) -> java.lang.String: ...
    def getTermAnnotationAnnotationCount(self, int: int) -> int: ...
    def getTermAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getTermAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getTermAnnotationCount(self) -> int: ...
    def getTermAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getTermAnnotationID(self, int: int) -> java.lang.String: ...
    def getTermAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getTermAnnotationValue(self, int: int) -> java.lang.String: ...
    def getTiffDataCount(self, int: int) -> int: ...
    def getTiffDataFirstC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTiffDataFirstT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTiffDataFirstZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTiffDataIFD(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTiffDataPlaneCount(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTimestampAnnotationAnnotationCount(self, int: int) -> int: ...
    def getTimestampAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getTimestampAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getTimestampAnnotationCount(self) -> int: ...
    def getTimestampAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getTimestampAnnotationID(self, int: int) -> java.lang.String: ...
    def getTimestampAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getTimestampAnnotationValue(self, int: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getTransmittanceRangeCutIn(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTransmittanceRangeCutInTolerance(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTransmittanceRangeCutOut(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTransmittanceRangeCutOutTolerance(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTransmittanceRangeTransmittance(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getUUID(self) -> java.lang.String: ...
    def getUUIDFileName(self, int: int, int2: int) -> java.lang.String: ...
    def getUUIDValue(self, int: int, int2: int) -> java.lang.String: ...
    def getWellAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getWellAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getWellColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getWellColumn(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getWellCount(self, int: int) -> int: ...
    def getWellExternalDescription(self, int: int, int2: int) -> java.lang.String: ...
    def getWellExternalIdentifier(self, int: int, int2: int) -> java.lang.String: ...
    def getWellID(self, int: int, int2: int) -> java.lang.String: ...
    def getWellReagentRef(self, int: int, int2: int) -> java.lang.String: ...
    def getWellRow(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getWellSampleCount(self, int: int, int2: int) -> int: ...
    def getWellSampleID(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getWellSampleImageRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getWellSampleIndex(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getWellSamplePositionX(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getWellSamplePositionY(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getWellSampleRefCount(self, int: int, int2: int) -> int: ...
    def getWellSampleTimepoint(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getWellType(self, int: int, int2: int) -> java.lang.String: ...
    def getXMLAnnotationAnnotationCount(self, int: int) -> int: ...
    def getXMLAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getXMLAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getXMLAnnotationCount(self) -> int: ...
    def getXMLAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getXMLAnnotationID(self, int: int) -> java.lang.String: ...
    def getXMLAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getXMLAnnotationValue(self, int: int) -> java.lang.String: ...

class MetadataStore(BaseMetadata):
    def createRoot(self) -> None: ...
    def getRoot(self) -> MetadataRoot: ...
    def setArcAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setArcID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcPower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setArcSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcType(self, arcType: bioformats_jar._ome.xml.model.enums.ArcType, int: int, int2: int) -> None: ...
    def setBinaryFileBinData(self, byteArray: typing.List[int], int: int) -> None: ...
    def setBinaryFileBinDataBigEndian(self, boolean: bool, int: int) -> None: ...
    def setBinaryFileBinDataCompression(self, compression: bioformats_jar._ome.xml.model.enums.Compression, int: int) -> None: ...
    def setBinaryFileBinDataLength(self, nonNegativeLong: bioformats_jar._ome.xml.model.primitives.NonNegativeLong, int: int) -> None: ...
    def setBinaryFileFileName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBinaryFileMIMEType(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBinaryFileSize(self, nonNegativeLong: bioformats_jar._ome.xml.model.primitives.NonNegativeLong, int: int) -> None: ...
    def setBinaryOnlyMetadataFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setBinaryOnlyUUID(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setBooleanAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setBooleanAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBooleanAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBooleanAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBooleanAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBooleanAnnotationValue(self, boolean: bool, int: int) -> None: ...
    def setChannelAcquisitionMode(self, acquisitionMode: bioformats_jar._ome.xml.model.enums.AcquisitionMode, int: int, int2: int) -> None: ...
    def setChannelAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setChannelColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setChannelContrastMethod(self, contrastMethod: bioformats_jar._ome.xml.model.enums.ContrastMethod, int: int, int2: int) -> None: ...
    def setChannelEmissionWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setChannelExcitationWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setChannelFilterSetRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelFluor(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelIlluminationType(self, illuminationType: bioformats_jar._ome.xml.model.enums.IlluminationType, int: int, int2: int) -> None: ...
    def setChannelLightSourceSettingsAttenuation(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int, int2: int) -> None: ...
    def setChannelLightSourceSettingsID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelLightSourceSettingsWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setChannelNDFilter(self, double: float, int: int, int2: int) -> None: ...
    def setChannelName(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelPinholeSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setChannelPockelCellSetting(self, integer: int, int2: int, int3: int) -> None: ...
    def setChannelSamplesPerPixel(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int, int2: int) -> None: ...
    def setCommentAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setCommentAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCommentAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCommentAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCommentAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCommentAnnotationValue(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCreator(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDatasetAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDatasetDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDatasetExperimenterGroupRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDatasetExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDatasetID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDatasetImageRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDatasetName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDetectorAmplificationGain(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setDetectorGain(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorOffset(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorSettingsBinning(self, binning: bioformats_jar._ome.xml.model.enums.Binning, int: int, int2: int) -> None: ...
    def setDetectorSettingsGain(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorSettingsID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorSettingsIntegration(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int, int2: int) -> None: ...
    def setDetectorSettingsOffset(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorSettingsReadOutRate(self, frequency: bioformats_jar._ome.units.quantity.Frequency, int: int, int2: int) -> None: ...
    def setDetectorSettingsVoltage(self, electricPotential: bioformats_jar._ome.units.quantity.ElectricPotential, int: int, int2: int) -> None: ...
    def setDetectorSettingsZoom(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorType(self, detectorType: bioformats_jar._ome.xml.model.enums.DetectorType, int: int, int2: int) -> None: ...
    def setDetectorVoltage(self, electricPotential: bioformats_jar._ome.units.quantity.ElectricPotential, int: int, int2: int) -> None: ...
    def setDetectorZoom(self, double: float, int: int, int2: int) -> None: ...
    def setDichroicAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setDichroicID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDichroicLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDichroicManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDichroicModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDichroicSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDoubleAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDoubleAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDoubleAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDoubleAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDoubleAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDoubleAnnotationValue(self, double: float, int: int) -> None: ...
    def setEllipseAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setEllipseFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setEllipseFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setEllipseFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setEllipseFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setEllipseFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setEllipseID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setEllipseLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setEllipseRadiusX(self, double: float, int: int, int2: int) -> None: ...
    def setEllipseRadiusY(self, double: float, int: int, int2: int) -> None: ...
    def setEllipseStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setEllipseStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setEllipseStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setEllipseText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setEllipseTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setEllipseTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setEllipseTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setEllipseTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setEllipseX(self, double: float, int: int, int2: int) -> None: ...
    def setEllipseY(self, double: float, int: int, int2: int) -> None: ...
    def setExperimentDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimentExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimentID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimentType(self, experimentType: bioformats_jar._ome.xml.model.enums.ExperimentType, int: int) -> None: ...
    def setExperimenterAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setExperimenterEmail(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterFirstName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterGroupAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setExperimenterGroupDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterGroupExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setExperimenterGroupID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterGroupLeader(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setExperimenterGroupName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterInstitution(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterLastName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterMiddleName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterUserName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFilamentAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setFilamentID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentPower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setFilamentSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentType(self, filamentType: bioformats_jar._ome.xml.model.enums.FilamentType, int: int, int2: int) -> None: ...
    def setFileAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFileAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFileAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFileAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFileAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFilterAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setFilterFilterWheel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetDichroicRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetEmissionFilterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setFilterSetExcitationFilterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setFilterSetID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterType(self, filterType: bioformats_jar._ome.xml.model.enums.FilterType, int: int, int2: int) -> None: ...
    def setFolderAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFolderDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFolderFolderRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFolderID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFolderImageRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFolderName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFolderROIRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setGenericExcitationSourceID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceMap(self, list: java.util.List[bioformats_jar._ome.xml.model.MapPair], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourcePower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setGenericExcitationSourceSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setImageAcquisitionDate(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int) -> None: ...
    def setImageAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setImageDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageExperimentRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageExperimenterGroupRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageInstrumentRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageMicrobeamManipulationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setImageName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageROIRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setImagingEnvironmentAirPressure(self, pressure: bioformats_jar._ome.units.quantity.Pressure, int: int) -> None: ...
    def setImagingEnvironmentCO2Percent(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int) -> None: ...
    def setImagingEnvironmentHumidity(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int) -> None: ...
    def setImagingEnvironmentMap(self, list: java.util.List[bioformats_jar._ome.xml.model.MapPair], int: int) -> None: ...
    def setImagingEnvironmentTemperature(self, temperature: bioformats_jar._ome.units.quantity.Temperature, int: int) -> None: ...
    def setInstrumentAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setInstrumentID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLabelAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLabelFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setLabelFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setLabelFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setLabelFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLabelFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setLabelID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLabelLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setLabelStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setLabelStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLabelStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLabelText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLabelTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLabelTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLabelTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLabelTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setLabelX(self, double: float, int: int, int2: int) -> None: ...
    def setLabelY(self, double: float, int: int, int2: int) -> None: ...
    def setLaserAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLaserFrequencyMultiplication(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int, int2: int) -> None: ...
    def setLaserID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserLaserMedium(self, laserMedium: bioformats_jar._ome.xml.model.enums.LaserMedium, int: int, int2: int) -> None: ...
    def setLaserLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserPockelCell(self, boolean: bool, int: int, int2: int) -> None: ...
    def setLaserPower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setLaserPulse(self, pulse: bioformats_jar._ome.xml.model.enums.Pulse, int: int, int2: int) -> None: ...
    def setLaserPump(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserRepetitionRate(self, frequency: bioformats_jar._ome.units.quantity.Frequency, int: int, int2: int) -> None: ...
    def setLaserSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserTuneable(self, boolean: bool, int: int, int2: int) -> None: ...
    def setLaserType(self, laserType: bioformats_jar._ome.xml.model.enums.LaserType, int: int, int2: int) -> None: ...
    def setLaserWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLightEmittingDiodeAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLightEmittingDiodeID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightEmittingDiodeLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightEmittingDiodeManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightEmittingDiodeModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightEmittingDiodePower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setLightEmittingDiodeSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightPathAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLightPathDichroicRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightPathEmissionFilterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLightPathExcitationFilterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLineAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLineFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setLineFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setLineFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setLineFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLineFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setLineID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLineLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setLineMarkerEnd(self, marker: bioformats_jar._ome.xml.model.enums.Marker, int: int, int2: int) -> None: ...
    def setLineMarkerStart(self, marker: bioformats_jar._ome.xml.model.enums.Marker, int: int, int2: int) -> None: ...
    def setLineStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setLineStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLineStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLineText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLineTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLineTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLineTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLineTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setLineX1(self, double: float, int: int, int2: int) -> None: ...
    def setLineX2(self, double: float, int: int, int2: int) -> None: ...
    def setLineY1(self, double: float, int: int, int2: int) -> None: ...
    def setLineY2(self, double: float, int: int, int2: int) -> None: ...
    def setListAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setListAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setListAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setListAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setListAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLongAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationValue(self, long: int, int: int) -> None: ...
    def setMapAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMapAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMapAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMapAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMapAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMapAnnotationValue(self, list: java.util.List[bioformats_jar._ome.xml.model.MapPair], int: int) -> None: ...
    def setMaskAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setMaskBinData(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    def setMaskBinDataBigEndian(self, boolean: bool, int: int, int2: int) -> None: ...
    def setMaskBinDataCompression(self, compression: bioformats_jar._ome.xml.model.enums.Compression, int: int, int2: int) -> None: ...
    def setMaskBinDataLength(self, nonNegativeLong: bioformats_jar._ome.xml.model.primitives.NonNegativeLong, int: int, int2: int) -> None: ...
    def setMaskFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setMaskFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setMaskFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setMaskFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setMaskFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setMaskHeight(self, double: float, int: int, int2: int) -> None: ...
    def setMaskID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMaskLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setMaskStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setMaskStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMaskStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setMaskText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMaskTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setMaskTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setMaskTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setMaskTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setMaskWidth(self, double: float, int: int, int2: int) -> None: ...
    def setMaskX(self, double: float, int: int, int2: int) -> None: ...
    def setMaskY(self, double: float, int: int, int2: int) -> None: ...
    def setMicrobeamManipulationDescription(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMicrobeamManipulationExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMicrobeamManipulationID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMicrobeamManipulationLightSourceSettingsAttenuation(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int, int2: int, int3: int) -> None: ...
    def setMicrobeamManipulationLightSourceSettingsID(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setMicrobeamManipulationLightSourceSettingsWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int, int3: int) -> None: ...
    def setMicrobeamManipulationROIRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setMicrobeamManipulationType(self, microbeamManipulationType: bioformats_jar._ome.xml.model.enums.MicrobeamManipulationType, int: int, int2: int) -> None: ...
    def setMicroscopeLotNumber(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMicroscopeManufacturer(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMicroscopeModel(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMicroscopeSerialNumber(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMicroscopeType(self, microscopeType: bioformats_jar._ome.xml.model.enums.MicroscopeType, int: int) -> None: ...
    def setObjectiveAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setObjectiveCalibratedMagnification(self, double: float, int: int, int2: int) -> None: ...
    def setObjectiveCorrection(self, correction: bioformats_jar._ome.xml.model.enums.Correction, int: int, int2: int) -> None: ...
    def setObjectiveID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveImmersion(self, immersion: bioformats_jar._ome.xml.model.enums.Immersion, int: int, int2: int) -> None: ...
    def setObjectiveIris(self, boolean: bool, int: int, int2: int) -> None: ...
    def setObjectiveLensNA(self, double: float, int: int, int2: int) -> None: ...
    def setObjectiveLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveNominalMagnification(self, double: float, int: int, int2: int) -> None: ...
    def setObjectiveSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveSettingsCorrectionCollar(self, double: float, int: int) -> None: ...
    def setObjectiveSettingsID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setObjectiveSettingsMedium(self, medium: bioformats_jar._ome.xml.model.enums.Medium, int: int) -> None: ...
    def setObjectiveSettingsRefractiveIndex(self, double: float, int: int) -> None: ...
    def setObjectiveWorkingDistance(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPixelsBigEndian(self, boolean: bool, int: int) -> None: ...
    def setPixelsBinData(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    def setPixelsBinDataBigEndian(self, boolean: bool, int: int, int2: int) -> None: ...
    def setPixelsBinDataCompression(self, compression: bioformats_jar._ome.xml.model.enums.Compression, int: int, int2: int) -> None: ...
    def setPixelsBinDataLength(self, nonNegativeLong: bioformats_jar._ome.xml.model.primitives.NonNegativeLong, int: int, int2: int) -> None: ...
    def setPixelsDimensionOrder(self, dimensionOrder: bioformats_jar._ome.xml.model.enums.DimensionOrder, int: int) -> None: ...
    def setPixelsID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPixelsInterleaved(self, boolean: bool, int: int) -> None: ...
    def setPixelsPhysicalSizeX(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPixelsPhysicalSizeY(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPixelsPhysicalSizeZ(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPixelsSignificantBits(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeC(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeT(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeX(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeY(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeZ(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsTimeIncrement(self, time: bioformats_jar._ome.units.quantity.Time, int: int) -> None: ...
    def setPixelsType(self, pixelType: bioformats_jar._ome.xml.model.enums.PixelType, int: int) -> None: ...
    def setPlaneAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPlaneDeltaT(self, time: bioformats_jar._ome.units.quantity.Time, int: int, int2: int) -> None: ...
    def setPlaneExposureTime(self, time: bioformats_jar._ome.units.quantity.Time, int: int, int2: int) -> None: ...
    def setPlaneHashSHA1(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlanePositionX(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPlanePositionY(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPlanePositionZ(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPlaneTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPlaneTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPlaneTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPlateAcquisitionAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPlateAcquisitionDescription(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlateAcquisitionEndTime(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int, int2: int) -> None: ...
    def setPlateAcquisitionID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlateAcquisitionMaximumFieldCount(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int, int2: int) -> None: ...
    def setPlateAcquisitionName(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlateAcquisitionStartTime(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int, int2: int) -> None: ...
    def setPlateAcquisitionWellSampleRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPlateAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlateColumnNamingConvention(self, namingConvention: bioformats_jar._ome.xml.model.enums.NamingConvention, int: int) -> None: ...
    def setPlateColumns(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPlateDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateExternalIdentifier(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateFieldIndex(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int) -> None: ...
    def setPlateID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateRowNamingConvention(self, namingConvention: bioformats_jar._ome.xml.model.enums.NamingConvention, int: int) -> None: ...
    def setPlateRows(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPlateStatus(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateWellOriginX(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPlateWellOriginY(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPointAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPointFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPointFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setPointFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setPointFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPointFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setPointID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPointLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setPointStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPointStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPointStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPointText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPointTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPointTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPointTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPointTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setPointX(self, double: float, int: int, int2: int) -> None: ...
    def setPointY(self, double: float, int: int, int2: int) -> None: ...
    def setPolygonAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPolygonFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPolygonFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setPolygonFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setPolygonFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPolygonFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setPolygonID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolygonLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setPolygonPoints(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolygonStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPolygonStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolygonStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPolygonText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolygonTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolygonTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolygonTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolygonTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setPolylineAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPolylineFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPolylineFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setPolylineFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setPolylineFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPolylineFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setPolylineID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolylineLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setPolylineMarkerEnd(self, marker: bioformats_jar._ome.xml.model.enums.Marker, int: int, int2: int) -> None: ...
    def setPolylineMarkerStart(self, marker: bioformats_jar._ome.xml.model.enums.Marker, int: int, int2: int) -> None: ...
    def setPolylinePoints(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolylineStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPolylineStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolylineStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPolylineText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolylineTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolylineTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolylineTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolylineTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setProjectAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setProjectDatasetRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setProjectDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setProjectExperimenterGroupRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setProjectExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setProjectID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setProjectName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setROIAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setROIDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setROIID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setROIName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setReagentAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setReagentDescription(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setReagentID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setReagentName(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setReagentReagentIdentifier(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setRectangleAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setRectangleFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setRectangleFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setRectangleFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setRectangleFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setRectangleFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setRectangleHeight(self, double: float, int: int, int2: int) -> None: ...
    def setRectangleID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setRectangleLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setRectangleStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setRectangleStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setRectangleStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setRectangleText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setRectangleTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setRectangleTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setRectangleTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setRectangleTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setRectangleWidth(self, double: float, int: int, int2: int) -> None: ...
    def setRectangleX(self, double: float, int: int, int2: int) -> None: ...
    def setRectangleY(self, double: float, int: int, int2: int) -> None: ...
    def setRightsRightsHeld(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setRightsRightsHolder(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setRoot(self, metadataRoot: MetadataRoot) -> None: ...
    def setScreenAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setScreenDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenPlateRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setScreenProtocolDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenProtocolIdentifier(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenReagentSetDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenReagentSetIdentifier(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenType(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setStageLabelName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setStageLabelX(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setStageLabelY(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setStageLabelZ(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setTagAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setTagAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTagAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTagAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTagAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTagAnnotationValue(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setTermAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationValue(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTiffDataFirstC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTiffDataFirstT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTiffDataFirstZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTiffDataIFD(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTiffDataPlaneCount(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTimestampAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setTimestampAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTimestampAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTimestampAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTimestampAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTimestampAnnotationValue(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int) -> None: ...
    def setTransmittanceRangeCutIn(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setTransmittanceRangeCutInTolerance(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setTransmittanceRangeCutOut(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setTransmittanceRangeCutOutTolerance(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setTransmittanceRangeTransmittance(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int, int2: int) -> None: ...
    def setUUID(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setUUIDFileName(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setUUIDValue(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setWellColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setWellColumn(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setWellExternalDescription(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellExternalIdentifier(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellReagentRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellRow(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setWellSampleID(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setWellSampleImageRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setWellSampleIndex(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int, int3: int) -> None: ...
    def setWellSamplePositionX(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int, int3: int) -> None: ...
    def setWellSamplePositionY(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int, int3: int) -> None: ...
    def setWellSampleTimepoint(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int, int2: int, int3: int) -> None: ...
    def setWellType(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setXMLAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setXMLAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setXMLAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setXMLAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setXMLAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setXMLAnnotationValue(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...

class OMEXMLMetadataRoot(ome.xml.model.OME, MetadataRoot):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, oME: bioformats_jar._ome.xml.model.OME): ...
    @typing.overload
    def __init__(self, element: org.w3c.dom.Element, oMEModel: bioformats_jar._ome.xml.model.OMEModel): ...

class IMetadata(MetadataRetrieve, MetadataStore): ...

class AggregateMetadata(IMetadata):
    def __init__(self, list: java.util.List[BaseMetadata]): ...
    def createRoot(self) -> None: ...
    def getArcAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getArcID(self, int: int, int2: int) -> java.lang.String: ...
    def getArcLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getArcManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getArcModel(self, int: int, int2: int) -> java.lang.String: ...
    def getArcPower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getArcSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getArcType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.ArcType: ...
    def getBinaryFileBinData(self, int: int) -> typing.List[int]: ...
    def getBinaryFileBinDataBigEndian(self, int: int) -> bool: ...
    def getBinaryFileBinDataCompression(self, int: int) -> bioformats_jar._ome.xml.model.enums.Compression: ...
    def getBinaryFileBinDataLength(self, int: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeLong: ...
    def getBinaryFileFileName(self, int: int) -> java.lang.String: ...
    def getBinaryFileMIMEType(self, int: int) -> java.lang.String: ...
    def getBinaryFileSize(self, int: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeLong: ...
    def getBinaryOnlyMetadataFile(self) -> java.lang.String: ...
    def getBinaryOnlyUUID(self) -> java.lang.String: ...
    def getBooleanAnnotationAnnotationCount(self, int: int) -> int: ...
    def getBooleanAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getBooleanAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getBooleanAnnotationCount(self) -> int: ...
    def getBooleanAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getBooleanAnnotationID(self, int: int) -> java.lang.String: ...
    def getBooleanAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getBooleanAnnotationValue(self, int: int) -> bool: ...
    def getChannelAcquisitionMode(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.AcquisitionMode: ...
    def getChannelAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getChannelAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getChannelColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getChannelContrastMethod(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.ContrastMethod: ...
    def getChannelCount(self, int: int) -> int: ...
    def getChannelEmissionWavelength(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getChannelExcitationWavelength(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getChannelFilterSetRef(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelFluor(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelID(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelIlluminationType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.IlluminationType: ...
    def getChannelLightSourceSettingsAttenuation(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getChannelLightSourceSettingsID(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelLightSourceSettingsWavelength(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getChannelNDFilter(self, int: int, int2: int) -> float: ...
    def getChannelName(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelPinholeSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getChannelPockelCellSetting(self, int: int, int2: int) -> int: ...
    def getChannelSamplesPerPixel(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getCommentAnnotationAnnotationCount(self, int: int) -> int: ...
    def getCommentAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getCommentAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getCommentAnnotationCount(self) -> int: ...
    def getCommentAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getCommentAnnotationID(self, int: int) -> java.lang.String: ...
    def getCommentAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getCommentAnnotationValue(self, int: int) -> java.lang.String: ...
    def getCreator(self) -> java.lang.String: ...
    def getDatasetAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getDatasetAnnotationRefCount(self, int: int) -> int: ...
    def getDatasetCount(self) -> int: ...
    def getDatasetDescription(self, int: int) -> java.lang.String: ...
    def getDatasetExperimenterGroupRef(self, int: int) -> java.lang.String: ...
    def getDatasetExperimenterRef(self, int: int) -> java.lang.String: ...
    def getDatasetID(self, int: int) -> java.lang.String: ...
    def getDatasetImageRef(self, int: int, int2: int) -> java.lang.String: ...
    def getDatasetImageRefCount(self, int: int) -> int: ...
    def getDatasetName(self, int: int) -> java.lang.String: ...
    def getDatasetRefCount(self, int: int) -> int: ...
    def getDetectorAmplificationGain(self, int: int, int2: int) -> float: ...
    def getDetectorAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getDetectorAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getDetectorCount(self, int: int) -> int: ...
    def getDetectorGain(self, int: int, int2: int) -> float: ...
    def getDetectorID(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorModel(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorOffset(self, int: int, int2: int) -> float: ...
    def getDetectorSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorSettingsBinning(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Binning: ...
    def getDetectorSettingsGain(self, int: int, int2: int) -> float: ...
    def getDetectorSettingsID(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorSettingsIntegration(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getDetectorSettingsOffset(self, int: int, int2: int) -> float: ...
    def getDetectorSettingsReadOutRate(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Frequency: ...
    def getDetectorSettingsVoltage(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.ElectricPotential: ...
    def getDetectorSettingsZoom(self, int: int, int2: int) -> float: ...
    def getDetectorType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.DetectorType: ...
    def getDetectorVoltage(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.ElectricPotential: ...
    def getDetectorZoom(self, int: int, int2: int) -> float: ...
    def getDichroicAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getDichroicAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getDichroicCount(self, int: int) -> int: ...
    def getDichroicID(self, int: int, int2: int) -> java.lang.String: ...
    def getDichroicLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getDichroicManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getDichroicModel(self, int: int, int2: int) -> java.lang.String: ...
    def getDichroicSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getDoubleAnnotationAnnotationCount(self, int: int) -> int: ...
    def getDoubleAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getDoubleAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getDoubleAnnotationCount(self) -> int: ...
    def getDoubleAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getDoubleAnnotationID(self, int: int) -> java.lang.String: ...
    def getDoubleAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getDoubleAnnotationValue(self, int: int) -> float: ...
    def getEllipseAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getEllipseFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getEllipseFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getEllipseFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getEllipseFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getEllipseFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getEllipseID(self, int: int, int2: int) -> java.lang.String: ...
    def getEllipseLocked(self, int: int, int2: int) -> bool: ...
    def getEllipseRadiusX(self, int: int, int2: int) -> float: ...
    def getEllipseRadiusY(self, int: int, int2: int) -> float: ...
    def getEllipseStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getEllipseStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getEllipseStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getEllipseText(self, int: int, int2: int) -> java.lang.String: ...
    def getEllipseTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getEllipseTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getEllipseTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getEllipseTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getEllipseX(self, int: int, int2: int) -> float: ...
    def getEllipseY(self, int: int, int2: int) -> float: ...
    def getExperimentCount(self) -> int: ...
    def getExperimentDescription(self, int: int) -> java.lang.String: ...
    def getExperimentExperimenterRef(self, int: int) -> java.lang.String: ...
    def getExperimentID(self, int: int) -> java.lang.String: ...
    def getExperimentType(self, int: int) -> bioformats_jar._ome.xml.model.enums.ExperimentType: ...
    def getExperimenterAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getExperimenterAnnotationRefCount(self, int: int) -> int: ...
    def getExperimenterCount(self) -> int: ...
    def getExperimenterEmail(self, int: int) -> java.lang.String: ...
    def getExperimenterFirstName(self, int: int) -> java.lang.String: ...
    def getExperimenterGroupAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getExperimenterGroupAnnotationRefCount(self, int: int) -> int: ...
    def getExperimenterGroupCount(self) -> int: ...
    def getExperimenterGroupDescription(self, int: int) -> java.lang.String: ...
    def getExperimenterGroupExperimenterRef(self, int: int, int2: int) -> java.lang.String: ...
    def getExperimenterGroupExperimenterRefCount(self, int: int) -> int: ...
    def getExperimenterGroupID(self, int: int) -> java.lang.String: ...
    def getExperimenterGroupLeader(self, int: int, int2: int) -> java.lang.String: ...
    def getExperimenterGroupName(self, int: int) -> java.lang.String: ...
    def getExperimenterID(self, int: int) -> java.lang.String: ...
    def getExperimenterInstitution(self, int: int) -> java.lang.String: ...
    def getExperimenterLastName(self, int: int) -> java.lang.String: ...
    def getExperimenterMiddleName(self, int: int) -> java.lang.String: ...
    def getExperimenterUserName(self, int: int) -> java.lang.String: ...
    def getFilamentAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getFilamentID(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentModel(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentPower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getFilamentSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FilamentType: ...
    def getFileAnnotationAnnotationCount(self, int: int) -> int: ...
    def getFileAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFileAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getFileAnnotationCount(self) -> int: ...
    def getFileAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getFileAnnotationID(self, int: int) -> java.lang.String: ...
    def getFileAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getFilterAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getFilterAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getFilterCount(self, int: int) -> int: ...
    def getFilterFilterWheel(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterID(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterModel(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetCount(self, int: int) -> int: ...
    def getFilterSetDichroicRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetEmissionFilterRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getFilterSetEmissionFilterRefCount(self, int: int, int2: int) -> int: ...
    def getFilterSetExcitationFilterRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getFilterSetExcitationFilterRefCount(self, int: int, int2: int) -> int: ...
    def getFilterSetID(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetModel(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FilterType: ...
    def getFolderAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFolderAnnotationRefCount(self, int: int) -> int: ...
    def getFolderCount(self) -> int: ...
    def getFolderDescription(self, int: int) -> java.lang.String: ...
    def getFolderFolderRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFolderID(self, int: int) -> java.lang.String: ...
    def getFolderImageRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFolderImageRefCount(self, int: int) -> int: ...
    def getFolderName(self, int: int) -> java.lang.String: ...
    def getFolderROIRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFolderROIRefCount(self, int: int) -> int: ...
    def getFolderRefCount(self, int: int) -> int: ...
    def getGenericExcitationSourceAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getGenericExcitationSourceID(self, int: int, int2: int) -> java.lang.String: ...
    def getGenericExcitationSourceLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getGenericExcitationSourceManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getGenericExcitationSourceMap(self, int: int, int2: int) -> java.util.List[bioformats_jar._ome.xml.model.MapPair]: ...
    def getGenericExcitationSourceModel(self, int: int, int2: int) -> java.lang.String: ...
    def getGenericExcitationSourcePower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getGenericExcitationSourceSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getImageAcquisitionDate(self, int: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getImageAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getImageAnnotationRefCount(self, int: int) -> int: ...
    def getImageCount(self) -> int: ...
    def getImageDescription(self, int: int) -> java.lang.String: ...
    def getImageExperimentRef(self, int: int) -> java.lang.String: ...
    def getImageExperimenterGroupRef(self, int: int) -> java.lang.String: ...
    def getImageExperimenterRef(self, int: int) -> java.lang.String: ...
    def getImageID(self, int: int) -> java.lang.String: ...
    def getImageInstrumentRef(self, int: int) -> java.lang.String: ...
    def getImageMicrobeamManipulationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getImageName(self, int: int) -> java.lang.String: ...
    def getImageROIRef(self, int: int, int2: int) -> java.lang.String: ...
    def getImageROIRefCount(self, int: int) -> int: ...
    def getImagingEnvironmentAirPressure(self, int: int) -> bioformats_jar._ome.units.quantity.Pressure: ...
    def getImagingEnvironmentCO2Percent(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getImagingEnvironmentHumidity(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getImagingEnvironmentMap(self, int: int) -> java.util.List[bioformats_jar._ome.xml.model.MapPair]: ...
    def getImagingEnvironmentTemperature(self, int: int) -> bioformats_jar._ome.units.quantity.Temperature: ...
    def getInstrumentAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getInstrumentAnnotationRefCount(self, int: int) -> int: ...
    def getInstrumentCount(self) -> int: ...
    def getInstrumentID(self, int: int) -> java.lang.String: ...
    def getLabelAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLabelFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getLabelFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getLabelFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getLabelFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLabelFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getLabelID(self, int: int, int2: int) -> java.lang.String: ...
    def getLabelLocked(self, int: int, int2: int) -> bool: ...
    def getLabelStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getLabelStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getLabelStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLabelText(self, int: int, int2: int) -> java.lang.String: ...
    def getLabelTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLabelTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLabelTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLabelTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getLabelX(self, int: int, int2: int) -> float: ...
    def getLabelY(self, int: int, int2: int) -> float: ...
    def getLaserAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLaserFrequencyMultiplication(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getLaserID(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserLaserMedium(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.LaserMedium: ...
    def getLaserLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserModel(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserPockelCell(self, int: int, int2: int) -> bool: ...
    def getLaserPower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getLaserPulse(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Pulse: ...
    def getLaserPump(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserRepetitionRate(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Frequency: ...
    def getLaserSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserTuneable(self, int: int, int2: int) -> bool: ...
    def getLaserType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.LaserType: ...
    def getLaserWavelength(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLeaderCount(self, int: int) -> int: ...
    def getLightEmittingDiodeAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLightEmittingDiodeID(self, int: int, int2: int) -> java.lang.String: ...
    def getLightEmittingDiodeLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getLightEmittingDiodeManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getLightEmittingDiodeModel(self, int: int, int2: int) -> java.lang.String: ...
    def getLightEmittingDiodePower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getLightEmittingDiodeSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getLightPathAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLightPathAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getLightPathDichroicRef(self, int: int, int2: int) -> java.lang.String: ...
    def getLightPathEmissionFilterRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLightPathEmissionFilterRefCount(self, int: int, int2: int) -> int: ...
    def getLightPathExcitationFilterRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLightPathExcitationFilterRefCount(self, int: int, int2: int) -> int: ...
    def getLightSourceAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getLightSourceCount(self, int: int) -> int: ...
    def getLightSourceType(self, int: int, int2: int) -> java.lang.String: ...
    def getLineAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLineFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getLineFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getLineFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getLineFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLineFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getLineID(self, int: int, int2: int) -> java.lang.String: ...
    def getLineLocked(self, int: int, int2: int) -> bool: ...
    def getLineMarkerEnd(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Marker: ...
    def getLineMarkerStart(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Marker: ...
    def getLineStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getLineStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getLineStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLineText(self, int: int, int2: int) -> java.lang.String: ...
    def getLineTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLineTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLineTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLineTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getLineX1(self, int: int, int2: int) -> float: ...
    def getLineX2(self, int: int, int2: int) -> float: ...
    def getLineY1(self, int: int, int2: int) -> float: ...
    def getLineY2(self, int: int, int2: int) -> float: ...
    def getListAnnotationAnnotationCount(self, int: int) -> int: ...
    def getListAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getListAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getListAnnotationCount(self) -> int: ...
    def getListAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getListAnnotationID(self, int: int) -> java.lang.String: ...
    def getListAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getLongAnnotationAnnotationCount(self, int: int) -> int: ...
    def getLongAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getLongAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getLongAnnotationCount(self) -> int: ...
    def getLongAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getLongAnnotationID(self, int: int) -> java.lang.String: ...
    def getLongAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getLongAnnotationValue(self, int: int) -> int: ...
    def getMapAnnotationAnnotationCount(self, int: int) -> int: ...
    def getMapAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getMapAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getMapAnnotationCount(self) -> int: ...
    def getMapAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getMapAnnotationID(self, int: int) -> java.lang.String: ...
    def getMapAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getMapAnnotationValue(self, int: int) -> java.util.List[bioformats_jar._ome.xml.model.MapPair]: ...
    def getMaskAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getMaskBinData(self, int: int, int2: int) -> typing.List[int]: ...
    def getMaskBinDataBigEndian(self, int: int, int2: int) -> bool: ...
    def getMaskBinDataCompression(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Compression: ...
    def getMaskBinDataLength(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeLong: ...
    def getMaskFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getMaskFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getMaskFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getMaskFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getMaskFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getMaskHeight(self, int: int, int2: int) -> float: ...
    def getMaskID(self, int: int, int2: int) -> java.lang.String: ...
    def getMaskLocked(self, int: int, int2: int) -> bool: ...
    def getMaskStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getMaskStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getMaskStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getMaskText(self, int: int, int2: int) -> java.lang.String: ...
    def getMaskTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getMaskTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getMaskTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getMaskTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getMaskWidth(self, int: int, int2: int) -> float: ...
    def getMaskX(self, int: int, int2: int) -> float: ...
    def getMaskY(self, int: int, int2: int) -> float: ...
    def getMicrobeamManipulationCount(self, int: int) -> int: ...
    def getMicrobeamManipulationDescription(self, int: int, int2: int) -> java.lang.String: ...
    def getMicrobeamManipulationExperimenterRef(self, int: int, int2: int) -> java.lang.String: ...
    def getMicrobeamManipulationID(self, int: int, int2: int) -> java.lang.String: ...
    def getMicrobeamManipulationLightSourceSettingsAttenuation(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getMicrobeamManipulationLightSourceSettingsCount(self, int: int, int2: int) -> int: ...
    def getMicrobeamManipulationLightSourceSettingsID(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getMicrobeamManipulationLightSourceSettingsWavelength(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getMicrobeamManipulationROIRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getMicrobeamManipulationROIRefCount(self, int: int, int2: int) -> int: ...
    def getMicrobeamManipulationRefCount(self, int: int) -> int: ...
    def getMicrobeamManipulationType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.MicrobeamManipulationType: ...
    def getMicroscopeLotNumber(self, int: int) -> java.lang.String: ...
    def getMicroscopeManufacturer(self, int: int) -> java.lang.String: ...
    def getMicroscopeModel(self, int: int) -> java.lang.String: ...
    def getMicroscopeSerialNumber(self, int: int) -> java.lang.String: ...
    def getMicroscopeType(self, int: int) -> bioformats_jar._ome.xml.model.enums.MicroscopeType: ...
    def getObjectiveAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getObjectiveAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getObjectiveCalibratedMagnification(self, int: int, int2: int) -> float: ...
    def getObjectiveCorrection(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Correction: ...
    def getObjectiveCount(self, int: int) -> int: ...
    def getObjectiveID(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveImmersion(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Immersion: ...
    def getObjectiveIris(self, int: int, int2: int) -> bool: ...
    def getObjectiveLensNA(self, int: int, int2: int) -> float: ...
    def getObjectiveLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveModel(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveNominalMagnification(self, int: int, int2: int) -> float: ...
    def getObjectiveSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveSettingsCorrectionCollar(self, int: int) -> float: ...
    def getObjectiveSettingsID(self, int: int) -> java.lang.String: ...
    def getObjectiveSettingsMedium(self, int: int) -> bioformats_jar._ome.xml.model.enums.Medium: ...
    def getObjectiveSettingsRefractiveIndex(self, int: int) -> float: ...
    def getObjectiveWorkingDistance(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPixelsBigEndian(self, int: int) -> bool: ...
    def getPixelsBinData(self, int: int, int2: int) -> typing.List[int]: ...
    def getPixelsBinDataBigEndian(self, int: int, int2: int) -> bool: ...
    def getPixelsBinDataCompression(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Compression: ...
    def getPixelsBinDataCount(self, int: int) -> int: ...
    def getPixelsBinDataLength(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeLong: ...
    def getPixelsDimensionOrder(self, int: int) -> bioformats_jar._ome.xml.model.enums.DimensionOrder: ...
    def getPixelsID(self, int: int) -> java.lang.String: ...
    def getPixelsInterleaved(self, int: int) -> bool: ...
    def getPixelsPhysicalSizeX(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPixelsPhysicalSizeY(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPixelsPhysicalSizeZ(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPixelsSignificantBits(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeC(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeT(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeX(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeY(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeZ(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsTimeIncrement(self, int: int) -> bioformats_jar._ome.units.quantity.Time: ...
    def getPixelsType(self, int: int) -> bioformats_jar._ome.xml.model.enums.PixelType: ...
    def getPlaneAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPlaneAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getPlaneCount(self, int: int) -> int: ...
    def getPlaneDeltaT(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Time: ...
    def getPlaneExposureTime(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Time: ...
    def getPlaneHashSHA1(self, int: int, int2: int) -> java.lang.String: ...
    def getPlanePositionX(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPlanePositionY(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPlanePositionZ(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPlaneTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPlaneTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPlaneTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPlateAcquisitionAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPlateAcquisitionAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getPlateAcquisitionCount(self, int: int) -> int: ...
    def getPlateAcquisitionDescription(self, int: int, int2: int) -> java.lang.String: ...
    def getPlateAcquisitionEndTime(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getPlateAcquisitionID(self, int: int, int2: int) -> java.lang.String: ...
    def getPlateAcquisitionMaximumFieldCount(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPlateAcquisitionName(self, int: int, int2: int) -> java.lang.String: ...
    def getPlateAcquisitionStartTime(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getPlateAcquisitionWellSampleRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPlateAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getPlateAnnotationRefCount(self, int: int) -> int: ...
    def getPlateColumnNamingConvention(self, int: int) -> bioformats_jar._ome.xml.model.enums.NamingConvention: ...
    def getPlateColumns(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPlateCount(self) -> int: ...
    def getPlateDescription(self, int: int) -> java.lang.String: ...
    def getPlateExternalIdentifier(self, int: int) -> java.lang.String: ...
    def getPlateFieldIndex(self, int: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPlateID(self, int: int) -> java.lang.String: ...
    def getPlateName(self, int: int) -> java.lang.String: ...
    def getPlateRefCount(self, int: int) -> int: ...
    def getPlateRowNamingConvention(self, int: int) -> bioformats_jar._ome.xml.model.enums.NamingConvention: ...
    def getPlateRows(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPlateStatus(self, int: int) -> java.lang.String: ...
    def getPlateWellOriginX(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPlateWellOriginY(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPointAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPointFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPointFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getPointFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getPointFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPointFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getPointID(self, int: int, int2: int) -> java.lang.String: ...
    def getPointLocked(self, int: int, int2: int) -> bool: ...
    def getPointStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPointStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getPointStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPointText(self, int: int, int2: int) -> java.lang.String: ...
    def getPointTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPointTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPointTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPointTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getPointX(self, int: int, int2: int) -> float: ...
    def getPointY(self, int: int, int2: int) -> float: ...
    def getPolygonAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPolygonFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPolygonFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getPolygonFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getPolygonFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPolygonFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getPolygonID(self, int: int, int2: int) -> java.lang.String: ...
    def getPolygonLocked(self, int: int, int2: int) -> bool: ...
    def getPolygonPoints(self, int: int, int2: int) -> java.lang.String: ...
    def getPolygonStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPolygonStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getPolygonStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPolygonText(self, int: int, int2: int) -> java.lang.String: ...
    def getPolygonTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolygonTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolygonTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolygonTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getPolylineAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPolylineFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPolylineFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getPolylineFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getPolylineFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPolylineFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getPolylineID(self, int: int, int2: int) -> java.lang.String: ...
    def getPolylineLocked(self, int: int, int2: int) -> bool: ...
    def getPolylineMarkerEnd(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Marker: ...
    def getPolylineMarkerStart(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Marker: ...
    def getPolylinePoints(self, int: int, int2: int) -> java.lang.String: ...
    def getPolylineStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPolylineStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getPolylineStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPolylineText(self, int: int, int2: int) -> java.lang.String: ...
    def getPolylineTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolylineTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolylineTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolylineTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getProjectAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getProjectAnnotationRefCount(self, int: int) -> int: ...
    def getProjectCount(self) -> int: ...
    def getProjectDatasetRef(self, int: int, int2: int) -> java.lang.String: ...
    def getProjectDescription(self, int: int) -> java.lang.String: ...
    def getProjectExperimenterGroupRef(self, int: int) -> java.lang.String: ...
    def getProjectExperimenterRef(self, int: int) -> java.lang.String: ...
    def getProjectID(self, int: int) -> java.lang.String: ...
    def getProjectName(self, int: int) -> java.lang.String: ...
    def getROIAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getROIAnnotationRefCount(self, int: int) -> int: ...
    def getROICount(self) -> int: ...
    def getROIDescription(self, int: int) -> java.lang.String: ...
    def getROIID(self, int: int) -> java.lang.String: ...
    def getROIName(self, int: int) -> java.lang.String: ...
    def getReagentAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getReagentAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getReagentCount(self, int: int) -> int: ...
    def getReagentDescription(self, int: int, int2: int) -> java.lang.String: ...
    def getReagentID(self, int: int, int2: int) -> java.lang.String: ...
    def getReagentName(self, int: int, int2: int) -> java.lang.String: ...
    def getReagentReagentIdentifier(self, int: int, int2: int) -> java.lang.String: ...
    def getRectangleAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getRectangleFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getRectangleFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getRectangleFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getRectangleFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getRectangleFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getRectangleHeight(self, int: int, int2: int) -> float: ...
    def getRectangleID(self, int: int, int2: int) -> java.lang.String: ...
    def getRectangleLocked(self, int: int, int2: int) -> bool: ...
    def getRectangleStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getRectangleStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getRectangleStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getRectangleText(self, int: int, int2: int) -> java.lang.String: ...
    def getRectangleTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getRectangleTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getRectangleTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getRectangleTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getRectangleWidth(self, int: int, int2: int) -> float: ...
    def getRectangleX(self, int: int, int2: int) -> float: ...
    def getRectangleY(self, int: int, int2: int) -> float: ...
    def getRightsRightsHeld(self) -> java.lang.String: ...
    def getRightsRightsHolder(self) -> java.lang.String: ...
    def getRoot(self) -> MetadataRoot: ...
    def getScreenAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getScreenAnnotationRefCount(self, int: int) -> int: ...
    def getScreenCount(self) -> int: ...
    def getScreenDescription(self, int: int) -> java.lang.String: ...
    def getScreenID(self, int: int) -> java.lang.String: ...
    def getScreenName(self, int: int) -> java.lang.String: ...
    def getScreenPlateRef(self, int: int, int2: int) -> java.lang.String: ...
    def getScreenProtocolDescription(self, int: int) -> java.lang.String: ...
    def getScreenProtocolIdentifier(self, int: int) -> java.lang.String: ...
    def getScreenReagentSetDescription(self, int: int) -> java.lang.String: ...
    def getScreenReagentSetIdentifier(self, int: int) -> java.lang.String: ...
    def getScreenType(self, int: int) -> java.lang.String: ...
    def getShapeAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getShapeCount(self, int: int) -> int: ...
    def getShapeType(self, int: int, int2: int) -> java.lang.String: ...
    def getStageLabelName(self, int: int) -> java.lang.String: ...
    def getStageLabelX(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getStageLabelY(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getStageLabelZ(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTagAnnotationAnnotationCount(self, int: int) -> int: ...
    def getTagAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getTagAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getTagAnnotationCount(self) -> int: ...
    def getTagAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getTagAnnotationID(self, int: int) -> java.lang.String: ...
    def getTagAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getTagAnnotationValue(self, int: int) -> java.lang.String: ...
    def getTermAnnotationAnnotationCount(self, int: int) -> int: ...
    def getTermAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getTermAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getTermAnnotationCount(self) -> int: ...
    def getTermAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getTermAnnotationID(self, int: int) -> java.lang.String: ...
    def getTermAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getTermAnnotationValue(self, int: int) -> java.lang.String: ...
    def getTiffDataCount(self, int: int) -> int: ...
    def getTiffDataFirstC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTiffDataFirstT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTiffDataFirstZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTiffDataIFD(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTiffDataPlaneCount(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTimestampAnnotationAnnotationCount(self, int: int) -> int: ...
    def getTimestampAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getTimestampAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getTimestampAnnotationCount(self) -> int: ...
    def getTimestampAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getTimestampAnnotationID(self, int: int) -> java.lang.String: ...
    def getTimestampAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getTimestampAnnotationValue(self, int: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getTransmittanceRangeCutIn(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTransmittanceRangeCutInTolerance(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTransmittanceRangeCutOut(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTransmittanceRangeCutOutTolerance(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTransmittanceRangeTransmittance(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getUUID(self) -> java.lang.String: ...
    def getUUIDFileName(self, int: int, int2: int) -> java.lang.String: ...
    def getUUIDValue(self, int: int, int2: int) -> java.lang.String: ...
    def getWellAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getWellAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getWellColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getWellColumn(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getWellCount(self, int: int) -> int: ...
    def getWellExternalDescription(self, int: int, int2: int) -> java.lang.String: ...
    def getWellExternalIdentifier(self, int: int, int2: int) -> java.lang.String: ...
    def getWellID(self, int: int, int2: int) -> java.lang.String: ...
    def getWellReagentRef(self, int: int, int2: int) -> java.lang.String: ...
    def getWellRow(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getWellSampleCount(self, int: int, int2: int) -> int: ...
    def getWellSampleID(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getWellSampleImageRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getWellSampleIndex(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getWellSamplePositionX(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getWellSamplePositionY(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getWellSampleRefCount(self, int: int, int2: int) -> int: ...
    def getWellSampleTimepoint(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getWellType(self, int: int, int2: int) -> java.lang.String: ...
    def getXMLAnnotationAnnotationCount(self, int: int) -> int: ...
    def getXMLAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getXMLAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getXMLAnnotationCount(self) -> int: ...
    def getXMLAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getXMLAnnotationID(self, int: int) -> java.lang.String: ...
    def getXMLAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getXMLAnnotationValue(self, int: int) -> java.lang.String: ...
    def setArcAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setArcID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcPower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setArcSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcType(self, arcType: bioformats_jar._ome.xml.model.enums.ArcType, int: int, int2: int) -> None: ...
    def setBinaryFileBinData(self, byteArray: typing.List[int], int: int) -> None: ...
    def setBinaryFileBinDataBigEndian(self, boolean: bool, int: int) -> None: ...
    def setBinaryFileBinDataCompression(self, compression: bioformats_jar._ome.xml.model.enums.Compression, int: int) -> None: ...
    def setBinaryFileBinDataLength(self, nonNegativeLong: bioformats_jar._ome.xml.model.primitives.NonNegativeLong, int: int) -> None: ...
    def setBinaryFileFileName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBinaryFileMIMEType(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBinaryFileSize(self, nonNegativeLong: bioformats_jar._ome.xml.model.primitives.NonNegativeLong, int: int) -> None: ...
    def setBinaryOnlyMetadataFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setBinaryOnlyUUID(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setBooleanAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setBooleanAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBooleanAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBooleanAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBooleanAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBooleanAnnotationValue(self, boolean: bool, int: int) -> None: ...
    def setChannelAcquisitionMode(self, acquisitionMode: bioformats_jar._ome.xml.model.enums.AcquisitionMode, int: int, int2: int) -> None: ...
    def setChannelAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setChannelColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setChannelContrastMethod(self, contrastMethod: bioformats_jar._ome.xml.model.enums.ContrastMethod, int: int, int2: int) -> None: ...
    def setChannelEmissionWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setChannelExcitationWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setChannelFilterSetRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelFluor(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelIlluminationType(self, illuminationType: bioformats_jar._ome.xml.model.enums.IlluminationType, int: int, int2: int) -> None: ...
    def setChannelLightSourceSettingsAttenuation(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int, int2: int) -> None: ...
    def setChannelLightSourceSettingsID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelLightSourceSettingsWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setChannelNDFilter(self, double: float, int: int, int2: int) -> None: ...
    def setChannelName(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelPinholeSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setChannelPockelCellSetting(self, integer: int, int2: int, int3: int) -> None: ...
    def setChannelSamplesPerPixel(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int, int2: int) -> None: ...
    def setCommentAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setCommentAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCommentAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCommentAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCommentAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCommentAnnotationValue(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCreator(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDatasetAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDatasetDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDatasetExperimenterGroupRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDatasetExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDatasetID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDatasetImageRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDatasetName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDetectorAmplificationGain(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setDetectorGain(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorOffset(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorSettingsBinning(self, binning: bioformats_jar._ome.xml.model.enums.Binning, int: int, int2: int) -> None: ...
    def setDetectorSettingsGain(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorSettingsID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorSettingsIntegration(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int, int2: int) -> None: ...
    def setDetectorSettingsOffset(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorSettingsReadOutRate(self, frequency: bioformats_jar._ome.units.quantity.Frequency, int: int, int2: int) -> None: ...
    def setDetectorSettingsVoltage(self, electricPotential: bioformats_jar._ome.units.quantity.ElectricPotential, int: int, int2: int) -> None: ...
    def setDetectorSettingsZoom(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorType(self, detectorType: bioformats_jar._ome.xml.model.enums.DetectorType, int: int, int2: int) -> None: ...
    def setDetectorVoltage(self, electricPotential: bioformats_jar._ome.units.quantity.ElectricPotential, int: int, int2: int) -> None: ...
    def setDetectorZoom(self, double: float, int: int, int2: int) -> None: ...
    def setDichroicAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setDichroicID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDichroicLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDichroicManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDichroicModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDichroicSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDoubleAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDoubleAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDoubleAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDoubleAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDoubleAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDoubleAnnotationValue(self, double: float, int: int) -> None: ...
    def setEllipseAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setEllipseFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setEllipseFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setEllipseFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setEllipseFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setEllipseFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setEllipseID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setEllipseLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setEllipseRadiusX(self, double: float, int: int, int2: int) -> None: ...
    def setEllipseRadiusY(self, double: float, int: int, int2: int) -> None: ...
    def setEllipseStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setEllipseStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setEllipseStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setEllipseText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setEllipseTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setEllipseTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setEllipseTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setEllipseTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setEllipseX(self, double: float, int: int, int2: int) -> None: ...
    def setEllipseY(self, double: float, int: int, int2: int) -> None: ...
    def setExperimentDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimentExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimentID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimentType(self, experimentType: bioformats_jar._ome.xml.model.enums.ExperimentType, int: int) -> None: ...
    def setExperimenterAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setExperimenterEmail(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterFirstName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterGroupAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setExperimenterGroupDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterGroupExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setExperimenterGroupID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterGroupLeader(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setExperimenterGroupName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterInstitution(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterLastName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterMiddleName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterUserName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFilamentAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setFilamentID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentPower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setFilamentSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentType(self, filamentType: bioformats_jar._ome.xml.model.enums.FilamentType, int: int, int2: int) -> None: ...
    def setFileAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFileAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFileAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFileAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFileAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFilterAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setFilterFilterWheel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetDichroicRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetEmissionFilterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setFilterSetExcitationFilterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setFilterSetID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterType(self, filterType: bioformats_jar._ome.xml.model.enums.FilterType, int: int, int2: int) -> None: ...
    def setFolderAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFolderDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFolderFolderRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFolderID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFolderImageRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFolderName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFolderROIRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setGenericExcitationSourceID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceMap(self, list: java.util.List[bioformats_jar._ome.xml.model.MapPair], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourcePower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setGenericExcitationSourceSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setImageAcquisitionDate(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int) -> None: ...
    def setImageAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setImageDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageExperimentRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageExperimenterGroupRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageInstrumentRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageMicrobeamManipulationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setImageName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageROIRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setImagingEnvironmentAirPressure(self, pressure: bioformats_jar._ome.units.quantity.Pressure, int: int) -> None: ...
    def setImagingEnvironmentCO2Percent(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int) -> None: ...
    def setImagingEnvironmentHumidity(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int) -> None: ...
    def setImagingEnvironmentMap(self, list: java.util.List[bioformats_jar._ome.xml.model.MapPair], int: int) -> None: ...
    def setImagingEnvironmentTemperature(self, temperature: bioformats_jar._ome.units.quantity.Temperature, int: int) -> None: ...
    def setInstrumentAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setInstrumentID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLabelAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLabelFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setLabelFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setLabelFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setLabelFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLabelFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setLabelID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLabelLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setLabelStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setLabelStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLabelStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLabelText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLabelTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLabelTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLabelTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLabelTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setLabelX(self, double: float, int: int, int2: int) -> None: ...
    def setLabelY(self, double: float, int: int, int2: int) -> None: ...
    def setLaserAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLaserFrequencyMultiplication(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int, int2: int) -> None: ...
    def setLaserID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserLaserMedium(self, laserMedium: bioformats_jar._ome.xml.model.enums.LaserMedium, int: int, int2: int) -> None: ...
    def setLaserLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserPockelCell(self, boolean: bool, int: int, int2: int) -> None: ...
    def setLaserPower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setLaserPulse(self, pulse: bioformats_jar._ome.xml.model.enums.Pulse, int: int, int2: int) -> None: ...
    def setLaserPump(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserRepetitionRate(self, frequency: bioformats_jar._ome.units.quantity.Frequency, int: int, int2: int) -> None: ...
    def setLaserSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserTuneable(self, boolean: bool, int: int, int2: int) -> None: ...
    def setLaserType(self, laserType: bioformats_jar._ome.xml.model.enums.LaserType, int: int, int2: int) -> None: ...
    def setLaserWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLightEmittingDiodeAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLightEmittingDiodeID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightEmittingDiodeLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightEmittingDiodeManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightEmittingDiodeModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightEmittingDiodePower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setLightEmittingDiodeSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightPathAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLightPathDichroicRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightPathEmissionFilterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLightPathExcitationFilterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLineAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLineFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setLineFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setLineFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setLineFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLineFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setLineID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLineLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setLineMarkerEnd(self, marker: bioformats_jar._ome.xml.model.enums.Marker, int: int, int2: int) -> None: ...
    def setLineMarkerStart(self, marker: bioformats_jar._ome.xml.model.enums.Marker, int: int, int2: int) -> None: ...
    def setLineStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setLineStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLineStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLineText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLineTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLineTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLineTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLineTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setLineX1(self, double: float, int: int, int2: int) -> None: ...
    def setLineX2(self, double: float, int: int, int2: int) -> None: ...
    def setLineY1(self, double: float, int: int, int2: int) -> None: ...
    def setLineY2(self, double: float, int: int, int2: int) -> None: ...
    def setListAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setListAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setListAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setListAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setListAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLongAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationValue(self, long: int, int: int) -> None: ...
    def setMapAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMapAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMapAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMapAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMapAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMapAnnotationValue(self, list: java.util.List[bioformats_jar._ome.xml.model.MapPair], int: int) -> None: ...
    def setMaskAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setMaskBinData(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    def setMaskBinDataBigEndian(self, boolean: bool, int: int, int2: int) -> None: ...
    def setMaskBinDataCompression(self, compression: bioformats_jar._ome.xml.model.enums.Compression, int: int, int2: int) -> None: ...
    def setMaskBinDataLength(self, nonNegativeLong: bioformats_jar._ome.xml.model.primitives.NonNegativeLong, int: int, int2: int) -> None: ...
    def setMaskFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setMaskFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setMaskFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setMaskFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setMaskFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setMaskHeight(self, double: float, int: int, int2: int) -> None: ...
    def setMaskID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMaskLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setMaskStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setMaskStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMaskStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setMaskText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMaskTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setMaskTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setMaskTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setMaskTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setMaskWidth(self, double: float, int: int, int2: int) -> None: ...
    def setMaskX(self, double: float, int: int, int2: int) -> None: ...
    def setMaskY(self, double: float, int: int, int2: int) -> None: ...
    def setMicrobeamManipulationDescription(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMicrobeamManipulationExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMicrobeamManipulationID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMicrobeamManipulationLightSourceSettingsAttenuation(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int, int2: int, int3: int) -> None: ...
    def setMicrobeamManipulationLightSourceSettingsID(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setMicrobeamManipulationLightSourceSettingsWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int, int3: int) -> None: ...
    def setMicrobeamManipulationROIRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setMicrobeamManipulationType(self, microbeamManipulationType: bioformats_jar._ome.xml.model.enums.MicrobeamManipulationType, int: int, int2: int) -> None: ...
    def setMicroscopeLotNumber(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMicroscopeManufacturer(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMicroscopeModel(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMicroscopeSerialNumber(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMicroscopeType(self, microscopeType: bioformats_jar._ome.xml.model.enums.MicroscopeType, int: int) -> None: ...
    def setObjectiveAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setObjectiveCalibratedMagnification(self, double: float, int: int, int2: int) -> None: ...
    def setObjectiveCorrection(self, correction: bioformats_jar._ome.xml.model.enums.Correction, int: int, int2: int) -> None: ...
    def setObjectiveID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveImmersion(self, immersion: bioformats_jar._ome.xml.model.enums.Immersion, int: int, int2: int) -> None: ...
    def setObjectiveIris(self, boolean: bool, int: int, int2: int) -> None: ...
    def setObjectiveLensNA(self, double: float, int: int, int2: int) -> None: ...
    def setObjectiveLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveNominalMagnification(self, double: float, int: int, int2: int) -> None: ...
    def setObjectiveSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveSettingsCorrectionCollar(self, double: float, int: int) -> None: ...
    def setObjectiveSettingsID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setObjectiveSettingsMedium(self, medium: bioformats_jar._ome.xml.model.enums.Medium, int: int) -> None: ...
    def setObjectiveSettingsRefractiveIndex(self, double: float, int: int) -> None: ...
    def setObjectiveWorkingDistance(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPixelsBigEndian(self, boolean: bool, int: int) -> None: ...
    def setPixelsBinData(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    def setPixelsBinDataBigEndian(self, boolean: bool, int: int, int2: int) -> None: ...
    def setPixelsBinDataCompression(self, compression: bioformats_jar._ome.xml.model.enums.Compression, int: int, int2: int) -> None: ...
    def setPixelsBinDataLength(self, nonNegativeLong: bioformats_jar._ome.xml.model.primitives.NonNegativeLong, int: int, int2: int) -> None: ...
    def setPixelsDimensionOrder(self, dimensionOrder: bioformats_jar._ome.xml.model.enums.DimensionOrder, int: int) -> None: ...
    def setPixelsID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPixelsInterleaved(self, boolean: bool, int: int) -> None: ...
    def setPixelsPhysicalSizeX(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPixelsPhysicalSizeY(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPixelsPhysicalSizeZ(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPixelsSignificantBits(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeC(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeT(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeX(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeY(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeZ(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsTimeIncrement(self, time: bioformats_jar._ome.units.quantity.Time, int: int) -> None: ...
    def setPixelsType(self, pixelType: bioformats_jar._ome.xml.model.enums.PixelType, int: int) -> None: ...
    def setPlaneAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPlaneDeltaT(self, time: bioformats_jar._ome.units.quantity.Time, int: int, int2: int) -> None: ...
    def setPlaneExposureTime(self, time: bioformats_jar._ome.units.quantity.Time, int: int, int2: int) -> None: ...
    def setPlaneHashSHA1(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlanePositionX(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPlanePositionY(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPlanePositionZ(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPlaneTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPlaneTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPlaneTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPlateAcquisitionAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPlateAcquisitionDescription(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlateAcquisitionEndTime(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int, int2: int) -> None: ...
    def setPlateAcquisitionID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlateAcquisitionMaximumFieldCount(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int, int2: int) -> None: ...
    def setPlateAcquisitionName(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlateAcquisitionStartTime(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int, int2: int) -> None: ...
    def setPlateAcquisitionWellSampleRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPlateAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlateColumnNamingConvention(self, namingConvention: bioformats_jar._ome.xml.model.enums.NamingConvention, int: int) -> None: ...
    def setPlateColumns(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPlateDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateExternalIdentifier(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateFieldIndex(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int) -> None: ...
    def setPlateID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateRowNamingConvention(self, namingConvention: bioformats_jar._ome.xml.model.enums.NamingConvention, int: int) -> None: ...
    def setPlateRows(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPlateStatus(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateWellOriginX(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPlateWellOriginY(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPointAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPointFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPointFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setPointFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setPointFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPointFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setPointID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPointLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setPointStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPointStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPointStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPointText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPointTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPointTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPointTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPointTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setPointX(self, double: float, int: int, int2: int) -> None: ...
    def setPointY(self, double: float, int: int, int2: int) -> None: ...
    def setPolygonAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPolygonFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPolygonFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setPolygonFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setPolygonFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPolygonFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setPolygonID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolygonLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setPolygonPoints(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolygonStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPolygonStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolygonStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPolygonText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolygonTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolygonTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolygonTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolygonTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setPolylineAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPolylineFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPolylineFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setPolylineFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setPolylineFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPolylineFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setPolylineID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolylineLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setPolylineMarkerEnd(self, marker: bioformats_jar._ome.xml.model.enums.Marker, int: int, int2: int) -> None: ...
    def setPolylineMarkerStart(self, marker: bioformats_jar._ome.xml.model.enums.Marker, int: int, int2: int) -> None: ...
    def setPolylinePoints(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolylineStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPolylineStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolylineStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPolylineText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolylineTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolylineTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolylineTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolylineTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setProjectAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setProjectDatasetRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setProjectDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setProjectExperimenterGroupRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setProjectExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setProjectID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setProjectName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setROIAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setROIDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setROIID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setROIName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setReagentAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setReagentDescription(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setReagentID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setReagentName(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setReagentReagentIdentifier(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setRectangleAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setRectangleFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setRectangleFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setRectangleFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setRectangleFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setRectangleFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setRectangleHeight(self, double: float, int: int, int2: int) -> None: ...
    def setRectangleID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setRectangleLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setRectangleStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setRectangleStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setRectangleStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setRectangleText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setRectangleTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setRectangleTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setRectangleTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setRectangleTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setRectangleWidth(self, double: float, int: int, int2: int) -> None: ...
    def setRectangleX(self, double: float, int: int, int2: int) -> None: ...
    def setRectangleY(self, double: float, int: int, int2: int) -> None: ...
    def setRightsRightsHeld(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setRightsRightsHolder(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setRoot(self, metadataRoot: MetadataRoot) -> None: ...
    def setScreenAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setScreenDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenPlateRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setScreenProtocolDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenProtocolIdentifier(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenReagentSetDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenReagentSetIdentifier(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenType(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setStageLabelName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setStageLabelX(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setStageLabelY(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setStageLabelZ(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setTagAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setTagAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTagAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTagAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTagAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTagAnnotationValue(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setTermAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationValue(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTiffDataFirstC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTiffDataFirstT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTiffDataFirstZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTiffDataIFD(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTiffDataPlaneCount(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTimestampAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setTimestampAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTimestampAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTimestampAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTimestampAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTimestampAnnotationValue(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int) -> None: ...
    def setTransmittanceRangeCutIn(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setTransmittanceRangeCutInTolerance(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setTransmittanceRangeCutOut(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setTransmittanceRangeCutOutTolerance(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setTransmittanceRangeTransmittance(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int, int2: int) -> None: ...
    def setUUID(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setUUIDFileName(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setUUIDValue(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setWellColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setWellColumn(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setWellExternalDescription(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellExternalIdentifier(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellReagentRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellRow(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setWellSampleID(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setWellSampleImageRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setWellSampleIndex(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int, int3: int) -> None: ...
    def setWellSamplePositionX(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int, int3: int) -> None: ...
    def setWellSamplePositionY(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int, int3: int) -> None: ...
    def setWellSampleTimepoint(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int, int2: int, int3: int) -> None: ...
    def setWellType(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setXMLAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setXMLAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setXMLAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setXMLAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setXMLAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setXMLAnnotationValue(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...

class DummyMetadata(IMetadata):
    def __init__(self): ...
    def createRoot(self) -> None: ...
    def getArcAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getArcID(self, int: int, int2: int) -> java.lang.String: ...
    def getArcLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getArcManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getArcModel(self, int: int, int2: int) -> java.lang.String: ...
    def getArcPower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getArcSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getArcType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.ArcType: ...
    def getBinaryFileBinData(self, int: int) -> typing.List[int]: ...
    def getBinaryFileBinDataBigEndian(self, int: int) -> bool: ...
    def getBinaryFileBinDataCompression(self, int: int) -> bioformats_jar._ome.xml.model.enums.Compression: ...
    def getBinaryFileBinDataLength(self, int: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeLong: ...
    def getBinaryFileFileName(self, int: int) -> java.lang.String: ...
    def getBinaryFileMIMEType(self, int: int) -> java.lang.String: ...
    def getBinaryFileSize(self, int: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeLong: ...
    def getBinaryOnlyMetadataFile(self) -> java.lang.String: ...
    def getBinaryOnlyUUID(self) -> java.lang.String: ...
    def getBooleanAnnotationAnnotationCount(self, int: int) -> int: ...
    def getBooleanAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getBooleanAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getBooleanAnnotationCount(self) -> int: ...
    def getBooleanAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getBooleanAnnotationID(self, int: int) -> java.lang.String: ...
    def getBooleanAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getBooleanAnnotationValue(self, int: int) -> bool: ...
    def getChannelAcquisitionMode(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.AcquisitionMode: ...
    def getChannelAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getChannelAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getChannelColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getChannelContrastMethod(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.ContrastMethod: ...
    def getChannelCount(self, int: int) -> int: ...
    def getChannelEmissionWavelength(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getChannelExcitationWavelength(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getChannelFilterSetRef(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelFluor(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelID(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelIlluminationType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.IlluminationType: ...
    def getChannelLightSourceSettingsAttenuation(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getChannelLightSourceSettingsID(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelLightSourceSettingsWavelength(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getChannelNDFilter(self, int: int, int2: int) -> float: ...
    def getChannelName(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelPinholeSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getChannelPockelCellSetting(self, int: int, int2: int) -> int: ...
    def getChannelSamplesPerPixel(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getCommentAnnotationAnnotationCount(self, int: int) -> int: ...
    def getCommentAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getCommentAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getCommentAnnotationCount(self) -> int: ...
    def getCommentAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getCommentAnnotationID(self, int: int) -> java.lang.String: ...
    def getCommentAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getCommentAnnotationValue(self, int: int) -> java.lang.String: ...
    def getDatasetAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getDatasetAnnotationRefCount(self, int: int) -> int: ...
    def getDatasetCount(self) -> int: ...
    def getDatasetDescription(self, int: int) -> java.lang.String: ...
    def getDatasetExperimenterGroupRef(self, int: int) -> java.lang.String: ...
    def getDatasetExperimenterRef(self, int: int) -> java.lang.String: ...
    def getDatasetID(self, int: int) -> java.lang.String: ...
    def getDatasetImageRef(self, int: int, int2: int) -> java.lang.String: ...
    def getDatasetImageRefCount(self, int: int) -> int: ...
    def getDatasetName(self, int: int) -> java.lang.String: ...
    def getDatasetRefCount(self, int: int) -> int: ...
    def getDetectorAmplificationGain(self, int: int, int2: int) -> float: ...
    def getDetectorAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getDetectorAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getDetectorCount(self, int: int) -> int: ...
    def getDetectorGain(self, int: int, int2: int) -> float: ...
    def getDetectorID(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorModel(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorOffset(self, int: int, int2: int) -> float: ...
    def getDetectorSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorSettingsBinning(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Binning: ...
    def getDetectorSettingsGain(self, int: int, int2: int) -> float: ...
    def getDetectorSettingsID(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorSettingsIntegration(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getDetectorSettingsOffset(self, int: int, int2: int) -> float: ...
    def getDetectorSettingsReadOutRate(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Frequency: ...
    def getDetectorSettingsVoltage(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.ElectricPotential: ...
    def getDetectorSettingsZoom(self, int: int, int2: int) -> float: ...
    def getDetectorType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.DetectorType: ...
    def getDetectorVoltage(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.ElectricPotential: ...
    def getDetectorZoom(self, int: int, int2: int) -> float: ...
    def getDichroicAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getDichroicAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getDichroicCount(self, int: int) -> int: ...
    def getDichroicID(self, int: int, int2: int) -> java.lang.String: ...
    def getDichroicLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getDichroicManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getDichroicModel(self, int: int, int2: int) -> java.lang.String: ...
    def getDichroicSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getDoubleAnnotationAnnotationCount(self, int: int) -> int: ...
    def getDoubleAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getDoubleAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getDoubleAnnotationCount(self) -> int: ...
    def getDoubleAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getDoubleAnnotationID(self, int: int) -> java.lang.String: ...
    def getDoubleAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getDoubleAnnotationValue(self, int: int) -> float: ...
    def getEllipseAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getEllipseFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getEllipseFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getEllipseFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getEllipseFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getEllipseFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getEllipseID(self, int: int, int2: int) -> java.lang.String: ...
    def getEllipseLocked(self, int: int, int2: int) -> bool: ...
    def getEllipseRadiusX(self, int: int, int2: int) -> float: ...
    def getEllipseRadiusY(self, int: int, int2: int) -> float: ...
    def getEllipseStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getEllipseStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getEllipseStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getEllipseText(self, int: int, int2: int) -> java.lang.String: ...
    def getEllipseTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getEllipseTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getEllipseTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getEllipseTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getEllipseX(self, int: int, int2: int) -> float: ...
    def getEllipseY(self, int: int, int2: int) -> float: ...
    def getExperimentCount(self) -> int: ...
    def getExperimentDescription(self, int: int) -> java.lang.String: ...
    def getExperimentExperimenterRef(self, int: int) -> java.lang.String: ...
    def getExperimentID(self, int: int) -> java.lang.String: ...
    def getExperimentType(self, int: int) -> bioformats_jar._ome.xml.model.enums.ExperimentType: ...
    def getExperimenterAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getExperimenterAnnotationRefCount(self, int: int) -> int: ...
    def getExperimenterCount(self) -> int: ...
    def getExperimenterEmail(self, int: int) -> java.lang.String: ...
    def getExperimenterFirstName(self, int: int) -> java.lang.String: ...
    def getExperimenterGroupAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getExperimenterGroupAnnotationRefCount(self, int: int) -> int: ...
    def getExperimenterGroupCount(self) -> int: ...
    def getExperimenterGroupDescription(self, int: int) -> java.lang.String: ...
    def getExperimenterGroupExperimenterRef(self, int: int, int2: int) -> java.lang.String: ...
    def getExperimenterGroupExperimenterRefCount(self, int: int) -> int: ...
    def getExperimenterGroupID(self, int: int) -> java.lang.String: ...
    def getExperimenterGroupLeader(self, int: int, int2: int) -> java.lang.String: ...
    def getExperimenterGroupName(self, int: int) -> java.lang.String: ...
    def getExperimenterID(self, int: int) -> java.lang.String: ...
    def getExperimenterInstitution(self, int: int) -> java.lang.String: ...
    def getExperimenterLastName(self, int: int) -> java.lang.String: ...
    def getExperimenterMiddleName(self, int: int) -> java.lang.String: ...
    def getExperimenterUserName(self, int: int) -> java.lang.String: ...
    def getFilamentAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getFilamentID(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentModel(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentPower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getFilamentSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FilamentType: ...
    def getFileAnnotationAnnotationCount(self, int: int) -> int: ...
    def getFileAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFileAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getFileAnnotationCount(self) -> int: ...
    def getFileAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getFileAnnotationID(self, int: int) -> java.lang.String: ...
    def getFileAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getFilterAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getFilterAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getFilterCount(self, int: int) -> int: ...
    def getFilterFilterWheel(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterID(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterModel(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetCount(self, int: int) -> int: ...
    def getFilterSetDichroicRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetEmissionFilterRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getFilterSetEmissionFilterRefCount(self, int: int, int2: int) -> int: ...
    def getFilterSetExcitationFilterRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getFilterSetExcitationFilterRefCount(self, int: int, int2: int) -> int: ...
    def getFilterSetID(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetModel(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FilterType: ...
    def getFolderAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFolderAnnotationRefCount(self, int: int) -> int: ...
    def getFolderCount(self) -> int: ...
    def getFolderDescription(self, int: int) -> java.lang.String: ...
    def getFolderFolderRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFolderID(self, int: int) -> java.lang.String: ...
    def getFolderImageRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFolderImageRefCount(self, int: int) -> int: ...
    def getFolderName(self, int: int) -> java.lang.String: ...
    def getFolderROIRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFolderROIRefCount(self, int: int) -> int: ...
    def getFolderRefCount(self, int: int) -> int: ...
    def getGenericExcitationSourceAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getGenericExcitationSourceID(self, int: int, int2: int) -> java.lang.String: ...
    def getGenericExcitationSourceLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getGenericExcitationSourceManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getGenericExcitationSourceMap(self, int: int, int2: int) -> java.util.List[bioformats_jar._ome.xml.model.MapPair]: ...
    def getGenericExcitationSourceModel(self, int: int, int2: int) -> java.lang.String: ...
    def getGenericExcitationSourcePower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getGenericExcitationSourceSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getImageAcquisitionDate(self, int: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getImageAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getImageAnnotationRefCount(self, int: int) -> int: ...
    def getImageCount(self) -> int: ...
    def getImageDescription(self, int: int) -> java.lang.String: ...
    def getImageExperimentRef(self, int: int) -> java.lang.String: ...
    def getImageExperimenterGroupRef(self, int: int) -> java.lang.String: ...
    def getImageExperimenterRef(self, int: int) -> java.lang.String: ...
    def getImageID(self, int: int) -> java.lang.String: ...
    def getImageInstrumentRef(self, int: int) -> java.lang.String: ...
    def getImageMicrobeamManipulationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getImageName(self, int: int) -> java.lang.String: ...
    def getImageROIRef(self, int: int, int2: int) -> java.lang.String: ...
    def getImageROIRefCount(self, int: int) -> int: ...
    def getImagingEnvironmentAirPressure(self, int: int) -> bioformats_jar._ome.units.quantity.Pressure: ...
    def getImagingEnvironmentCO2Percent(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getImagingEnvironmentHumidity(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getImagingEnvironmentMap(self, int: int) -> java.util.List[bioformats_jar._ome.xml.model.MapPair]: ...
    def getImagingEnvironmentTemperature(self, int: int) -> bioformats_jar._ome.units.quantity.Temperature: ...
    def getInstrumentAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getInstrumentAnnotationRefCount(self, int: int) -> int: ...
    def getInstrumentCount(self) -> int: ...
    def getInstrumentID(self, int: int) -> java.lang.String: ...
    def getLabelAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLabelFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getLabelFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getLabelFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getLabelFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLabelFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getLabelID(self, int: int, int2: int) -> java.lang.String: ...
    def getLabelLocked(self, int: int, int2: int) -> bool: ...
    def getLabelStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getLabelStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getLabelStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLabelText(self, int: int, int2: int) -> java.lang.String: ...
    def getLabelTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLabelTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLabelTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLabelTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getLabelX(self, int: int, int2: int) -> float: ...
    def getLabelY(self, int: int, int2: int) -> float: ...
    def getLaserAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLaserFrequencyMultiplication(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getLaserID(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserLaserMedium(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.LaserMedium: ...
    def getLaserLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserModel(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserPockelCell(self, int: int, int2: int) -> bool: ...
    def getLaserPower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getLaserPulse(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Pulse: ...
    def getLaserPump(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserRepetitionRate(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Frequency: ...
    def getLaserSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserTuneable(self, int: int, int2: int) -> bool: ...
    def getLaserType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.LaserType: ...
    def getLaserWavelength(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLeaderCount(self, int: int) -> int: ...
    def getLightEmittingDiodeAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLightEmittingDiodeID(self, int: int, int2: int) -> java.lang.String: ...
    def getLightEmittingDiodeLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getLightEmittingDiodeManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getLightEmittingDiodeModel(self, int: int, int2: int) -> java.lang.String: ...
    def getLightEmittingDiodePower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getLightEmittingDiodeSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getLightPathAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLightPathAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getLightPathDichroicRef(self, int: int, int2: int) -> java.lang.String: ...
    def getLightPathEmissionFilterRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLightPathEmissionFilterRefCount(self, int: int, int2: int) -> int: ...
    def getLightPathExcitationFilterRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLightPathExcitationFilterRefCount(self, int: int, int2: int) -> int: ...
    def getLightSourceAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getLightSourceCount(self, int: int) -> int: ...
    def getLightSourceType(self, int: int, int2: int) -> java.lang.String: ...
    def getLineAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLineFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getLineFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getLineFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getLineFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLineFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getLineID(self, int: int, int2: int) -> java.lang.String: ...
    def getLineLocked(self, int: int, int2: int) -> bool: ...
    def getLineMarkerEnd(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Marker: ...
    def getLineMarkerStart(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Marker: ...
    def getLineStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getLineStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getLineStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLineText(self, int: int, int2: int) -> java.lang.String: ...
    def getLineTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLineTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLineTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLineTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getLineX1(self, int: int, int2: int) -> float: ...
    def getLineX2(self, int: int, int2: int) -> float: ...
    def getLineY1(self, int: int, int2: int) -> float: ...
    def getLineY2(self, int: int, int2: int) -> float: ...
    def getListAnnotationAnnotationCount(self, int: int) -> int: ...
    def getListAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getListAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getListAnnotationCount(self) -> int: ...
    def getListAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getListAnnotationID(self, int: int) -> java.lang.String: ...
    def getListAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getLongAnnotationAnnotationCount(self, int: int) -> int: ...
    def getLongAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getLongAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getLongAnnotationCount(self) -> int: ...
    def getLongAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getLongAnnotationID(self, int: int) -> java.lang.String: ...
    def getLongAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getLongAnnotationValue(self, int: int) -> int: ...
    def getMapAnnotationAnnotationCount(self, int: int) -> int: ...
    def getMapAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getMapAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getMapAnnotationCount(self) -> int: ...
    def getMapAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getMapAnnotationID(self, int: int) -> java.lang.String: ...
    def getMapAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getMapAnnotationValue(self, int: int) -> java.util.List[bioformats_jar._ome.xml.model.MapPair]: ...
    def getMaskAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getMaskBinData(self, int: int, int2: int) -> typing.List[int]: ...
    def getMaskBinDataBigEndian(self, int: int, int2: int) -> bool: ...
    def getMaskBinDataCompression(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Compression: ...
    def getMaskBinDataLength(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeLong: ...
    def getMaskFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getMaskFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getMaskFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getMaskFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getMaskFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getMaskHeight(self, int: int, int2: int) -> float: ...
    def getMaskID(self, int: int, int2: int) -> java.lang.String: ...
    def getMaskLocked(self, int: int, int2: int) -> bool: ...
    def getMaskStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getMaskStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getMaskStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getMaskText(self, int: int, int2: int) -> java.lang.String: ...
    def getMaskTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getMaskTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getMaskTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getMaskTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getMaskWidth(self, int: int, int2: int) -> float: ...
    def getMaskX(self, int: int, int2: int) -> float: ...
    def getMaskY(self, int: int, int2: int) -> float: ...
    def getMicrobeamManipulationCount(self, int: int) -> int: ...
    def getMicrobeamManipulationDescription(self, int: int, int2: int) -> java.lang.String: ...
    def getMicrobeamManipulationExperimenterRef(self, int: int, int2: int) -> java.lang.String: ...
    def getMicrobeamManipulationID(self, int: int, int2: int) -> java.lang.String: ...
    def getMicrobeamManipulationLightSourceSettingsAttenuation(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getMicrobeamManipulationLightSourceSettingsCount(self, int: int, int2: int) -> int: ...
    def getMicrobeamManipulationLightSourceSettingsID(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getMicrobeamManipulationLightSourceSettingsWavelength(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getMicrobeamManipulationROIRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getMicrobeamManipulationROIRefCount(self, int: int, int2: int) -> int: ...
    def getMicrobeamManipulationRefCount(self, int: int) -> int: ...
    def getMicrobeamManipulationType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.MicrobeamManipulationType: ...
    def getMicroscopeLotNumber(self, int: int) -> java.lang.String: ...
    def getMicroscopeManufacturer(self, int: int) -> java.lang.String: ...
    def getMicroscopeModel(self, int: int) -> java.lang.String: ...
    def getMicroscopeSerialNumber(self, int: int) -> java.lang.String: ...
    def getMicroscopeType(self, int: int) -> bioformats_jar._ome.xml.model.enums.MicroscopeType: ...
    def getObjectiveAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getObjectiveAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getObjectiveCalibratedMagnification(self, int: int, int2: int) -> float: ...
    def getObjectiveCorrection(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Correction: ...
    def getObjectiveCount(self, int: int) -> int: ...
    def getObjectiveID(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveImmersion(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Immersion: ...
    def getObjectiveIris(self, int: int, int2: int) -> bool: ...
    def getObjectiveLensNA(self, int: int, int2: int) -> float: ...
    def getObjectiveLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveModel(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveNominalMagnification(self, int: int, int2: int) -> float: ...
    def getObjectiveSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveSettingsCorrectionCollar(self, int: int) -> float: ...
    def getObjectiveSettingsID(self, int: int) -> java.lang.String: ...
    def getObjectiveSettingsMedium(self, int: int) -> bioformats_jar._ome.xml.model.enums.Medium: ...
    def getObjectiveSettingsRefractiveIndex(self, int: int) -> float: ...
    def getObjectiveWorkingDistance(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPixelsBigEndian(self, int: int) -> bool: ...
    def getPixelsBinData(self, int: int, int2: int) -> typing.List[int]: ...
    def getPixelsBinDataBigEndian(self, int: int, int2: int) -> bool: ...
    def getPixelsBinDataCompression(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Compression: ...
    def getPixelsBinDataCount(self, int: int) -> int: ...
    def getPixelsBinDataLength(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeLong: ...
    def getPixelsDimensionOrder(self, int: int) -> bioformats_jar._ome.xml.model.enums.DimensionOrder: ...
    def getPixelsID(self, int: int) -> java.lang.String: ...
    def getPixelsInterleaved(self, int: int) -> bool: ...
    def getPixelsPhysicalSizeX(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPixelsPhysicalSizeY(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPixelsPhysicalSizeZ(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPixelsSignificantBits(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeC(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeT(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeX(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeY(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeZ(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsTimeIncrement(self, int: int) -> bioformats_jar._ome.units.quantity.Time: ...
    def getPixelsType(self, int: int) -> bioformats_jar._ome.xml.model.enums.PixelType: ...
    def getPlaneAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPlaneAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getPlaneCount(self, int: int) -> int: ...
    def getPlaneDeltaT(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Time: ...
    def getPlaneExposureTime(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Time: ...
    def getPlaneHashSHA1(self, int: int, int2: int) -> java.lang.String: ...
    def getPlanePositionX(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPlanePositionY(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPlanePositionZ(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPlaneTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPlaneTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPlaneTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPlateAcquisitionAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPlateAcquisitionAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getPlateAcquisitionCount(self, int: int) -> int: ...
    def getPlateAcquisitionDescription(self, int: int, int2: int) -> java.lang.String: ...
    def getPlateAcquisitionEndTime(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getPlateAcquisitionID(self, int: int, int2: int) -> java.lang.String: ...
    def getPlateAcquisitionMaximumFieldCount(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPlateAcquisitionName(self, int: int, int2: int) -> java.lang.String: ...
    def getPlateAcquisitionStartTime(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getPlateAcquisitionWellSampleRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPlateAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getPlateAnnotationRefCount(self, int: int) -> int: ...
    def getPlateColumnNamingConvention(self, int: int) -> bioformats_jar._ome.xml.model.enums.NamingConvention: ...
    def getPlateColumns(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPlateCount(self) -> int: ...
    def getPlateDescription(self, int: int) -> java.lang.String: ...
    def getPlateExternalIdentifier(self, int: int) -> java.lang.String: ...
    def getPlateFieldIndex(self, int: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPlateID(self, int: int) -> java.lang.String: ...
    def getPlateName(self, int: int) -> java.lang.String: ...
    def getPlateRefCount(self, int: int) -> int: ...
    def getPlateRowNamingConvention(self, int: int) -> bioformats_jar._ome.xml.model.enums.NamingConvention: ...
    def getPlateRows(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPlateStatus(self, int: int) -> java.lang.String: ...
    def getPlateWellOriginX(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPlateWellOriginY(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPointAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPointFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPointFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getPointFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getPointFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPointFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getPointID(self, int: int, int2: int) -> java.lang.String: ...
    def getPointLocked(self, int: int, int2: int) -> bool: ...
    def getPointStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPointStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getPointStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPointText(self, int: int, int2: int) -> java.lang.String: ...
    def getPointTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPointTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPointTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPointTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getPointX(self, int: int, int2: int) -> float: ...
    def getPointY(self, int: int, int2: int) -> float: ...
    def getPolygonAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPolygonFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPolygonFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getPolygonFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getPolygonFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPolygonFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getPolygonID(self, int: int, int2: int) -> java.lang.String: ...
    def getPolygonLocked(self, int: int, int2: int) -> bool: ...
    def getPolygonPoints(self, int: int, int2: int) -> java.lang.String: ...
    def getPolygonStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPolygonStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getPolygonStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPolygonText(self, int: int, int2: int) -> java.lang.String: ...
    def getPolygonTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolygonTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolygonTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolygonTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getPolylineAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPolylineFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPolylineFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getPolylineFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getPolylineFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPolylineFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getPolylineID(self, int: int, int2: int) -> java.lang.String: ...
    def getPolylineLocked(self, int: int, int2: int) -> bool: ...
    def getPolylineMarkerEnd(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Marker: ...
    def getPolylineMarkerStart(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Marker: ...
    def getPolylinePoints(self, int: int, int2: int) -> java.lang.String: ...
    def getPolylineStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPolylineStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getPolylineStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPolylineText(self, int: int, int2: int) -> java.lang.String: ...
    def getPolylineTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolylineTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolylineTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolylineTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getProjectAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getProjectAnnotationRefCount(self, int: int) -> int: ...
    def getProjectCount(self) -> int: ...
    def getProjectDatasetRef(self, int: int, int2: int) -> java.lang.String: ...
    def getProjectDescription(self, int: int) -> java.lang.String: ...
    def getProjectExperimenterGroupRef(self, int: int) -> java.lang.String: ...
    def getProjectExperimenterRef(self, int: int) -> java.lang.String: ...
    def getProjectID(self, int: int) -> java.lang.String: ...
    def getProjectName(self, int: int) -> java.lang.String: ...
    def getROIAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getROIAnnotationRefCount(self, int: int) -> int: ...
    def getROICount(self) -> int: ...
    def getROIDescription(self, int: int) -> java.lang.String: ...
    def getROIID(self, int: int) -> java.lang.String: ...
    def getROIName(self, int: int) -> java.lang.String: ...
    def getReagentAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getReagentAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getReagentCount(self, int: int) -> int: ...
    def getReagentDescription(self, int: int, int2: int) -> java.lang.String: ...
    def getReagentID(self, int: int, int2: int) -> java.lang.String: ...
    def getReagentName(self, int: int, int2: int) -> java.lang.String: ...
    def getReagentReagentIdentifier(self, int: int, int2: int) -> java.lang.String: ...
    def getRectangleAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getRectangleFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getRectangleFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getRectangleFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getRectangleFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getRectangleFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getRectangleHeight(self, int: int, int2: int) -> float: ...
    def getRectangleID(self, int: int, int2: int) -> java.lang.String: ...
    def getRectangleLocked(self, int: int, int2: int) -> bool: ...
    def getRectangleStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getRectangleStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getRectangleStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getRectangleText(self, int: int, int2: int) -> java.lang.String: ...
    def getRectangleTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getRectangleTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getRectangleTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getRectangleTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getRectangleWidth(self, int: int, int2: int) -> float: ...
    def getRectangleX(self, int: int, int2: int) -> float: ...
    def getRectangleY(self, int: int, int2: int) -> float: ...
    def getRightsRightsHeld(self) -> java.lang.String: ...
    def getRightsRightsHolder(self) -> java.lang.String: ...
    def getRoot(self) -> MetadataRoot: ...
    def getScreenAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getScreenAnnotationRefCount(self, int: int) -> int: ...
    def getScreenCount(self) -> int: ...
    def getScreenDescription(self, int: int) -> java.lang.String: ...
    def getScreenID(self, int: int) -> java.lang.String: ...
    def getScreenName(self, int: int) -> java.lang.String: ...
    def getScreenPlateRef(self, int: int, int2: int) -> java.lang.String: ...
    def getScreenProtocolDescription(self, int: int) -> java.lang.String: ...
    def getScreenProtocolIdentifier(self, int: int) -> java.lang.String: ...
    def getScreenReagentSetDescription(self, int: int) -> java.lang.String: ...
    def getScreenReagentSetIdentifier(self, int: int) -> java.lang.String: ...
    def getScreenType(self, int: int) -> java.lang.String: ...
    def getShapeAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getShapeCount(self, int: int) -> int: ...
    def getShapeType(self, int: int, int2: int) -> java.lang.String: ...
    def getStageLabelName(self, int: int) -> java.lang.String: ...
    def getStageLabelX(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getStageLabelY(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getStageLabelZ(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTagAnnotationAnnotationCount(self, int: int) -> int: ...
    def getTagAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getTagAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getTagAnnotationCount(self) -> int: ...
    def getTagAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getTagAnnotationID(self, int: int) -> java.lang.String: ...
    def getTagAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getTagAnnotationValue(self, int: int) -> java.lang.String: ...
    def getTermAnnotationAnnotationCount(self, int: int) -> int: ...
    def getTermAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getTermAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getTermAnnotationCount(self) -> int: ...
    def getTermAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getTermAnnotationID(self, int: int) -> java.lang.String: ...
    def getTermAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getTermAnnotationValue(self, int: int) -> java.lang.String: ...
    def getTiffDataCount(self, int: int) -> int: ...
    def getTiffDataFirstC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTiffDataFirstT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTiffDataFirstZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTiffDataIFD(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTiffDataPlaneCount(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTimestampAnnotationAnnotationCount(self, int: int) -> int: ...
    def getTimestampAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getTimestampAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getTimestampAnnotationCount(self) -> int: ...
    def getTimestampAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getTimestampAnnotationID(self, int: int) -> java.lang.String: ...
    def getTimestampAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getTimestampAnnotationValue(self, int: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getTransmittanceRangeCutIn(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTransmittanceRangeCutInTolerance(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTransmittanceRangeCutOut(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTransmittanceRangeCutOutTolerance(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTransmittanceRangeTransmittance(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getUUID(self) -> java.lang.String: ...
    def getUUIDFileName(self, int: int, int2: int) -> java.lang.String: ...
    def getUUIDValue(self, int: int, int2: int) -> java.lang.String: ...
    def getWellAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getWellAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getWellColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getWellColumn(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getWellCount(self, int: int) -> int: ...
    def getWellExternalDescription(self, int: int, int2: int) -> java.lang.String: ...
    def getWellExternalIdentifier(self, int: int, int2: int) -> java.lang.String: ...
    def getWellID(self, int: int, int2: int) -> java.lang.String: ...
    def getWellReagentRef(self, int: int, int2: int) -> java.lang.String: ...
    def getWellRow(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getWellSampleCount(self, int: int, int2: int) -> int: ...
    def getWellSampleID(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getWellSampleImageRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getWellSampleIndex(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getWellSamplePositionX(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getWellSamplePositionY(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getWellSampleRefCount(self, int: int, int2: int) -> int: ...
    def getWellSampleTimepoint(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getWellType(self, int: int, int2: int) -> java.lang.String: ...
    def getXMLAnnotationAnnotationCount(self, int: int) -> int: ...
    def getXMLAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getXMLAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getXMLAnnotationCount(self) -> int: ...
    def getXMLAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getXMLAnnotationID(self, int: int) -> java.lang.String: ...
    def getXMLAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getXMLAnnotationValue(self, int: int) -> java.lang.String: ...
    def setArcAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setArcID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcPower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setArcSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcType(self, arcType: bioformats_jar._ome.xml.model.enums.ArcType, int: int, int2: int) -> None: ...
    def setBinaryFileBinData(self, byteArray: typing.List[int], int: int) -> None: ...
    def setBinaryFileBinDataBigEndian(self, boolean: bool, int: int) -> None: ...
    def setBinaryFileBinDataCompression(self, compression: bioformats_jar._ome.xml.model.enums.Compression, int: int) -> None: ...
    def setBinaryFileBinDataLength(self, nonNegativeLong: bioformats_jar._ome.xml.model.primitives.NonNegativeLong, int: int) -> None: ...
    def setBinaryFileFileName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBinaryFileMIMEType(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBinaryFileSize(self, nonNegativeLong: bioformats_jar._ome.xml.model.primitives.NonNegativeLong, int: int) -> None: ...
    def setBinaryOnlyMetadataFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setBinaryOnlyUUID(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setBooleanAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setBooleanAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBooleanAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBooleanAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBooleanAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBooleanAnnotationValue(self, boolean: bool, int: int) -> None: ...
    def setChannelAcquisitionMode(self, acquisitionMode: bioformats_jar._ome.xml.model.enums.AcquisitionMode, int: int, int2: int) -> None: ...
    def setChannelAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setChannelColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setChannelContrastMethod(self, contrastMethod: bioformats_jar._ome.xml.model.enums.ContrastMethod, int: int, int2: int) -> None: ...
    def setChannelEmissionWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setChannelExcitationWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setChannelFilterSetRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelFluor(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelIlluminationType(self, illuminationType: bioformats_jar._ome.xml.model.enums.IlluminationType, int: int, int2: int) -> None: ...
    def setChannelLightSourceSettingsAttenuation(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int, int2: int) -> None: ...
    def setChannelLightSourceSettingsID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelLightSourceSettingsWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setChannelNDFilter(self, double: float, int: int, int2: int) -> None: ...
    def setChannelName(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelPinholeSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setChannelPockelCellSetting(self, integer: int, int2: int, int3: int) -> None: ...
    def setChannelSamplesPerPixel(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int, int2: int) -> None: ...
    def setCommentAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setCommentAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCommentAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCommentAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCommentAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCommentAnnotationValue(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDatasetAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDatasetDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDatasetExperimenterGroupRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDatasetExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDatasetID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDatasetImageRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDatasetName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDetectorAmplificationGain(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setDetectorGain(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorOffset(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorSettingsBinning(self, binning: bioformats_jar._ome.xml.model.enums.Binning, int: int, int2: int) -> None: ...
    def setDetectorSettingsGain(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorSettingsID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorSettingsIntegration(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int, int2: int) -> None: ...
    def setDetectorSettingsOffset(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorSettingsReadOutRate(self, frequency: bioformats_jar._ome.units.quantity.Frequency, int: int, int2: int) -> None: ...
    def setDetectorSettingsVoltage(self, electricPotential: bioformats_jar._ome.units.quantity.ElectricPotential, int: int, int2: int) -> None: ...
    def setDetectorSettingsZoom(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorType(self, detectorType: bioformats_jar._ome.xml.model.enums.DetectorType, int: int, int2: int) -> None: ...
    def setDetectorVoltage(self, electricPotential: bioformats_jar._ome.units.quantity.ElectricPotential, int: int, int2: int) -> None: ...
    def setDetectorZoom(self, double: float, int: int, int2: int) -> None: ...
    def setDichroicAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setDichroicID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDichroicLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDichroicManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDichroicModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDichroicSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDoubleAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDoubleAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDoubleAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDoubleAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDoubleAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDoubleAnnotationValue(self, double: float, int: int) -> None: ...
    def setEllipseAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setEllipseFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setEllipseFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setEllipseFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setEllipseFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setEllipseFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setEllipseID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setEllipseLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setEllipseRadiusX(self, double: float, int: int, int2: int) -> None: ...
    def setEllipseRadiusY(self, double: float, int: int, int2: int) -> None: ...
    def setEllipseStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setEllipseStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setEllipseStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setEllipseText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setEllipseTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setEllipseTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setEllipseTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setEllipseTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setEllipseX(self, double: float, int: int, int2: int) -> None: ...
    def setEllipseY(self, double: float, int: int, int2: int) -> None: ...
    def setExperimentDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimentExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimentID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimentType(self, experimentType: bioformats_jar._ome.xml.model.enums.ExperimentType, int: int) -> None: ...
    def setExperimenterAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setExperimenterEmail(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterFirstName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterGroupAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setExperimenterGroupDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterGroupExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setExperimenterGroupID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterGroupLeader(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setExperimenterGroupName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterInstitution(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterLastName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterMiddleName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterUserName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFilamentAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setFilamentID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentPower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setFilamentSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentType(self, filamentType: bioformats_jar._ome.xml.model.enums.FilamentType, int: int, int2: int) -> None: ...
    def setFileAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFileAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFileAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFileAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFileAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFilterAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setFilterFilterWheel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetDichroicRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetEmissionFilterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setFilterSetExcitationFilterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setFilterSetID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterType(self, filterType: bioformats_jar._ome.xml.model.enums.FilterType, int: int, int2: int) -> None: ...
    def setFolderAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFolderDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFolderFolderRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFolderID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFolderImageRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFolderName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFolderROIRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setGenericExcitationSourceID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceMap(self, list: java.util.List[bioformats_jar._ome.xml.model.MapPair], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourcePower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setGenericExcitationSourceSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setImageAcquisitionDate(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int) -> None: ...
    def setImageAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setImageDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageExperimentRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageExperimenterGroupRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageInstrumentRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageMicrobeamManipulationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setImageName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageROIRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setImagingEnvironmentAirPressure(self, pressure: bioformats_jar._ome.units.quantity.Pressure, int: int) -> None: ...
    def setImagingEnvironmentCO2Percent(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int) -> None: ...
    def setImagingEnvironmentHumidity(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int) -> None: ...
    def setImagingEnvironmentMap(self, list: java.util.List[bioformats_jar._ome.xml.model.MapPair], int: int) -> None: ...
    def setImagingEnvironmentTemperature(self, temperature: bioformats_jar._ome.units.quantity.Temperature, int: int) -> None: ...
    def setInstrumentAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setInstrumentID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLabelAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLabelFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setLabelFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setLabelFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setLabelFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLabelFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setLabelID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLabelLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setLabelStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setLabelStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLabelStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLabelText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLabelTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLabelTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLabelTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLabelTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setLabelX(self, double: float, int: int, int2: int) -> None: ...
    def setLabelY(self, double: float, int: int, int2: int) -> None: ...
    def setLaserAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLaserFrequencyMultiplication(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int, int2: int) -> None: ...
    def setLaserID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserLaserMedium(self, laserMedium: bioformats_jar._ome.xml.model.enums.LaserMedium, int: int, int2: int) -> None: ...
    def setLaserLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserPockelCell(self, boolean: bool, int: int, int2: int) -> None: ...
    def setLaserPower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setLaserPulse(self, pulse: bioformats_jar._ome.xml.model.enums.Pulse, int: int, int2: int) -> None: ...
    def setLaserPump(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserRepetitionRate(self, frequency: bioformats_jar._ome.units.quantity.Frequency, int: int, int2: int) -> None: ...
    def setLaserSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserTuneable(self, boolean: bool, int: int, int2: int) -> None: ...
    def setLaserType(self, laserType: bioformats_jar._ome.xml.model.enums.LaserType, int: int, int2: int) -> None: ...
    def setLaserWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLightEmittingDiodeAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLightEmittingDiodeID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightEmittingDiodeLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightEmittingDiodeManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightEmittingDiodeModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightEmittingDiodePower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setLightEmittingDiodeSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightPathAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLightPathDichroicRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightPathEmissionFilterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLightPathExcitationFilterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLineAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLineFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setLineFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setLineFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setLineFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLineFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setLineID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLineLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setLineMarkerEnd(self, marker: bioformats_jar._ome.xml.model.enums.Marker, int: int, int2: int) -> None: ...
    def setLineMarkerStart(self, marker: bioformats_jar._ome.xml.model.enums.Marker, int: int, int2: int) -> None: ...
    def setLineStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setLineStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLineStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLineText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLineTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLineTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLineTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLineTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setLineX1(self, double: float, int: int, int2: int) -> None: ...
    def setLineX2(self, double: float, int: int, int2: int) -> None: ...
    def setLineY1(self, double: float, int: int, int2: int) -> None: ...
    def setLineY2(self, double: float, int: int, int2: int) -> None: ...
    def setListAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setListAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setListAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setListAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setListAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLongAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationValue(self, long: int, int: int) -> None: ...
    def setMapAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMapAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMapAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMapAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMapAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMapAnnotationValue(self, list: java.util.List[bioformats_jar._ome.xml.model.MapPair], int: int) -> None: ...
    def setMaskAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setMaskBinData(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    def setMaskBinDataBigEndian(self, boolean: bool, int: int, int2: int) -> None: ...
    def setMaskBinDataCompression(self, compression: bioformats_jar._ome.xml.model.enums.Compression, int: int, int2: int) -> None: ...
    def setMaskBinDataLength(self, nonNegativeLong: bioformats_jar._ome.xml.model.primitives.NonNegativeLong, int: int, int2: int) -> None: ...
    def setMaskFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setMaskFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setMaskFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setMaskFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setMaskFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setMaskHeight(self, double: float, int: int, int2: int) -> None: ...
    def setMaskID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMaskLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setMaskStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setMaskStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMaskStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setMaskText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMaskTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setMaskTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setMaskTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setMaskTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setMaskWidth(self, double: float, int: int, int2: int) -> None: ...
    def setMaskX(self, double: float, int: int, int2: int) -> None: ...
    def setMaskY(self, double: float, int: int, int2: int) -> None: ...
    def setMicrobeamManipulationDescription(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMicrobeamManipulationExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMicrobeamManipulationID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMicrobeamManipulationLightSourceSettingsAttenuation(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int, int2: int, int3: int) -> None: ...
    def setMicrobeamManipulationLightSourceSettingsID(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setMicrobeamManipulationLightSourceSettingsWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int, int3: int) -> None: ...
    def setMicrobeamManipulationROIRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setMicrobeamManipulationType(self, microbeamManipulationType: bioformats_jar._ome.xml.model.enums.MicrobeamManipulationType, int: int, int2: int) -> None: ...
    def setMicroscopeLotNumber(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMicroscopeManufacturer(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMicroscopeModel(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMicroscopeSerialNumber(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMicroscopeType(self, microscopeType: bioformats_jar._ome.xml.model.enums.MicroscopeType, int: int) -> None: ...
    def setObjectiveAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setObjectiveCalibratedMagnification(self, double: float, int: int, int2: int) -> None: ...
    def setObjectiveCorrection(self, correction: bioformats_jar._ome.xml.model.enums.Correction, int: int, int2: int) -> None: ...
    def setObjectiveID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveImmersion(self, immersion: bioformats_jar._ome.xml.model.enums.Immersion, int: int, int2: int) -> None: ...
    def setObjectiveIris(self, boolean: bool, int: int, int2: int) -> None: ...
    def setObjectiveLensNA(self, double: float, int: int, int2: int) -> None: ...
    def setObjectiveLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveNominalMagnification(self, double: float, int: int, int2: int) -> None: ...
    def setObjectiveSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveSettingsCorrectionCollar(self, double: float, int: int) -> None: ...
    def setObjectiveSettingsID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setObjectiveSettingsMedium(self, medium: bioformats_jar._ome.xml.model.enums.Medium, int: int) -> None: ...
    def setObjectiveSettingsRefractiveIndex(self, double: float, int: int) -> None: ...
    def setObjectiveWorkingDistance(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPixelsBigEndian(self, boolean: bool, int: int) -> None: ...
    def setPixelsBinData(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    def setPixelsBinDataBigEndian(self, boolean: bool, int: int, int2: int) -> None: ...
    def setPixelsBinDataCompression(self, compression: bioformats_jar._ome.xml.model.enums.Compression, int: int, int2: int) -> None: ...
    def setPixelsBinDataLength(self, nonNegativeLong: bioformats_jar._ome.xml.model.primitives.NonNegativeLong, int: int, int2: int) -> None: ...
    def setPixelsDimensionOrder(self, dimensionOrder: bioformats_jar._ome.xml.model.enums.DimensionOrder, int: int) -> None: ...
    def setPixelsID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPixelsInterleaved(self, boolean: bool, int: int) -> None: ...
    def setPixelsPhysicalSizeX(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPixelsPhysicalSizeY(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPixelsPhysicalSizeZ(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPixelsSignificantBits(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeC(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeT(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeX(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeY(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeZ(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsTimeIncrement(self, time: bioformats_jar._ome.units.quantity.Time, int: int) -> None: ...
    def setPixelsType(self, pixelType: bioformats_jar._ome.xml.model.enums.PixelType, int: int) -> None: ...
    def setPlaneAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPlaneDeltaT(self, time: bioformats_jar._ome.units.quantity.Time, int: int, int2: int) -> None: ...
    def setPlaneExposureTime(self, time: bioformats_jar._ome.units.quantity.Time, int: int, int2: int) -> None: ...
    def setPlaneHashSHA1(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlanePositionX(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPlanePositionY(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPlanePositionZ(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPlaneTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPlaneTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPlaneTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPlateAcquisitionAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPlateAcquisitionDescription(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlateAcquisitionEndTime(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int, int2: int) -> None: ...
    def setPlateAcquisitionID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlateAcquisitionMaximumFieldCount(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int, int2: int) -> None: ...
    def setPlateAcquisitionName(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlateAcquisitionStartTime(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int, int2: int) -> None: ...
    def setPlateAcquisitionWellSampleRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPlateAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlateColumnNamingConvention(self, namingConvention: bioformats_jar._ome.xml.model.enums.NamingConvention, int: int) -> None: ...
    def setPlateColumns(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPlateDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateExternalIdentifier(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateFieldIndex(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int) -> None: ...
    def setPlateID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateRowNamingConvention(self, namingConvention: bioformats_jar._ome.xml.model.enums.NamingConvention, int: int) -> None: ...
    def setPlateRows(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPlateStatus(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateWellOriginX(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPlateWellOriginY(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPointAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPointFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPointFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setPointFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setPointFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPointFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setPointID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPointLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setPointStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPointStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPointStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPointText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPointTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPointTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPointTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPointTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setPointX(self, double: float, int: int, int2: int) -> None: ...
    def setPointY(self, double: float, int: int, int2: int) -> None: ...
    def setPolygonAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPolygonFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPolygonFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setPolygonFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setPolygonFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPolygonFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setPolygonID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolygonLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setPolygonPoints(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolygonStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPolygonStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolygonStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPolygonText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolygonTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolygonTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolygonTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolygonTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setPolylineAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPolylineFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPolylineFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setPolylineFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setPolylineFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPolylineFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setPolylineID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolylineLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setPolylineMarkerEnd(self, marker: bioformats_jar._ome.xml.model.enums.Marker, int: int, int2: int) -> None: ...
    def setPolylineMarkerStart(self, marker: bioformats_jar._ome.xml.model.enums.Marker, int: int, int2: int) -> None: ...
    def setPolylinePoints(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolylineStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPolylineStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolylineStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPolylineText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolylineTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolylineTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolylineTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolylineTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setProjectAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setProjectDatasetRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setProjectDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setProjectExperimenterGroupRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setProjectExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setProjectID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setProjectName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setROIAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setROIDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setROIID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setROIName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setReagentAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setReagentDescription(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setReagentID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setReagentName(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setReagentReagentIdentifier(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setRectangleAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setRectangleFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setRectangleFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setRectangleFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setRectangleFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setRectangleFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setRectangleHeight(self, double: float, int: int, int2: int) -> None: ...
    def setRectangleID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setRectangleLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setRectangleStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setRectangleStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setRectangleStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setRectangleText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setRectangleTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setRectangleTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setRectangleTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setRectangleTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setRectangleWidth(self, double: float, int: int, int2: int) -> None: ...
    def setRectangleX(self, double: float, int: int, int2: int) -> None: ...
    def setRectangleY(self, double: float, int: int, int2: int) -> None: ...
    def setRightsRightsHeld(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setRightsRightsHolder(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setRoot(self, metadataRoot: MetadataRoot) -> None: ...
    def setScreenAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setScreenDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenPlateRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setScreenProtocolDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenProtocolIdentifier(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenReagentSetDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenReagentSetIdentifier(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenType(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setStageLabelName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setStageLabelX(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setStageLabelY(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setStageLabelZ(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setTagAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setTagAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTagAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTagAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTagAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTagAnnotationValue(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setTermAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationValue(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTiffDataFirstC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTiffDataFirstT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTiffDataFirstZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTiffDataIFD(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTiffDataPlaneCount(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTimestampAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setTimestampAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTimestampAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTimestampAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTimestampAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTimestampAnnotationValue(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int) -> None: ...
    def setTransmittanceRangeCutIn(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setTransmittanceRangeCutInTolerance(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setTransmittanceRangeCutOut(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setTransmittanceRangeCutOutTolerance(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setTransmittanceRangeTransmittance(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int, int2: int) -> None: ...
    def setUUID(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setUUIDFileName(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setUUIDValue(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setWellColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setWellColumn(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setWellExternalDescription(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellExternalIdentifier(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellReagentRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellRow(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setWellSampleID(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setWellSampleImageRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setWellSampleIndex(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int, int3: int) -> None: ...
    def setWellSamplePositionX(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int, int3: int) -> None: ...
    def setWellSamplePositionY(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int, int3: int) -> None: ...
    def setWellSampleTimepoint(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int, int2: int, int3: int) -> None: ...
    def setWellType(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setXMLAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setXMLAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setXMLAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setXMLAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setXMLAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setXMLAnnotationValue(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...

class OMEXMLMetadata(IMetadata):
    def dumpXML(self) -> java.lang.String: ...
    def resolveReferences(self) -> int: ...

class AbstractOMEXMLMetadata(OMEXMLMetadata):
    XSI_NS: typing.ClassVar[java.lang.String] = ...
    SCHEMA: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    def createNewDocument(self) -> org.w3c.dom.Document: ...
    def dumpXML(self) -> java.lang.String: ...

class OMEXMLMetadataImpl(AbstractOMEXMLMetadata):
    def __init__(self): ...
    def createRoot(self) -> None: ...
    def dumpXML(self) -> java.lang.String: ...
    def getArcAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getArcID(self, int: int, int2: int) -> java.lang.String: ...
    def getArcLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getArcManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getArcModel(self, int: int, int2: int) -> java.lang.String: ...
    def getArcPower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getArcSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getArcType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.ArcType: ...
    def getBinaryFileBinData(self, int: int) -> typing.List[int]: ...
    def getBinaryFileBinDataBigEndian(self, int: int) -> bool: ...
    def getBinaryFileBinDataCompression(self, int: int) -> bioformats_jar._ome.xml.model.enums.Compression: ...
    def getBinaryFileBinDataLength(self, int: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeLong: ...
    def getBinaryFileFileName(self, int: int) -> java.lang.String: ...
    def getBinaryFileMIMEType(self, int: int) -> java.lang.String: ...
    def getBinaryFileSize(self, int: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeLong: ...
    def getBinaryOnlyMetadataFile(self) -> java.lang.String: ...
    def getBinaryOnlyUUID(self) -> java.lang.String: ...
    def getBooleanAnnotationAnnotationCount(self, int: int) -> int: ...
    def getBooleanAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getBooleanAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getBooleanAnnotationCount(self) -> int: ...
    def getBooleanAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getBooleanAnnotationID(self, int: int) -> java.lang.String: ...
    def getBooleanAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getBooleanAnnotationValue(self, int: int) -> bool: ...
    def getChannelAcquisitionMode(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.AcquisitionMode: ...
    def getChannelAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getChannelAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getChannelColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getChannelContrastMethod(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.ContrastMethod: ...
    def getChannelCount(self, int: int) -> int: ...
    def getChannelEmissionWavelength(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getChannelExcitationWavelength(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getChannelFilterSetRef(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelFluor(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelID(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelIlluminationType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.IlluminationType: ...
    def getChannelLightSourceSettingsAttenuation(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getChannelLightSourceSettingsID(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelLightSourceSettingsWavelength(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getChannelNDFilter(self, int: int, int2: int) -> float: ...
    def getChannelName(self, int: int, int2: int) -> java.lang.String: ...
    def getChannelPinholeSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getChannelPockelCellSetting(self, int: int, int2: int) -> int: ...
    def getChannelSamplesPerPixel(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getCommentAnnotationAnnotationCount(self, int: int) -> int: ...
    def getCommentAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getCommentAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getCommentAnnotationCount(self) -> int: ...
    def getCommentAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getCommentAnnotationID(self, int: int) -> java.lang.String: ...
    def getCommentAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getCommentAnnotationValue(self, int: int) -> java.lang.String: ...
    def getCreator(self) -> java.lang.String: ...
    def getDatasetAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getDatasetAnnotationRefCount(self, int: int) -> int: ...
    def getDatasetCount(self) -> int: ...
    def getDatasetDescription(self, int: int) -> java.lang.String: ...
    def getDatasetExperimenterGroupRef(self, int: int) -> java.lang.String: ...
    def getDatasetExperimenterRef(self, int: int) -> java.lang.String: ...
    def getDatasetID(self, int: int) -> java.lang.String: ...
    def getDatasetImageRef(self, int: int, int2: int) -> java.lang.String: ...
    def getDatasetImageRefCount(self, int: int) -> int: ...
    def getDatasetName(self, int: int) -> java.lang.String: ...
    def getDatasetRefCount(self, int: int) -> int: ...
    def getDetectorAmplificationGain(self, int: int, int2: int) -> float: ...
    def getDetectorAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getDetectorAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getDetectorCount(self, int: int) -> int: ...
    def getDetectorGain(self, int: int, int2: int) -> float: ...
    def getDetectorID(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorModel(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorOffset(self, int: int, int2: int) -> float: ...
    def getDetectorSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorSettingsBinning(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Binning: ...
    def getDetectorSettingsGain(self, int: int, int2: int) -> float: ...
    def getDetectorSettingsID(self, int: int, int2: int) -> java.lang.String: ...
    def getDetectorSettingsIntegration(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getDetectorSettingsOffset(self, int: int, int2: int) -> float: ...
    def getDetectorSettingsReadOutRate(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Frequency: ...
    def getDetectorSettingsVoltage(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.ElectricPotential: ...
    def getDetectorSettingsZoom(self, int: int, int2: int) -> float: ...
    def getDetectorType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.DetectorType: ...
    def getDetectorVoltage(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.ElectricPotential: ...
    def getDetectorZoom(self, int: int, int2: int) -> float: ...
    def getDichroicAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getDichroicAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getDichroicCount(self, int: int) -> int: ...
    def getDichroicID(self, int: int, int2: int) -> java.lang.String: ...
    def getDichroicLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getDichroicManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getDichroicModel(self, int: int, int2: int) -> java.lang.String: ...
    def getDichroicSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getDoubleAnnotationAnnotationCount(self, int: int) -> int: ...
    def getDoubleAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getDoubleAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getDoubleAnnotationCount(self) -> int: ...
    def getDoubleAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getDoubleAnnotationID(self, int: int) -> java.lang.String: ...
    def getDoubleAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getDoubleAnnotationValue(self, int: int) -> float: ...
    def getEllipseAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getEllipseFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getEllipseFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getEllipseFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getEllipseFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getEllipseFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getEllipseID(self, int: int, int2: int) -> java.lang.String: ...
    def getEllipseLocked(self, int: int, int2: int) -> bool: ...
    def getEllipseRadiusX(self, int: int, int2: int) -> float: ...
    def getEllipseRadiusY(self, int: int, int2: int) -> float: ...
    def getEllipseStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getEllipseStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getEllipseStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getEllipseText(self, int: int, int2: int) -> java.lang.String: ...
    def getEllipseTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getEllipseTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getEllipseTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getEllipseTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getEllipseX(self, int: int, int2: int) -> float: ...
    def getEllipseY(self, int: int, int2: int) -> float: ...
    def getExperimentCount(self) -> int: ...
    def getExperimentDescription(self, int: int) -> java.lang.String: ...
    def getExperimentExperimenterRef(self, int: int) -> java.lang.String: ...
    def getExperimentID(self, int: int) -> java.lang.String: ...
    def getExperimentType(self, int: int) -> bioformats_jar._ome.xml.model.enums.ExperimentType: ...
    def getExperimenterAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getExperimenterAnnotationRefCount(self, int: int) -> int: ...
    def getExperimenterCount(self) -> int: ...
    def getExperimenterEmail(self, int: int) -> java.lang.String: ...
    def getExperimenterFirstName(self, int: int) -> java.lang.String: ...
    def getExperimenterGroupAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getExperimenterGroupAnnotationRefCount(self, int: int) -> int: ...
    def getExperimenterGroupCount(self) -> int: ...
    def getExperimenterGroupDescription(self, int: int) -> java.lang.String: ...
    def getExperimenterGroupExperimenterRef(self, int: int, int2: int) -> java.lang.String: ...
    def getExperimenterGroupExperimenterRefCount(self, int: int) -> int: ...
    def getExperimenterGroupID(self, int: int) -> java.lang.String: ...
    def getExperimenterGroupLeader(self, int: int, int2: int) -> java.lang.String: ...
    def getExperimenterGroupName(self, int: int) -> java.lang.String: ...
    def getExperimenterID(self, int: int) -> java.lang.String: ...
    def getExperimenterInstitution(self, int: int) -> java.lang.String: ...
    def getExperimenterLastName(self, int: int) -> java.lang.String: ...
    def getExperimenterMiddleName(self, int: int) -> java.lang.String: ...
    def getExperimenterUserName(self, int: int) -> java.lang.String: ...
    def getFilamentAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getFilamentID(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentModel(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentPower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getFilamentSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilamentType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FilamentType: ...
    def getFileAnnotationAnnotationCount(self, int: int) -> int: ...
    def getFileAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFileAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getFileAnnotationCount(self) -> int: ...
    def getFileAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getFileAnnotationID(self, int: int) -> java.lang.String: ...
    def getFileAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getFilterAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getFilterAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getFilterCount(self, int: int) -> int: ...
    def getFilterFilterWheel(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterID(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterModel(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetCount(self, int: int) -> int: ...
    def getFilterSetDichroicRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetEmissionFilterRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getFilterSetEmissionFilterRefCount(self, int: int, int2: int) -> int: ...
    def getFilterSetExcitationFilterRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getFilterSetExcitationFilterRefCount(self, int: int, int2: int) -> int: ...
    def getFilterSetID(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetModel(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterSetSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getFilterType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FilterType: ...
    def getFolderAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFolderAnnotationRefCount(self, int: int) -> int: ...
    def getFolderCount(self) -> int: ...
    def getFolderDescription(self, int: int) -> java.lang.String: ...
    def getFolderFolderRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFolderID(self, int: int) -> java.lang.String: ...
    def getFolderImageRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFolderImageRefCount(self, int: int) -> int: ...
    def getFolderName(self, int: int) -> java.lang.String: ...
    def getFolderROIRef(self, int: int, int2: int) -> java.lang.String: ...
    def getFolderROIRefCount(self, int: int) -> int: ...
    def getFolderRefCount(self, int: int) -> int: ...
    def getGenericExcitationSourceAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getGenericExcitationSourceID(self, int: int, int2: int) -> java.lang.String: ...
    def getGenericExcitationSourceLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getGenericExcitationSourceManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getGenericExcitationSourceMap(self, int: int, int2: int) -> java.util.List[bioformats_jar._ome.xml.model.MapPair]: ...
    def getGenericExcitationSourceModel(self, int: int, int2: int) -> java.lang.String: ...
    def getGenericExcitationSourcePower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getGenericExcitationSourceSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getImageAcquisitionDate(self, int: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getImageAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getImageAnnotationRefCount(self, int: int) -> int: ...
    def getImageCount(self) -> int: ...
    def getImageDescription(self, int: int) -> java.lang.String: ...
    def getImageExperimentRef(self, int: int) -> java.lang.String: ...
    def getImageExperimenterGroupRef(self, int: int) -> java.lang.String: ...
    def getImageExperimenterRef(self, int: int) -> java.lang.String: ...
    def getImageID(self, int: int) -> java.lang.String: ...
    def getImageInstrumentRef(self, int: int) -> java.lang.String: ...
    def getImageMicrobeamManipulationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getImageName(self, int: int) -> java.lang.String: ...
    def getImageROIRef(self, int: int, int2: int) -> java.lang.String: ...
    def getImageROIRefCount(self, int: int) -> int: ...
    def getImagingEnvironmentAirPressure(self, int: int) -> bioformats_jar._ome.units.quantity.Pressure: ...
    def getImagingEnvironmentCO2Percent(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getImagingEnvironmentHumidity(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getImagingEnvironmentMap(self, int: int) -> java.util.List[bioformats_jar._ome.xml.model.MapPair]: ...
    def getImagingEnvironmentTemperature(self, int: int) -> bioformats_jar._ome.units.quantity.Temperature: ...
    def getInstrumentAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getInstrumentAnnotationRefCount(self, int: int) -> int: ...
    def getInstrumentCount(self) -> int: ...
    def getInstrumentID(self, int: int) -> java.lang.String: ...
    def getLabelAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLabelFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getLabelFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getLabelFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getLabelFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLabelFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getLabelID(self, int: int, int2: int) -> java.lang.String: ...
    def getLabelLocked(self, int: int, int2: int) -> bool: ...
    def getLabelStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getLabelStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getLabelStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLabelText(self, int: int, int2: int) -> java.lang.String: ...
    def getLabelTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLabelTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLabelTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLabelTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getLabelX(self, int: int, int2: int) -> float: ...
    def getLabelY(self, int: int, int2: int) -> float: ...
    def getLaserAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLaserFrequencyMultiplication(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getLaserID(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserLaserMedium(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.LaserMedium: ...
    def getLaserLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserModel(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserPockelCell(self, int: int, int2: int) -> bool: ...
    def getLaserPower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getLaserPulse(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Pulse: ...
    def getLaserPump(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserRepetitionRate(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Frequency: ...
    def getLaserSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getLaserTuneable(self, int: int, int2: int) -> bool: ...
    def getLaserType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.LaserType: ...
    def getLaserWavelength(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLeaderCount(self, int: int) -> int: ...
    def getLightEmittingDiodeAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLightEmittingDiodeID(self, int: int, int2: int) -> java.lang.String: ...
    def getLightEmittingDiodeLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getLightEmittingDiodeManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getLightEmittingDiodeModel(self, int: int, int2: int) -> java.lang.String: ...
    def getLightEmittingDiodePower(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Power: ...
    def getLightEmittingDiodeSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getLightPathAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLightPathAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getLightPathDichroicRef(self, int: int, int2: int) -> java.lang.String: ...
    def getLightPathEmissionFilterRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLightPathEmissionFilterRefCount(self, int: int, int2: int) -> int: ...
    def getLightPathExcitationFilterRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLightPathExcitationFilterRefCount(self, int: int, int2: int) -> int: ...
    def getLightSourceAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getLightSourceCount(self, int: int) -> int: ...
    def getLightSourceType(self, int: int, int2: int) -> java.lang.String: ...
    def getLineAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getLineFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getLineFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getLineFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getLineFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLineFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getLineID(self, int: int, int2: int) -> java.lang.String: ...
    def getLineLocked(self, int: int, int2: int) -> bool: ...
    def getLineMarkerEnd(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Marker: ...
    def getLineMarkerStart(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Marker: ...
    def getLineStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getLineStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getLineStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getLineText(self, int: int, int2: int) -> java.lang.String: ...
    def getLineTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLineTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLineTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getLineTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getLineX1(self, int: int, int2: int) -> float: ...
    def getLineX2(self, int: int, int2: int) -> float: ...
    def getLineY1(self, int: int, int2: int) -> float: ...
    def getLineY2(self, int: int, int2: int) -> float: ...
    def getListAnnotationAnnotationCount(self, int: int) -> int: ...
    def getListAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getListAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getListAnnotationCount(self) -> int: ...
    def getListAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getListAnnotationID(self, int: int) -> java.lang.String: ...
    def getListAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getLongAnnotationAnnotationCount(self, int: int) -> int: ...
    def getLongAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getLongAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getLongAnnotationCount(self) -> int: ...
    def getLongAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getLongAnnotationID(self, int: int) -> java.lang.String: ...
    def getLongAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getLongAnnotationValue(self, int: int) -> int: ...
    def getMapAnnotationAnnotationCount(self, int: int) -> int: ...
    def getMapAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getMapAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getMapAnnotationCount(self) -> int: ...
    def getMapAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getMapAnnotationID(self, int: int) -> java.lang.String: ...
    def getMapAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getMapAnnotationValue(self, int: int) -> java.util.List[bioformats_jar._ome.xml.model.MapPair]: ...
    def getMaskAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getMaskBinData(self, int: int, int2: int) -> typing.List[int]: ...
    def getMaskBinDataBigEndian(self, int: int, int2: int) -> bool: ...
    def getMaskBinDataCompression(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Compression: ...
    def getMaskBinDataLength(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeLong: ...
    def getMaskFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getMaskFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getMaskFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getMaskFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getMaskFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getMaskHeight(self, int: int, int2: int) -> float: ...
    def getMaskID(self, int: int, int2: int) -> java.lang.String: ...
    def getMaskLocked(self, int: int, int2: int) -> bool: ...
    def getMaskStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getMaskStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getMaskStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getMaskText(self, int: int, int2: int) -> java.lang.String: ...
    def getMaskTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getMaskTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getMaskTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getMaskTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getMaskWidth(self, int: int, int2: int) -> float: ...
    def getMaskX(self, int: int, int2: int) -> float: ...
    def getMaskY(self, int: int, int2: int) -> float: ...
    def getMicrobeamManipulationCount(self, int: int) -> int: ...
    def getMicrobeamManipulationDescription(self, int: int, int2: int) -> java.lang.String: ...
    def getMicrobeamManipulationExperimenterRef(self, int: int, int2: int) -> java.lang.String: ...
    def getMicrobeamManipulationID(self, int: int, int2: int) -> java.lang.String: ...
    def getMicrobeamManipulationLightSourceSettingsAttenuation(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getMicrobeamManipulationLightSourceSettingsCount(self, int: int, int2: int) -> int: ...
    def getMicrobeamManipulationLightSourceSettingsID(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getMicrobeamManipulationLightSourceSettingsWavelength(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getMicrobeamManipulationROIRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getMicrobeamManipulationROIRefCount(self, int: int, int2: int) -> int: ...
    def getMicrobeamManipulationRefCount(self, int: int) -> int: ...
    def getMicrobeamManipulationType(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.MicrobeamManipulationType: ...
    def getMicroscopeLotNumber(self, int: int) -> java.lang.String: ...
    def getMicroscopeManufacturer(self, int: int) -> java.lang.String: ...
    def getMicroscopeModel(self, int: int) -> java.lang.String: ...
    def getMicroscopeSerialNumber(self, int: int) -> java.lang.String: ...
    def getMicroscopeType(self, int: int) -> bioformats_jar._ome.xml.model.enums.MicroscopeType: ...
    def getObjectiveAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getObjectiveAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getObjectiveCalibratedMagnification(self, int: int, int2: int) -> float: ...
    def getObjectiveCorrection(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Correction: ...
    def getObjectiveCount(self, int: int) -> int: ...
    def getObjectiveID(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveImmersion(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Immersion: ...
    def getObjectiveIris(self, int: int, int2: int) -> bool: ...
    def getObjectiveLensNA(self, int: int, int2: int) -> float: ...
    def getObjectiveLotNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveManufacturer(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveModel(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveNominalMagnification(self, int: int, int2: int) -> float: ...
    def getObjectiveSerialNumber(self, int: int, int2: int) -> java.lang.String: ...
    def getObjectiveSettingsCorrectionCollar(self, int: int) -> float: ...
    def getObjectiveSettingsID(self, int: int) -> java.lang.String: ...
    def getObjectiveSettingsMedium(self, int: int) -> bioformats_jar._ome.xml.model.enums.Medium: ...
    def getObjectiveSettingsRefractiveIndex(self, int: int) -> float: ...
    def getObjectiveWorkingDistance(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPixelsBigEndian(self, int: int) -> bool: ...
    def getPixelsBinData(self, int: int, int2: int) -> typing.List[int]: ...
    def getPixelsBinDataBigEndian(self, int: int, int2: int) -> bool: ...
    def getPixelsBinDataCompression(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Compression: ...
    def getPixelsBinDataCount(self, int: int) -> int: ...
    def getPixelsBinDataLength(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeLong: ...
    def getPixelsDimensionOrder(self, int: int) -> bioformats_jar._ome.xml.model.enums.DimensionOrder: ...
    def getPixelsID(self, int: int) -> java.lang.String: ...
    def getPixelsInterleaved(self, int: int) -> bool: ...
    def getPixelsPhysicalSizeX(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPixelsPhysicalSizeY(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPixelsPhysicalSizeZ(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPixelsSignificantBits(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeC(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeT(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeX(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeY(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsSizeZ(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPixelsTimeIncrement(self, int: int) -> bioformats_jar._ome.units.quantity.Time: ...
    def getPixelsType(self, int: int) -> bioformats_jar._ome.xml.model.enums.PixelType: ...
    def getPlaneAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPlaneAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getPlaneCount(self, int: int) -> int: ...
    def getPlaneDeltaT(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Time: ...
    def getPlaneExposureTime(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Time: ...
    def getPlaneHashSHA1(self, int: int, int2: int) -> java.lang.String: ...
    def getPlanePositionX(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPlanePositionY(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPlanePositionZ(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPlaneTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPlaneTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPlaneTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPlateAcquisitionAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPlateAcquisitionAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getPlateAcquisitionCount(self, int: int) -> int: ...
    def getPlateAcquisitionDescription(self, int: int, int2: int) -> java.lang.String: ...
    def getPlateAcquisitionEndTime(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getPlateAcquisitionID(self, int: int, int2: int) -> java.lang.String: ...
    def getPlateAcquisitionMaximumFieldCount(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPlateAcquisitionName(self, int: int, int2: int) -> java.lang.String: ...
    def getPlateAcquisitionStartTime(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getPlateAcquisitionWellSampleRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPlateAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getPlateAnnotationRefCount(self, int: int) -> int: ...
    def getPlateColumnNamingConvention(self, int: int) -> bioformats_jar._ome.xml.model.enums.NamingConvention: ...
    def getPlateColumns(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPlateCount(self) -> int: ...
    def getPlateDescription(self, int: int) -> java.lang.String: ...
    def getPlateExternalIdentifier(self, int: int) -> java.lang.String: ...
    def getPlateFieldIndex(self, int: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPlateID(self, int: int) -> java.lang.String: ...
    def getPlateName(self, int: int) -> java.lang.String: ...
    def getPlateRefCount(self, int: int) -> int: ...
    def getPlateRowNamingConvention(self, int: int) -> bioformats_jar._ome.xml.model.enums.NamingConvention: ...
    def getPlateRows(self, int: int) -> bioformats_jar._ome.xml.model.primitives.PositiveInteger: ...
    def getPlateStatus(self, int: int) -> java.lang.String: ...
    def getPlateWellOriginX(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPlateWellOriginY(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPointAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPointFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPointFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getPointFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getPointFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPointFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getPointID(self, int: int, int2: int) -> java.lang.String: ...
    def getPointLocked(self, int: int, int2: int) -> bool: ...
    def getPointStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPointStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getPointStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPointText(self, int: int, int2: int) -> java.lang.String: ...
    def getPointTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPointTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPointTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPointTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getPointX(self, int: int, int2: int) -> float: ...
    def getPointY(self, int: int, int2: int) -> float: ...
    def getPolygonAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPolygonFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPolygonFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getPolygonFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getPolygonFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPolygonFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getPolygonID(self, int: int, int2: int) -> java.lang.String: ...
    def getPolygonLocked(self, int: int, int2: int) -> bool: ...
    def getPolygonPoints(self, int: int, int2: int) -> java.lang.String: ...
    def getPolygonStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPolygonStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getPolygonStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPolygonText(self, int: int, int2: int) -> java.lang.String: ...
    def getPolygonTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolygonTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolygonTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolygonTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getPolylineAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getPolylineFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPolylineFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getPolylineFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getPolylineFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPolylineFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getPolylineID(self, int: int, int2: int) -> java.lang.String: ...
    def getPolylineLocked(self, int: int, int2: int) -> bool: ...
    def getPolylineMarkerEnd(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Marker: ...
    def getPolylineMarkerStart(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.Marker: ...
    def getPolylinePoints(self, int: int, int2: int) -> java.lang.String: ...
    def getPolylineStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getPolylineStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getPolylineStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getPolylineText(self, int: int, int2: int) -> java.lang.String: ...
    def getPolylineTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolylineTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolylineTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getPolylineTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getProjectAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getProjectAnnotationRefCount(self, int: int) -> int: ...
    def getProjectCount(self) -> int: ...
    def getProjectDatasetRef(self, int: int, int2: int) -> java.lang.String: ...
    def getProjectDescription(self, int: int) -> java.lang.String: ...
    def getProjectExperimenterGroupRef(self, int: int) -> java.lang.String: ...
    def getProjectExperimenterRef(self, int: int) -> java.lang.String: ...
    def getProjectID(self, int: int) -> java.lang.String: ...
    def getProjectName(self, int: int) -> java.lang.String: ...
    def getROIAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getROIAnnotationRefCount(self, int: int) -> int: ...
    def getROICount(self) -> int: ...
    def getROIDescription(self, int: int) -> java.lang.String: ...
    def getROIID(self, int: int) -> java.lang.String: ...
    def getROIName(self, int: int) -> java.lang.String: ...
    def getReagentAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getReagentAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getReagentCount(self, int: int) -> int: ...
    def getReagentDescription(self, int: int, int2: int) -> java.lang.String: ...
    def getReagentID(self, int: int, int2: int) -> java.lang.String: ...
    def getReagentName(self, int: int, int2: int) -> java.lang.String: ...
    def getReagentReagentIdentifier(self, int: int, int2: int) -> java.lang.String: ...
    def getRectangleAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getRectangleFillColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getRectangleFillRule(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FillRule: ...
    def getRectangleFontFamily(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontFamily: ...
    def getRectangleFontSize(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getRectangleFontStyle(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.enums.FontStyle: ...
    def getRectangleHeight(self, int: int, int2: int) -> float: ...
    def getRectangleID(self, int: int, int2: int) -> java.lang.String: ...
    def getRectangleLocked(self, int: int, int2: int) -> bool: ...
    def getRectangleStrokeColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getRectangleStrokeDashArray(self, int: int, int2: int) -> java.lang.String: ...
    def getRectangleStrokeWidth(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getRectangleText(self, int: int, int2: int) -> java.lang.String: ...
    def getRectangleTheC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getRectangleTheT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getRectangleTheZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getRectangleTransform(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.AffineTransform: ...
    def getRectangleWidth(self, int: int, int2: int) -> float: ...
    def getRectangleX(self, int: int, int2: int) -> float: ...
    def getRectangleY(self, int: int, int2: int) -> float: ...
    def getRightsRightsHeld(self) -> java.lang.String: ...
    def getRightsRightsHolder(self) -> java.lang.String: ...
    def getRoot(self) -> MetadataRoot: ...
    def getScreenAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getScreenAnnotationRefCount(self, int: int) -> int: ...
    def getScreenCount(self) -> int: ...
    def getScreenDescription(self, int: int) -> java.lang.String: ...
    def getScreenID(self, int: int) -> java.lang.String: ...
    def getScreenName(self, int: int) -> java.lang.String: ...
    def getScreenPlateRef(self, int: int, int2: int) -> java.lang.String: ...
    def getScreenProtocolDescription(self, int: int) -> java.lang.String: ...
    def getScreenProtocolIdentifier(self, int: int) -> java.lang.String: ...
    def getScreenReagentSetDescription(self, int: int) -> java.lang.String: ...
    def getScreenReagentSetIdentifier(self, int: int) -> java.lang.String: ...
    def getScreenType(self, int: int) -> java.lang.String: ...
    def getShapeAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getShapeCount(self, int: int) -> int: ...
    def getShapeType(self, int: int, int2: int) -> java.lang.String: ...
    def getStageLabelName(self, int: int) -> java.lang.String: ...
    def getStageLabelX(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getStageLabelY(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getStageLabelZ(self, int: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTagAnnotationAnnotationCount(self, int: int) -> int: ...
    def getTagAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getTagAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getTagAnnotationCount(self) -> int: ...
    def getTagAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getTagAnnotationID(self, int: int) -> java.lang.String: ...
    def getTagAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getTagAnnotationValue(self, int: int) -> java.lang.String: ...
    def getTermAnnotationAnnotationCount(self, int: int) -> int: ...
    def getTermAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getTermAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getTermAnnotationCount(self) -> int: ...
    def getTermAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getTermAnnotationID(self, int: int) -> java.lang.String: ...
    def getTermAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getTermAnnotationValue(self, int: int) -> java.lang.String: ...
    def getTiffDataCount(self, int: int) -> int: ...
    def getTiffDataFirstC(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTiffDataFirstT(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTiffDataFirstZ(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTiffDataIFD(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTiffDataPlaneCount(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getTimestampAnnotationAnnotationCount(self, int: int) -> int: ...
    def getTimestampAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getTimestampAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getTimestampAnnotationCount(self) -> int: ...
    def getTimestampAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getTimestampAnnotationID(self, int: int) -> java.lang.String: ...
    def getTimestampAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getTimestampAnnotationValue(self, int: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getTransmittanceRangeCutIn(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTransmittanceRangeCutInTolerance(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTransmittanceRangeCutOut(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTransmittanceRangeCutOutTolerance(self, int: int, int2: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getTransmittanceRangeTransmittance(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.PercentFraction: ...
    def getUUID(self) -> java.lang.String: ...
    def getUUIDFileName(self, int: int, int2: int) -> java.lang.String: ...
    def getUUIDValue(self, int: int, int2: int) -> java.lang.String: ...
    def getWellAnnotationRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getWellAnnotationRefCount(self, int: int, int2: int) -> int: ...
    def getWellColor(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.Color: ...
    def getWellColumn(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getWellCount(self, int: int) -> int: ...
    def getWellExternalDescription(self, int: int, int2: int) -> java.lang.String: ...
    def getWellExternalIdentifier(self, int: int, int2: int) -> java.lang.String: ...
    def getWellID(self, int: int, int2: int) -> java.lang.String: ...
    def getWellReagentRef(self, int: int, int2: int) -> java.lang.String: ...
    def getWellRow(self, int: int, int2: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getWellSampleCount(self, int: int, int2: int) -> int: ...
    def getWellSampleID(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getWellSampleImageRef(self, int: int, int2: int, int3: int) -> java.lang.String: ...
    def getWellSampleIndex(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.xml.model.primitives.NonNegativeInteger: ...
    def getWellSamplePositionX(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getWellSamplePositionY(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.units.quantity.Length: ...
    def getWellSampleRefCount(self, int: int, int2: int) -> int: ...
    def getWellSampleTimepoint(self, int: int, int2: int, int3: int) -> bioformats_jar._ome.xml.model.primitives.Timestamp: ...
    def getWellType(self, int: int, int2: int) -> java.lang.String: ...
    def getXMLAnnotationAnnotationCount(self, int: int) -> int: ...
    def getXMLAnnotationAnnotationRef(self, int: int, int2: int) -> java.lang.String: ...
    def getXMLAnnotationAnnotator(self, int: int) -> java.lang.String: ...
    def getXMLAnnotationCount(self) -> int: ...
    def getXMLAnnotationDescription(self, int: int) -> java.lang.String: ...
    def getXMLAnnotationID(self, int: int) -> java.lang.String: ...
    def getXMLAnnotationNamespace(self, int: int) -> java.lang.String: ...
    def getXMLAnnotationValue(self, int: int) -> java.lang.String: ...
    def resolveReferences(self) -> int: ...
    def setArcAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setArcID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcPower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setArcSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setArcType(self, arcType: bioformats_jar._ome.xml.model.enums.ArcType, int: int, int2: int) -> None: ...
    def setBinaryFileBinData(self, byteArray: typing.List[int], int: int) -> None: ...
    def setBinaryFileBinDataBigEndian(self, boolean: bool, int: int) -> None: ...
    def setBinaryFileBinDataCompression(self, compression: bioformats_jar._ome.xml.model.enums.Compression, int: int) -> None: ...
    def setBinaryFileBinDataLength(self, nonNegativeLong: bioformats_jar._ome.xml.model.primitives.NonNegativeLong, int: int) -> None: ...
    def setBinaryFileFileName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBinaryFileMIMEType(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBinaryFileSize(self, nonNegativeLong: bioformats_jar._ome.xml.model.primitives.NonNegativeLong, int: int) -> None: ...
    def setBinaryOnlyMetadataFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setBinaryOnlyUUID(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setBooleanAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setBooleanAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBooleanAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBooleanAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBooleanAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setBooleanAnnotationValue(self, boolean: bool, int: int) -> None: ...
    def setChannelAcquisitionMode(self, acquisitionMode: bioformats_jar._ome.xml.model.enums.AcquisitionMode, int: int, int2: int) -> None: ...
    def setChannelAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setChannelColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setChannelContrastMethod(self, contrastMethod: bioformats_jar._ome.xml.model.enums.ContrastMethod, int: int, int2: int) -> None: ...
    def setChannelEmissionWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setChannelExcitationWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setChannelFilterSetRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelFluor(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelIlluminationType(self, illuminationType: bioformats_jar._ome.xml.model.enums.IlluminationType, int: int, int2: int) -> None: ...
    def setChannelLightSourceSettingsAttenuation(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int, int2: int) -> None: ...
    def setChannelLightSourceSettingsID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelLightSourceSettingsWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setChannelNDFilter(self, double: float, int: int, int2: int) -> None: ...
    def setChannelName(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setChannelPinholeSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setChannelPockelCellSetting(self, integer: int, int2: int, int3: int) -> None: ...
    def setChannelSamplesPerPixel(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int, int2: int) -> None: ...
    def setCommentAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setCommentAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCommentAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCommentAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCommentAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCommentAnnotationValue(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setCreator(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setDatasetAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDatasetDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDatasetExperimenterGroupRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDatasetExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDatasetID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDatasetImageRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDatasetName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDetectorAmplificationGain(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setDetectorGain(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorOffset(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorSettingsBinning(self, binning: bioformats_jar._ome.xml.model.enums.Binning, int: int, int2: int) -> None: ...
    def setDetectorSettingsGain(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorSettingsID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDetectorSettingsIntegration(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int, int2: int) -> None: ...
    def setDetectorSettingsOffset(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorSettingsReadOutRate(self, frequency: bioformats_jar._ome.units.quantity.Frequency, int: int, int2: int) -> None: ...
    def setDetectorSettingsVoltage(self, electricPotential: bioformats_jar._ome.units.quantity.ElectricPotential, int: int, int2: int) -> None: ...
    def setDetectorSettingsZoom(self, double: float, int: int, int2: int) -> None: ...
    def setDetectorType(self, detectorType: bioformats_jar._ome.xml.model.enums.DetectorType, int: int, int2: int) -> None: ...
    def setDetectorVoltage(self, electricPotential: bioformats_jar._ome.units.quantity.ElectricPotential, int: int, int2: int) -> None: ...
    def setDetectorZoom(self, double: float, int: int, int2: int) -> None: ...
    def setDichroicAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setDichroicID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDichroicLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDichroicManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDichroicModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDichroicSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDoubleAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setDoubleAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDoubleAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDoubleAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDoubleAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setDoubleAnnotationValue(self, double: float, int: int) -> None: ...
    def setEllipseAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setEllipseFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setEllipseFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setEllipseFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setEllipseFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setEllipseFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setEllipseID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setEllipseLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setEllipseRadiusX(self, double: float, int: int, int2: int) -> None: ...
    def setEllipseRadiusY(self, double: float, int: int, int2: int) -> None: ...
    def setEllipseStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setEllipseStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setEllipseStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setEllipseText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setEllipseTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setEllipseTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setEllipseTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setEllipseTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setEllipseX(self, double: float, int: int, int2: int) -> None: ...
    def setEllipseY(self, double: float, int: int, int2: int) -> None: ...
    def setExperimentDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimentExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimentID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimentType(self, experimentType: bioformats_jar._ome.xml.model.enums.ExperimentType, int: int) -> None: ...
    def setExperimenterAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setExperimenterEmail(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterFirstName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterGroupAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setExperimenterGroupDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterGroupExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setExperimenterGroupID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterGroupLeader(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setExperimenterGroupName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterInstitution(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterLastName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterMiddleName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setExperimenterUserName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFilamentAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setFilamentID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentPower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setFilamentSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilamentType(self, filamentType: bioformats_jar._ome.xml.model.enums.FilamentType, int: int, int2: int) -> None: ...
    def setFileAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFileAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFileAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFileAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFileAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFilterAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setFilterFilterWheel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetDichroicRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetEmissionFilterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setFilterSetExcitationFilterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setFilterSetID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterSetSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFilterType(self, filterType: bioformats_jar._ome.xml.model.enums.FilterType, int: int, int2: int) -> None: ...
    def setFolderAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFolderDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFolderFolderRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFolderID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFolderImageRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setFolderName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setFolderROIRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setGenericExcitationSourceID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceMap(self, list: java.util.List[bioformats_jar._ome.xml.model.MapPair], int: int, int2: int) -> None: ...
    def setGenericExcitationSourceModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setGenericExcitationSourcePower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setGenericExcitationSourceSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setImageAcquisitionDate(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int) -> None: ...
    def setImageAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setImageDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageExperimentRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageExperimenterGroupRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageInstrumentRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageMicrobeamManipulationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setImageName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setImageROIRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setImagingEnvironmentAirPressure(self, pressure: bioformats_jar._ome.units.quantity.Pressure, int: int) -> None: ...
    def setImagingEnvironmentCO2Percent(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int) -> None: ...
    def setImagingEnvironmentHumidity(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int) -> None: ...
    def setImagingEnvironmentMap(self, list: java.util.List[bioformats_jar._ome.xml.model.MapPair], int: int) -> None: ...
    def setImagingEnvironmentTemperature(self, temperature: bioformats_jar._ome.units.quantity.Temperature, int: int) -> None: ...
    def setInstrumentAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setInstrumentID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLabelAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLabelFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setLabelFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setLabelFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setLabelFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLabelFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setLabelID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLabelLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setLabelStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setLabelStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLabelStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLabelText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLabelTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLabelTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLabelTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLabelTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setLabelX(self, double: float, int: int, int2: int) -> None: ...
    def setLabelY(self, double: float, int: int, int2: int) -> None: ...
    def setLaserAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLaserFrequencyMultiplication(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int, int2: int) -> None: ...
    def setLaserID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserLaserMedium(self, laserMedium: bioformats_jar._ome.xml.model.enums.LaserMedium, int: int, int2: int) -> None: ...
    def setLaserLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserPockelCell(self, boolean: bool, int: int, int2: int) -> None: ...
    def setLaserPower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setLaserPulse(self, pulse: bioformats_jar._ome.xml.model.enums.Pulse, int: int, int2: int) -> None: ...
    def setLaserPump(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserRepetitionRate(self, frequency: bioformats_jar._ome.units.quantity.Frequency, int: int, int2: int) -> None: ...
    def setLaserSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLaserTuneable(self, boolean: bool, int: int, int2: int) -> None: ...
    def setLaserType(self, laserType: bioformats_jar._ome.xml.model.enums.LaserType, int: int, int2: int) -> None: ...
    def setLaserWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLightEmittingDiodeAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLightEmittingDiodeID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightEmittingDiodeLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightEmittingDiodeManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightEmittingDiodeModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightEmittingDiodePower(self, power: bioformats_jar._ome.units.quantity.Power, int: int, int2: int) -> None: ...
    def setLightEmittingDiodeSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightPathAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLightPathDichroicRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLightPathEmissionFilterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLightPathExcitationFilterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLineAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setLineFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setLineFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setLineFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setLineFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLineFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setLineID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLineLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setLineMarkerEnd(self, marker: bioformats_jar._ome.xml.model.enums.Marker, int: int, int2: int) -> None: ...
    def setLineMarkerStart(self, marker: bioformats_jar._ome.xml.model.enums.Marker, int: int, int2: int) -> None: ...
    def setLineStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setLineStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLineStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setLineText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLineTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLineTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLineTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setLineTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setLineX1(self, double: float, int: int, int2: int) -> None: ...
    def setLineX2(self, double: float, int: int, int2: int) -> None: ...
    def setLineY1(self, double: float, int: int, int2: int) -> None: ...
    def setLineY2(self, double: float, int: int, int2: int) -> None: ...
    def setListAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setListAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setListAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setListAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setListAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setLongAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setLongAnnotationValue(self, long: int, int: int) -> None: ...
    def setMapAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMapAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMapAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMapAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMapAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMapAnnotationValue(self, list: java.util.List[bioformats_jar._ome.xml.model.MapPair], int: int) -> None: ...
    def setMaskAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setMaskBinData(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    def setMaskBinDataBigEndian(self, boolean: bool, int: int, int2: int) -> None: ...
    def setMaskBinDataCompression(self, compression: bioformats_jar._ome.xml.model.enums.Compression, int: int, int2: int) -> None: ...
    def setMaskBinDataLength(self, nonNegativeLong: bioformats_jar._ome.xml.model.primitives.NonNegativeLong, int: int, int2: int) -> None: ...
    def setMaskFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setMaskFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setMaskFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setMaskFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setMaskFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setMaskHeight(self, double: float, int: int, int2: int) -> None: ...
    def setMaskID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMaskLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setMaskStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setMaskStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMaskStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setMaskText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMaskTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setMaskTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setMaskTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setMaskTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setMaskWidth(self, double: float, int: int, int2: int) -> None: ...
    def setMaskX(self, double: float, int: int, int2: int) -> None: ...
    def setMaskY(self, double: float, int: int, int2: int) -> None: ...
    def setMicrobeamManipulationDescription(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMicrobeamManipulationExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMicrobeamManipulationID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setMicrobeamManipulationLightSourceSettingsAttenuation(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int, int2: int, int3: int) -> None: ...
    def setMicrobeamManipulationLightSourceSettingsID(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setMicrobeamManipulationLightSourceSettingsWavelength(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int, int3: int) -> None: ...
    def setMicrobeamManipulationROIRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setMicrobeamManipulationType(self, microbeamManipulationType: bioformats_jar._ome.xml.model.enums.MicrobeamManipulationType, int: int, int2: int) -> None: ...
    def setMicroscopeLotNumber(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMicroscopeManufacturer(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMicroscopeModel(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMicroscopeSerialNumber(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setMicroscopeType(self, microscopeType: bioformats_jar._ome.xml.model.enums.MicroscopeType, int: int) -> None: ...
    def setObjectiveAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setObjectiveCalibratedMagnification(self, double: float, int: int, int2: int) -> None: ...
    def setObjectiveCorrection(self, correction: bioformats_jar._ome.xml.model.enums.Correction, int: int, int2: int) -> None: ...
    def setObjectiveID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveImmersion(self, immersion: bioformats_jar._ome.xml.model.enums.Immersion, int: int, int2: int) -> None: ...
    def setObjectiveIris(self, boolean: bool, int: int, int2: int) -> None: ...
    def setObjectiveLensNA(self, double: float, int: int, int2: int) -> None: ...
    def setObjectiveLotNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveManufacturer(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveModel(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveNominalMagnification(self, double: float, int: int, int2: int) -> None: ...
    def setObjectiveSerialNumber(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setObjectiveSettingsCorrectionCollar(self, double: float, int: int) -> None: ...
    def setObjectiveSettingsID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setObjectiveSettingsMedium(self, medium: bioformats_jar._ome.xml.model.enums.Medium, int: int) -> None: ...
    def setObjectiveSettingsRefractiveIndex(self, double: float, int: int) -> None: ...
    def setObjectiveWorkingDistance(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPixelsBigEndian(self, boolean: bool, int: int) -> None: ...
    def setPixelsBinData(self, byteArray: typing.List[int], int: int, int2: int) -> None: ...
    def setPixelsBinDataBigEndian(self, boolean: bool, int: int, int2: int) -> None: ...
    def setPixelsBinDataCompression(self, compression: bioformats_jar._ome.xml.model.enums.Compression, int: int, int2: int) -> None: ...
    def setPixelsBinDataLength(self, nonNegativeLong: bioformats_jar._ome.xml.model.primitives.NonNegativeLong, int: int, int2: int) -> None: ...
    def setPixelsDimensionOrder(self, dimensionOrder: bioformats_jar._ome.xml.model.enums.DimensionOrder, int: int) -> None: ...
    def setPixelsID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPixelsInterleaved(self, boolean: bool, int: int) -> None: ...
    def setPixelsPhysicalSizeX(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPixelsPhysicalSizeY(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPixelsPhysicalSizeZ(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPixelsSignificantBits(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeC(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeT(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeX(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeY(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsSizeZ(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPixelsTimeIncrement(self, time: bioformats_jar._ome.units.quantity.Time, int: int) -> None: ...
    def setPixelsType(self, pixelType: bioformats_jar._ome.xml.model.enums.PixelType, int: int) -> None: ...
    def setPlaneAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPlaneDeltaT(self, time: bioformats_jar._ome.units.quantity.Time, int: int, int2: int) -> None: ...
    def setPlaneExposureTime(self, time: bioformats_jar._ome.units.quantity.Time, int: int, int2: int) -> None: ...
    def setPlaneHashSHA1(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlanePositionX(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPlanePositionY(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPlanePositionZ(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPlaneTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPlaneTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPlaneTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPlateAcquisitionAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPlateAcquisitionDescription(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlateAcquisitionEndTime(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int, int2: int) -> None: ...
    def setPlateAcquisitionID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlateAcquisitionMaximumFieldCount(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int, int2: int) -> None: ...
    def setPlateAcquisitionName(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlateAcquisitionStartTime(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int, int2: int) -> None: ...
    def setPlateAcquisitionWellSampleRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPlateAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPlateColumnNamingConvention(self, namingConvention: bioformats_jar._ome.xml.model.enums.NamingConvention, int: int) -> None: ...
    def setPlateColumns(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPlateDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateExternalIdentifier(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateFieldIndex(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int) -> None: ...
    def setPlateID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateRowNamingConvention(self, namingConvention: bioformats_jar._ome.xml.model.enums.NamingConvention, int: int) -> None: ...
    def setPlateRows(self, positiveInteger: bioformats_jar._ome.xml.model.primitives.PositiveInteger, int: int) -> None: ...
    def setPlateStatus(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setPlateWellOriginX(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPlateWellOriginY(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setPointAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPointFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPointFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setPointFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setPointFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPointFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setPointID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPointLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setPointStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPointStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPointStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPointText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPointTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPointTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPointTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPointTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setPointX(self, double: float, int: int, int2: int) -> None: ...
    def setPointY(self, double: float, int: int, int2: int) -> None: ...
    def setPolygonAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPolygonFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPolygonFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setPolygonFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setPolygonFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPolygonFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setPolygonID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolygonLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setPolygonPoints(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolygonStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPolygonStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolygonStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPolygonText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolygonTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolygonTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolygonTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolygonTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setPolylineAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setPolylineFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPolylineFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setPolylineFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setPolylineFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPolylineFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setPolylineID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolylineLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setPolylineMarkerEnd(self, marker: bioformats_jar._ome.xml.model.enums.Marker, int: int, int2: int) -> None: ...
    def setPolylineMarkerStart(self, marker: bioformats_jar._ome.xml.model.enums.Marker, int: int, int2: int) -> None: ...
    def setPolylinePoints(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolylineStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setPolylineStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolylineStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setPolylineText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setPolylineTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolylineTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolylineTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setPolylineTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setProjectAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setProjectDatasetRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setProjectDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setProjectExperimenterGroupRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setProjectExperimenterRef(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setProjectID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setProjectName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setROIAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setROIDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setROIID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setROIName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setReagentAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setReagentDescription(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setReagentID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setReagentName(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setReagentReagentIdentifier(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setRectangleAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setRectangleFillColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setRectangleFillRule(self, fillRule: bioformats_jar._ome.xml.model.enums.FillRule, int: int, int2: int) -> None: ...
    def setRectangleFontFamily(self, fontFamily: bioformats_jar._ome.xml.model.enums.FontFamily, int: int, int2: int) -> None: ...
    def setRectangleFontSize(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setRectangleFontStyle(self, fontStyle: bioformats_jar._ome.xml.model.enums.FontStyle, int: int, int2: int) -> None: ...
    def setRectangleHeight(self, double: float, int: int, int2: int) -> None: ...
    def setRectangleID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setRectangleLocked(self, boolean: bool, int: int, int2: int) -> None: ...
    def setRectangleStrokeColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setRectangleStrokeDashArray(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setRectangleStrokeWidth(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setRectangleText(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setRectangleTheC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setRectangleTheT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setRectangleTheZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setRectangleTransform(self, affineTransform: bioformats_jar._ome.xml.model.AffineTransform, int: int, int2: int) -> None: ...
    def setRectangleWidth(self, double: float, int: int, int2: int) -> None: ...
    def setRectangleX(self, double: float, int: int, int2: int) -> None: ...
    def setRectangleY(self, double: float, int: int, int2: int) -> None: ...
    def setRightsRightsHeld(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setRightsRightsHolder(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setRoot(self, metadataRoot: MetadataRoot) -> None: ...
    def setScreenAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setScreenDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenPlateRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setScreenProtocolDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenProtocolIdentifier(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenReagentSetDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenReagentSetIdentifier(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setScreenType(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setStageLabelName(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setStageLabelX(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setStageLabelY(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setStageLabelZ(self, length: bioformats_jar._ome.units.quantity.Length, int: int) -> None: ...
    def setTagAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setTagAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTagAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTagAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTagAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTagAnnotationValue(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setTermAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTermAnnotationValue(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTiffDataFirstC(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTiffDataFirstT(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTiffDataFirstZ(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTiffDataIFD(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTiffDataPlaneCount(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setTimestampAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setTimestampAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTimestampAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTimestampAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTimestampAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setTimestampAnnotationValue(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int) -> None: ...
    def setTransmittanceRangeCutIn(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setTransmittanceRangeCutInTolerance(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setTransmittanceRangeCutOut(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setTransmittanceRangeCutOutTolerance(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int) -> None: ...
    def setTransmittanceRangeTransmittance(self, percentFraction: bioformats_jar._ome.xml.model.primitives.PercentFraction, int: int, int2: int) -> None: ...
    def setUUID(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setUUIDFileName(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setUUIDValue(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setWellColor(self, color: bioformats_jar._ome.xml.model.primitives.Color, int: int, int2: int) -> None: ...
    def setWellColumn(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setWellExternalDescription(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellExternalIdentifier(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellID(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellReagentRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setWellRow(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int) -> None: ...
    def setWellSampleID(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setWellSampleImageRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int, int3: int) -> None: ...
    def setWellSampleIndex(self, nonNegativeInteger: bioformats_jar._ome.xml.model.primitives.NonNegativeInteger, int: int, int2: int, int3: int) -> None: ...
    def setWellSamplePositionX(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int, int3: int) -> None: ...
    def setWellSamplePositionY(self, length: bioformats_jar._ome.units.quantity.Length, int: int, int2: int, int3: int) -> None: ...
    def setWellSampleTimepoint(self, timestamp: bioformats_jar._ome.xml.model.primitives.Timestamp, int: int, int2: int, int3: int) -> None: ...
    def setWellType(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setXMLAnnotationAnnotationRef(self, string: typing.Union[java.lang.String, str], int: int, int2: int) -> None: ...
    def setXMLAnnotationAnnotator(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setXMLAnnotationDescription(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setXMLAnnotationID(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setXMLAnnotationNamespace(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...
    def setXMLAnnotationValue(self, string: typing.Union[java.lang.String, str], int: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("ome.xml.meta")``.

    AbstractOMEXMLMetadata: typing.Type[AbstractOMEXMLMetadata]
    AggregateMetadata: typing.Type[AggregateMetadata]
    BaseMetadata: typing.Type[BaseMetadata]
    DummyMetadata: typing.Type[DummyMetadata]
    IMetadata: typing.Type[IMetadata]
    MetadataRetrieve: typing.Type[MetadataRetrieve]
    MetadataRoot: typing.Type[MetadataRoot]
    MetadataStore: typing.Type[MetadataStore]
    OMEXMLMetadata: typing.Type[OMEXMLMetadata]
    OMEXMLMetadataImpl: typing.Type[OMEXMLMetadataImpl]
    OMEXMLMetadataRoot: typing.Type[OMEXMLMetadataRoot]
